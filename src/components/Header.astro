---
import { SITE_TITLE } from '../config';
import { getCollection } from 'astro:content';
---

<header class="bg-neutral-800">
  <div class="flex items-center justify-between max-w-3xl m-auto p-4">
    <a
      class="flex items-center gap-x-2 w-fit text-white"
      href={Astro.url.pathname !== '/' ? '/' : null}
      rel="prefetch"
    >
      <img class="w-7 rounded-full bg-white" src="/images/ryokatsu.jpg" width="48" height="48" alt="" decoding="async" />
      {SITE_TITLE}
    </a>
    <div class="flex gap-x-4 items-center">
      <button 
        id="search-toggle" 
        class="text-white hover:text-gray-300 flex items-center" 
        aria-label="検索を開く"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
      </button>
      <ul class="flex gap-x-2">
        <li>
          <a class="text-white hover:text-gray-300 flex items-center" href="/posts-feed.xml" title="RSS Feed">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-rss">
              <path d="M4 11a9 9 0 0 1 9 9"></path>
              <path d="M4 4a16 16 0 0 1 16 16"></path>
              <circle cx="5" cy="19" r="1"></circle>
            </svg>
          </a>
        </li>
      </ul>
    </div>
  </div>
</header>

<!-- 検索モーダル -->
<div id="search-modal" class="fixed inset-0 bg-black bg-opacity-70 z-50 hidden flex items-center justify-center">
  <div class="relative w-full max-w-3xl mx-auto px-4">
    <div class="bg-neutral-800 rounded-lg shadow-xl p-6">
      <div class="flex items-center mb-4">
        <svg class="text-white mr-3" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        <input 
          type="text" 
          id="search-input" 
          placeholder="記事を検索..." 
          class="w-full px-3 py-2 rounded text-sm bg-neutral-700 text-white border border-neutral-600 focus:outline-none focus:border-neutral-500"
        />
        <button id="close-search" class="ml-3 text-white hover:text-gray-300">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      <div id="search-results" class="max-h-60vh overflow-y-auto"></div>
    </div>
  </div>
</div>

<script>
  // 分離したロジックを使用する
  import { fetchBlogPosts, searchPosts, generateSearchResultsHtml, type BlogPost } from '../lib/search';

  const searchToggle = document.getElementById('search-toggle') as HTMLButtonElement;
  const searchModal = document.getElementById('search-modal') as HTMLDivElement;
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchResultsElement = document.getElementById('search-results') as HTMLDivElement;
  const closeSearch = document.getElementById('close-search') as HTMLButtonElement;
  
  let blogPosts: BlogPost[] = [];
  let isDataLoaded = false;

  // 検索結果を表示
  const showSearchResults = (query: string): void => {
    if (!query.trim()) {
      searchResultsElement.innerHTML = '';
      return;
    }

    if (!isDataLoaded) {
      searchResultsElement.innerHTML = '<div class="p-3 text-white">データを読み込み中...</div>';
      return;
    }

    // 分離したロジックを使用して検索を実行
    const filteredPosts = searchPosts(blogPosts, query);
    
    // 検索結果からHTMLを生成
    searchResultsElement.innerHTML = generateSearchResultsHtml(filteredPosts);
  };

  // モーダルを開く
  const openSearchModal = async (): Promise<void> => {
    searchModal.classList.remove('hidden');
    document.body.classList.add('overflow-hidden');
    searchInput.focus();
    
    if (!isDataLoaded) {
      blogPosts = await fetchBlogPosts();
      isDataLoaded = true;
    }
  };

  // モーダルを閉じる
  const closeSearchModal = (): void => {
    searchModal.classList.add('hidden');
    document.body.classList.remove('overflow-hidden');
    searchInput.value = '';
    searchResultsElement.innerHTML = '';
  };

  // イベントリスナーの設定
  searchToggle.addEventListener('click', openSearchModal);
  closeSearch.addEventListener('click', closeSearchModal);
  searchInput.addEventListener('input', () => showSearchResults(searchInput.value));

  // ESCキーでモーダルを閉じる
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && !searchModal.classList.contains('hidden')) {
      closeSearchModal();
    }
  });

  // モーダル外をクリックしたら閉じる
  searchModal.addEventListener('click', (event) => {
    if (event.target === searchModal) {
      closeSearchModal();
    }
  });
</script>

<style>
  #search-modal {
    backdrop-filter: blur(4px);
  }

  #search-results {
    max-height: 60vh;
  }

  @media (max-width: 640px) {
    #search-results {
      max-height: 40vh;
    }
  }
</style>
