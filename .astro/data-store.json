[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.5.4","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://ryokatsu.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"prism\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{\"allowDangerousHtml\":true,\"passThrough\":[\"html\"]},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",9,10,196,197,222,223,254,255,292,293,322,323,359,360,388,389,441,442,478,479,511,512,539,540,579,580,601,602,637,638,667,668,685,686,717,718,749,750,774,775,820,821,836,837,852,853,881,882,908,909,955,956,984,985,1006,1007,1039,1040,1067,1068,1095,1096,1118,1119,1167,1168,1190,1191,1225,1226,1250,1251,1290,1291,1312,1313,1336,1337,1363,1364,1403,1404,1433,1434,1468,1469,1484,1485,1514,1515,1536,1537,1568,1569,1593,1594,1646,1647,1675,1676,1697,1698,1723,1724,1750,1751,1780,1781,1801,1802,1830,1831,1853,1854,1883,1884,1904,1905,1932,1933,1953,1954,1982,1983,2001,2002,2033,2034,2059,2060,2089,2090,2114,2115,2139,2140,2164,2165,2187,2188,2197,2198,2227,2228,2247,2248,2291,2292,2318,2319,2343,2344,2352,2353,2361,2362,2370,2371,2394,2395,2403,2404,2428,2429,2438,2439,2447,2448,2471,2472,2492,2493,2502,2503,2512,2513,2521,2522,2530,2531,2539,2540,2548,2549,2565,2566,2574,2575,2583,2584,2592,2593,2601,2602,2629,2630,2638,2639,2647,2648,2656,2657,2665,2666,2674,2675,2683,2684,2692,2693,2716,2717,2725,2726,2734,2735,2743,2744,2759,2760,2768,2769,2777,2778,2786,2787,2802,2803,2810,2811,2819,2820,2828,2829,2837,2838,2845,2846,2861,2862,2892,2893,2901,2902],"2019/002",{"id":9,"data":11,"body":14,"filePath":15,"digest":16,"rendered":17,"legacyId":195},{"title":12,"publishDate":13},"GDG DevFest Tokyo 2019","2019-12-14","[GDG DevFest Tokyo](https://tokyo.gdgjapan.org/devfest2019/)に行ってきたのでメモしたことをそのままこのブログに記録として残す。\n\n## Opening\n- カンファレンスの説明\n- スポンサー企業のご紹介\n\n## Keynote1: 世界に広がるGDGコミュニティとDevFest\nSpeaker:鈴木拓生\n\n### Devfestとは？\n- Google主催ではない。GDGグループの方々が主催している\n- 近年では、アフリカで開催増えている\n - いろんな場所でやっている（教会、体育館など）\n\n### なんで広がったの？\n以下の要因がある。\n\n- インターネットの普及\n- エンジニアの開発環境の変化\n- コミュニティの健全さ\n - ガイドラインの策定\n\n## Keynote2: 円周率世界記録への道\nSpeaker:岩尾 エマ はるか\n\n### 円周率と計算機\n- 人類は円周率を計算してきた。\n- 2019年に31兆桁をクラウドで計算して世界記録を達成した。\nhttps://www.junglecity.com/people/hottalk/interview-emma-haruka-iwao/\n\n### 円周率の難しさ\n- 桁数が多いとメモリ要件が高い \n- とにかくメモリが必要。\n\n### 世界最速のコンピュータ（Summit）\n- 世界最速にしても並列化など計算が複雑になりやすい\n- クラウドで初めて計算した記録\n- 121日間PC止めずに計算し続けた。\n- y-cruncherを使用した（Linuxよりwindowsの方がはやいっぽい）\n- 費用は20万ドルかかった。（当時2200万程度）\n  - 今は技術の進歩で300万円ぐらいになっている\n\n### クラウドを使用した理由\n- 数分でクラスタが作成できる\n- 存在するプログラムをそのまま実行できる\n- ハードウェア障害が少ない、メンテンスが少ない\n- スナップショットでバックアップを取得できる\n- リモートでできる\n\n### モニタリング\n- Stackdriverとdatadogを設定してモニタリング\n  - やばかったらアラート飛んでくる。\n\n### 周りの同僚など\n- 色々支えられた結果よかった。\n- Googleすげー 資源を結構無料で使える\n\n### 振り返り\n- ネットワークドライブで31兆桁できると思ってなかった。。\n- 単一のVMを4ヶ月動かせるとは思わなかった。。\n- 固定概念に囚われないで\n\n### エマさんのこれまでの人生を振り返った話など\n\n- 11歳のときからプログラミングやり始めた。\n- お父さんの影響\n- 中学校のときは英語わからなかった。\n  - ソースコードは丸コピで変数名に日本語とか使ってた\n  - 頑張って勉強して今ではアメリカで生活している。\n- 日本では円周率の記録保持者が結構いる\n\n## パネルディスカッション\nエンジニアキャリアパス\n\n- 及川さん実はえーじさんに転職相談してたww\n\nエンジニアキャリアパス多様化\n- 新しい技術に興味を持ち続ける。\n - 慣れていないことに抵抗感を持たない\n - 計画的にキャリアを考える\n - 1万時間勉強\n\n新卒が就職するなら大企業かベンチャーか？\n- 会社の中を知ることが大事\n- 大規模開発しているところ。\n\n\n## Chrome Dev Summit 2019: Recap\nSpeaker:矢倉 眞隆\n\nChrome Dev Summitでどんな発表があったか興味深いものをピックアップして紹介（ご本人は現地には行っていない）\n\n### HTML isn't done!\nhttps://www.youtube.com/watch?v=ZFvPLrKZywA\n\nフォームの見た目を改善しようよという動きがある。\n- virtual scroller\n- トグルスイッチ\n\nマイクロソフトの貢献\n - フォームの見た目をモダンに\n - ハイコントラストモードのサポート\n\n\n### next-generation web styling\nhttps://www.youtube.com/watch?v=-oyeaIirVC0&feature=emb_logo\n\n- scroll snap、dark mode\n- Custom properties api\n- animation worklet, scroll timeline\n\n結構API増えた\n\n### JS+SEO的なセッション\n- how to make you content shine on google search\n - https://www.youtube.com/watch?v=4pOH8Smd0Xs \n- googlebotが最新のchromiumベースになる\n- 前まではChrome41ベースのエンジンだった\n - 中央値で5分ぐらいでindexされるようになった。前までは１週間ぐらいかかっていた。\n\n### リアルワールド志向のパフォーマンス\njsゴリゴリなサイトが増えてパフォーマンスが悪くなったきている。色々な計測方法が研究されているが指標がマシンのスペック\bになりがち。\n\n本当にユーザーが悪いと感じているかを知らないといけない\n\n遅いサイトに行かせない\n- 既に検索結果の順位を下げている\n - 読込中にここ遅いよみたいなUIを出そうとしている。\n\nhttps://gigazine.net/news/20191112-chrome-towards-faster-web/\n\nUXを損ねる指標をパフォーマンス指標にする\n\n- LCP\n  - 画像やテキストが遅い\n- TBT\n  - タップしてから反応まで時間がかかる\n- CLS\n - ページを操作中にガタッとしてしまう。\n  - 画像などの読み込みが遅く、ユーザーが見ている画面などがずれる\n\nこれらはツールを使って問題を知る\n\nspeed tooling evolutins 2019\n\nhttps://www.youtube.com/watch?v=iaWLXf1FgI0\n\nlighthouseとかlighthouseCIとかユーザーからのレポート\n\n### フレームワークを含めてウェブの向上も\nNext.jsチームと協力してパフォーマンス改善\n - チャンク分割の最適化\n - @babel/preset-module\n - デバイスの能力に合わせた出し分けなども開発中\n\n### プラットフォームの機能も活用\nメインスレッド（UIスレッド）の処理をオフロードする\n\nそのほか\nwebPの話、JSON.parseの話\n\n### まとめ\n- 基本的なHTML、CSSなどはやっぱり大事\n- 検索結果からの流入はちゃんとやろう\n- JSゴリゴリの場合はちゃんとプロファイルしよう\n- 速さ体験ユーザーの感覚を大事にしよう\n\n\n## Goの10年の道のりとその変遷\nSpeaker:山口 能迪\n\n## 誕生\n- 2009/10/30にお披露目\n- 2009/11/01にローンチ\n  - 当時から速さを意識していた\n\n### 1960-2007\nALGOL(全ての言語の先祖)\n\n### クリエイション\n\n- 45分ビルドかかる。つらい。\n- 社内でC++の発表会あるから来てね。\n  - 35個の機能追加するよ→そんなにいるの？？\n  - newsqueak→並行処理\n  - 3人が集まってGoができた。ジェネリクスがない\n  - シンプルに作ろうという思想\n  - 当初はプログラミングの歴史を無視した実装になっているんじゃないかみたいな批判があった。\n    - 複雑さをとにかくなくす\n    - No is Temporary, Yes is Forever→Dockerの創始者の言葉\n\n\nGoがそれぞれどんな遍歴を歩んできたのか。\n\n### 2009\n- 最初のはGobuildできなかった。\n  - 6g/8g/5g makefile\n- gofmt\n- gotest\n- godoc\n - 機能は削ぎ落としたが開発者の助けになる周辺ツールはローンチ時にあった\n\n### 2010\n- prof\n- govet\n- goinstall\n- append関数がビルトインで入った\n- The Go Blogが公開される\n\n### 2011\n- gofix\n  - このころは破壊的なへんこうがあった（パッケージや、パス名の変更）これらを解決してくれる\n- goninstall for build\n  - 公式のbuildツール\n\n### 2012\n- go get\n- go tool x\n  - 6g/8g/5gとかでやってたやつがこれになる\n- Go1がリリースされた。\n\n### 2013\n- go1.1→1.2\n  - エンコーディングやパフォーマンスなどを改善。\n    - このあたりからクラウド系でGoが使われるようになった\n\n### 2014\n- go1.3\n  - GCが50-70%　pause timeした\n  - Runtimeが入った。C→Goになった　go gogenerateが出た。\n  - パッケージ管理ツールが出る　クーバネティス\n\n### 2015\n- go1.5\n - コンパイラーがC→goになった。\n\n### 2016-2018\n- HTTP/2\n- パッケージ管理強化など\n- WASMとか\n\n### 2019\n- moduleの機能など\n- GDN(Go Developer Network)\n- go playground\n\n### これから\n- go.dev（go プラットフォーム）\n  - 教育用のサイト\n  - go2への取り組み\n- 言語仕様\n  - module管理の強化（ツールチェイン）、静的解析など\n\n## マイクロサービスの開発とテストファースト/テスト駆動開発\n満席で見れなかった。。。\n\n## How to Distribute Your Web App? 「インストール」可能なウェブアプリ\nSpeaker:宍戸 俊哉\n\n### PWA事例\n- スタバUS→決済もできる\n\n### PWAの特徴\n- 信頼性\n - 高速、オフライン\n- 高速な表示\n- エンゲージメント性\n\n### PWAなんで？PWAの背景\n- ブックマークがあるのに何故？\n - モバイルブラウザだと使わなくね？？\n  - 理由：UX的にどこにあるか分からない\n  - よりリッチな機能\n    - フルスクリーン\n    - web share api\n      ネイティブアプリだとあるけどwebでもやろうよ\n      navigator.shareから取ってくる\n\n### PWAのインストール,使い方\n- ホームから起動\n- タスクスイッチャー\n- シェアできる\n\nサンタトラッカー(PWA)\nhttps://santatracker.google.com/intl/ja/\n\n- web App Manifest\n - メタデータ用のjson\n - 多言語ようだとパスを変えて複数manifestファイルを用意する\n - app shortcuts\n - web share target\n\n### manifestを生成するツール\n- manifest Builder\n- mini infobar\n - いろんな場所にインストールバーを入れることができる\n- PWAのインストール数の集計、分析もできる\n- ネイティブアプリをインストールしていないかしているかの判定もできる。\n - ドメインが同じなのを担保していれば\n\n- spotify PWA\n - 初回利用率54%向上\n - まずはweb→そしてネイティブでも使える\n\n- huluもPWAしている\n\n### TWA\n- PWAをAndroidアプリに簡単に埋め込む\n- デジタルアセットリンク\n- 楽天Pasha TWAしている\n- lamama pack\n  - PWA→TWAに出力するコマンドライン\n\n### web packaging\n- Exchange\n- Signed Exchange\n  - paypayモール\n- web Bundle\n  - Chromecanaryで動かせる\n    - webコンテンツをwbnファイルにしてオフラインで閲覧できる。\n\n## Yearly Web 2019\nSpeaker:Jxck\n\n今年WEB業界で起こったことについて振り返りを行う。\n\n### ダークモード、ハイコントラストモード\nまだ始まったばっかり\nMedia Queries Level5\n- 別に白黒だけじゃない。\n\n### portal\n- 画面を遷移でcssでアレンジ\n- 展開できるiframe\n  - 中身を操作できない\n  - postMessageは可能\n\n### WASM/WASI\n- 元々Cで書かれた資産をwasmでコンパイルしてwebで配信\n- WASI\n  - システムプログラミングしたい。\n  - posixではなくモダンな設計にしよう\n  - Bytecode Alliance\n  - Mozilla、Fastlyなどが参画\n  - WASM　W3cが使っていいいよとなる。勧告\n\n### WebAuthn\nAuthenticatorで認証するAPIがで実例できてきている\n- 二段階認証ができる\n  - yubiketとかtouchIDなど\n- ログインの選択肢が増加\n  - どう実装するのが正解かは難しい\n  - まだユーザーのリテラシーがなさそう。\n\n### ES/JS\n- ES2019の動き\n\n#### private Class Fields\n今パブリックしかない。\n\n### Nullish CoalescingとOptional Chaining\n\nNullish Coalescingは??と書くとnull/undefinedであった場合は上書きができる。\n```\nparam = param || 'default'\nparam = param ?? 'default'\n```\n\nOptional Chainingについては別でブログを書きたい。一応スライドに出てたコードを。\n\n```\na?.b   // a == null ? undefined : a.b\na?.b() // a == null ? undefined : a.b()\na?.[x] // a == null ? undefined : a[x]\n```\n\n\n### Promise.allsettled\n- 全部完了するまで実施\n- 今は途中で失敗したら後続処理に進まない\n- これだと途中で失敗しても後続処理は進む。\n- 地味にうれしみ。\n\n### Promise.any\n- どれかが成功するまで実施\n\n### ITP\n- 合意のないトラッキングは禁止\n- 3rd Party Cookieなどの制限へ\n\n### Project Fugu\n- アプリにあるAPIをwebでもやろうよ\n - Native　File System API\n - Contact Piker API\n - SMS Receiver API\n\n### DNS over HTTPS/TLS\n\n- DNSクエリも暗号化\n- プライバシー保護\n  - 今まで平文\n  - できないことも増える\n- ペアレンタルコントロールとか\n- フィルタリング\n\n### Edge\n来年リリースするね。多分。\n\n### webtransport\n- 主にゲーム業界\n- fetchでもwebSocetでもWebRTCでもないものがほしい\n- Client/ServerでもUDPで使いたい\n- STUDIAで使える\n\n### 終わった系\n- web　Components\n- ちょっと遅れ気味\n- Same SIte Cookie Lax by default\n- TLS1.0/1.1→TLS1.2以降を使うべき\n\n\n## Perspective of Angular in 2020\nSpeaker:稲富 駿(lacoさん)\n\n### updates in2019\n最初からvaluesを掲げている。\nto use\nto build\nCommunity\n\n### v7\n- size Budgets\n  - Bundleサイズのチェック\n  - 細かい設定ができる\n   - 一定のファイルでサイズを制限する\n   - cssのサイズもチェックもできる\n\n- CDK Drag & Drop\n  - ドラッグの機能が簡単にできる\n- CDK Virtual scroll\n  一定のDOMの中で描画するDOMを制限できる\n\n- Bazel\n  - GoogleのあらゆるビルドはBazelでやってる\n  - gulpみたいなやつ\n  - GCP上でAngularをビルドしたい。→ローカルではなく。\n\n### v8\n\n- differential Lodaing\n  - 必要なpolyfillだけしようよ\n  - どうやって判断しているの\n   - babelーpreset-envとかpostcssとかで使っている定義ファイルとかを参照にしている\n\n- Dynamic import() support\n - code spilting\n\n- web worker\n\n- ng-deploy\n- どこかにビルドするためのコマンドnetlifyとか\n\n### 2020\n\n- ivy by default\n  - ビルドはやくする\n  - デバッグ簡単\n  - プラグイン開発者は10まで待って\n\n- CDK clipboard API\n  - Angular用に使いやすいようにしたクリップボード\n\n- CDK TestHarness\n  - ハーネスに抽象化したものを作成してそこからコンポーネントをテストする。\n  - 宣言的に書ける\n\n- 各種コンポーネントの追加\n  - angular用のyoutubeとgoogle-mapのコンポーネントができる\n\n## 今後\n- 今まではエンタープライズにvalueが寄っていたが簡単に作れるようにvalueを向けていく\n- 軽量につかえる。 UIbakeryなどでUI上でプロトタイピングしてAngularのソースにするなど\n- Ionic\n- 国際化\n- コンポーネント単位でlazy-loading\n- static site Generator scully.io\n\nとにかくパフォーマンスをよくしたい。","src/content/blog/2019/002.md","2d229639158a369e",{"html":18,"metadata":19},"\u003Cp>\u003Ca href=\"https://tokyo.gdgjapan.org/devfest2019/\">GDG DevFest Tokyo\u003C/a>に行ってきたのでメモしたことをそのままこのブログに記録として残す。\u003C/p>\n\u003Ch2 id=\"opening\">Opening\u003C/h2>\n\u003Cul>\n\u003Cli>カンファレンスの説明\u003C/li>\n\u003Cli>スポンサー企業のご紹介\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"keynote1-世界に広がるgdgコミュニティとdevfest\">Keynote1: 世界に広がるGDGコミュニティとDevFest\u003C/h2>\n\u003Cp>Speaker:鈴木拓生\u003C/p>\n\u003Ch3 id=\"devfestとは\">Devfestとは？\u003C/h3>\n\u003Cul>\n\u003Cli>Google主催ではない。GDGグループの方々が主催している\u003C/li>\n\u003Cli>近年では、アフリカで開催増えている\u003C/li>\n\u003Cli>いろんな場所でやっている（教会、体育館など）\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"なんで広がったの\">なんで広がったの？\u003C/h3>\n\u003Cp>以下の要因がある。\u003C/p>\n\u003Cul>\n\u003Cli>インターネットの普及\u003C/li>\n\u003Cli>エンジニアの開発環境の変化\u003C/li>\n\u003Cli>コミュニティの健全さ\u003C/li>\n\u003Cli>ガイドラインの策定\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"keynote2-円周率世界記録への道\">Keynote2: 円周率世界記録への道\u003C/h2>\n\u003Cp>Speaker:岩尾 エマ はるか\u003C/p>\n\u003Ch3 id=\"円周率と計算機\">円周率と計算機\u003C/h3>\n\u003Cul>\n\u003Cli>人類は円周率を計算してきた。\u003C/li>\n\u003Cli>2019年に31兆桁をクラウドで計算して世界記録を達成した。\n\u003Ca href=\"https://www.junglecity.com/people/hottalk/interview-emma-haruka-iwao/\">https://www.junglecity.com/people/hottalk/interview-emma-haruka-iwao/\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"円周率の難しさ\">円周率の難しさ\u003C/h3>\n\u003Cul>\n\u003Cli>桁数が多いとメモリ要件が高い\u003C/li>\n\u003Cli>とにかくメモリが必要。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"世界最速のコンピュータsummit\">世界最速のコンピュータ（Summit）\u003C/h3>\n\u003Cul>\n\u003Cli>世界最速にしても並列化など計算が複雑になりやすい\u003C/li>\n\u003Cli>クラウドで初めて計算した記録\u003C/li>\n\u003Cli>121日間PC止めずに計算し続けた。\u003C/li>\n\u003Cli>y-cruncherを使用した（Linuxよりwindowsの方がはやいっぽい）\u003C/li>\n\u003Cli>費用は20万ドルかかった。（当時2200万程度）\n\u003Cul>\n\u003Cli>今は技術の進歩で300万円ぐらいになっている\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"クラウドを使用した理由\">クラウドを使用した理由\u003C/h3>\n\u003Cul>\n\u003Cli>数分でクラスタが作成できる\u003C/li>\n\u003Cli>存在するプログラムをそのまま実行できる\u003C/li>\n\u003Cli>ハードウェア障害が少ない、メンテンスが少ない\u003C/li>\n\u003Cli>スナップショットでバックアップを取得できる\u003C/li>\n\u003Cli>リモートでできる\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"モニタリング\">モニタリング\u003C/h3>\n\u003Cul>\n\u003Cli>Stackdriverとdatadogを設定してモニタリング\n\u003Cul>\n\u003Cli>やばかったらアラート飛んでくる。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"周りの同僚など\">周りの同僚など\u003C/h3>\n\u003Cul>\n\u003Cli>色々支えられた結果よかった。\u003C/li>\n\u003Cli>Googleすげー 資源を結構無料で使える\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"振り返り\">振り返り\u003C/h3>\n\u003Cul>\n\u003Cli>ネットワークドライブで31兆桁できると思ってなかった。。\u003C/li>\n\u003Cli>単一のVMを4ヶ月動かせるとは思わなかった。。\u003C/li>\n\u003Cli>固定概念に囚われないで\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"エマさんのこれまでの人生を振り返った話など\">エマさんのこれまでの人生を振り返った話など\u003C/h3>\n\u003Cul>\n\u003Cli>11歳のときからプログラミングやり始めた。\u003C/li>\n\u003Cli>お父さんの影響\u003C/li>\n\u003Cli>中学校のときは英語わからなかった。\n\u003Cul>\n\u003Cli>ソースコードは丸コピで変数名に日本語とか使ってた\u003C/li>\n\u003Cli>頑張って勉強して今ではアメリカで生活している。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>日本では円周率の記録保持者が結構いる\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"パネルディスカッション\">パネルディスカッション\u003C/h2>\n\u003Cp>エンジニアキャリアパス\u003C/p>\n\u003Cul>\n\u003Cli>及川さん実はえーじさんに転職相談してたww\u003C/li>\n\u003C/ul>\n\u003Cp>エンジニアキャリアパス多様化\u003C/p>\n\u003Cul>\n\u003Cli>新しい技術に興味を持ち続ける。\u003C/li>\n\u003Cli>慣れていないことに抵抗感を持たない\u003C/li>\n\u003Cli>計画的にキャリアを考える\u003C/li>\n\u003Cli>1万時間勉強\u003C/li>\n\u003C/ul>\n\u003Cp>新卒が就職するなら大企業かベンチャーか？\u003C/p>\n\u003Cul>\n\u003Cli>会社の中を知ることが大事\u003C/li>\n\u003Cli>大規模開発しているところ。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"chrome-dev-summit-2019-recap\">Chrome Dev Summit 2019: Recap\u003C/h2>\n\u003Cp>Speaker:矢倉 眞隆\u003C/p>\n\u003Cp>Chrome Dev Summitでどんな発表があったか興味深いものをピックアップして紹介（ご本人は現地には行っていない）\u003C/p>\n\u003Ch3 id=\"html-isnt-done\">HTML isn’t done!\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.youtube.com/watch?v=ZFvPLrKZywA\">https://www.youtube.com/watch?v=ZFvPLrKZywA\u003C/a>\u003C/p>\n\u003Cp>フォームの見た目を改善しようよという動きがある。\u003C/p>\n\u003Cul>\n\u003Cli>virtual scroller\u003C/li>\n\u003Cli>トグルスイッチ\u003C/li>\n\u003C/ul>\n\u003Cp>マイクロソフトの貢献\u003C/p>\n\u003Cul>\n\u003Cli>フォームの見た目をモダンに\u003C/li>\n\u003Cli>ハイコントラストモードのサポート\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"next-generation-web-styling\">next-generation web styling\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.youtube.com/watch?v=-oyeaIirVC0&#x26;feature=emb_logo\">https://www.youtube.com/watch?v=-oyeaIirVC0&#x26;feature=emb_logo\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>scroll snap、dark mode\u003C/li>\n\u003Cli>Custom properties api\u003C/li>\n\u003Cli>animation worklet, scroll timeline\u003C/li>\n\u003C/ul>\n\u003Cp>結構API増えた\u003C/p>\n\u003Ch3 id=\"jsseo的なセッション\">JS+SEO的なセッション\u003C/h3>\n\u003Cul>\n\u003Cli>how to make you content shine on google search\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=4pOH8Smd0Xs\">https://www.youtube.com/watch?v=4pOH8Smd0Xs\u003C/a>\u003C/li>\n\u003Cli>googlebotが最新のchromiumベースになる\u003C/li>\n\u003Cli>前まではChrome41ベースのエンジンだった\u003C/li>\n\u003Cli>中央値で5分ぐらいでindexされるようになった。前までは１週間ぐらいかかっていた。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"リアルワールド志向のパフォーマンス\">リアルワールド志向のパフォーマンス\u003C/h3>\n\u003Cp>jsゴリゴリなサイトが増えてパフォーマンスが悪くなったきている。色々な計測方法が研究されているが指標がマシンのスペック\bになりがち。\u003C/p>\n\u003Cp>本当にユーザーが悪いと感じているかを知らないといけない\u003C/p>\n\u003Cp>遅いサイトに行かせない\u003C/p>\n\u003Cul>\n\u003Cli>既に検索結果の順位を下げている\u003C/li>\n\u003Cli>読込中にここ遅いよみたいなUIを出そうとしている。\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ca href=\"https://gigazine.net/news/20191112-chrome-towards-faster-web/\">https://gigazine.net/news/20191112-chrome-towards-faster-web/\u003C/a>\u003C/p>\n\u003Cp>UXを損ねる指標をパフォーマンス指標にする\u003C/p>\n\u003Cul>\n\u003Cli>LCP\n\u003Cul>\n\u003Cli>画像やテキストが遅い\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>TBT\n\u003Cul>\n\u003Cli>タップしてから反応まで時間がかかる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>CLS\u003C/li>\n\u003Cli>ページを操作中にガタッとしてしまう。\u003C/li>\n\u003Cli>画像などの読み込みが遅く、ユーザーが見ている画面などがずれる\u003C/li>\n\u003C/ul>\n\u003Cp>これらはツールを使って問題を知る\u003C/p>\n\u003Cp>speed tooling evolutins 2019\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.youtube.com/watch?v=iaWLXf1FgI0\">https://www.youtube.com/watch?v=iaWLXf1FgI0\u003C/a>\u003C/p>\n\u003Cp>lighthouseとかlighthouseCIとかユーザーからのレポート\u003C/p>\n\u003Ch3 id=\"フレームワークを含めてウェブの向上も\">フレームワークを含めてウェブの向上も\u003C/h3>\n\u003Cp>Next.jsチームと協力してパフォーマンス改善\u003C/p>\n\u003Cul>\n\u003Cli>チャンク分割の最適化\u003C/li>\n\u003Cli>@babel/preset-module\u003C/li>\n\u003Cli>デバイスの能力に合わせた出し分けなども開発中\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"プラットフォームの機能も活用\">プラットフォームの機能も活用\u003C/h3>\n\u003Cp>メインスレッド（UIスレッド）の処理をオフロードする\u003C/p>\n\u003Cp>そのほか\nwebPの話、JSON.parseの話\u003C/p>\n\u003Ch3 id=\"まとめ\">まとめ\u003C/h3>\n\u003Cul>\n\u003Cli>基本的なHTML、CSSなどはやっぱり大事\u003C/li>\n\u003Cli>検索結果からの流入はちゃんとやろう\u003C/li>\n\u003Cli>JSゴリゴリの場合はちゃんとプロファイルしよう\u003C/li>\n\u003Cli>速さ体験ユーザーの感覚を大事にしよう\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"goの10年の道のりとその変遷\">Goの10年の道のりとその変遷\u003C/h2>\n\u003Cp>Speaker:山口 能迪\u003C/p>\n\u003Ch2 id=\"誕生\">誕生\u003C/h2>\n\u003Cul>\n\u003Cli>2009/10/30にお披露目\u003C/li>\n\u003Cli>2009/11/01にローンチ\n\u003Cul>\n\u003Cli>当時から速さを意識していた\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"1960-2007\">1960-2007\u003C/h3>\n\u003Cp>ALGOL(全ての言語の先祖)\u003C/p>\n\u003Ch3 id=\"クリエイション\">クリエイション\u003C/h3>\n\u003Cul>\n\u003Cli>45分ビルドかかる。つらい。\u003C/li>\n\u003Cli>社内でC++の発表会あるから来てね。\n\u003Cul>\n\u003Cli>35個の機能追加するよ→そんなにいるの？？\u003C/li>\n\u003Cli>newsqueak→並行処理\u003C/li>\n\u003Cli>3人が集まってGoができた。ジェネリクスがない\u003C/li>\n\u003Cli>シンプルに作ろうという思想\u003C/li>\n\u003Cli>当初はプログラミングの歴史を無視した実装になっているんじゃないかみたいな批判があった。\n\u003Cul>\n\u003Cli>複雑さをとにかくなくす\u003C/li>\n\u003Cli>No is Temporary, Yes is Forever→Dockerの創始者の言葉\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>Goがそれぞれどんな遍歴を歩んできたのか。\u003C/p>\n\u003Ch3 id=\"2009\">2009\u003C/h3>\n\u003Cul>\n\u003Cli>最初のはGobuildできなかった。\n\u003Cul>\n\u003Cli>6g/8g/5g makefile\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>gofmt\u003C/li>\n\u003Cli>gotest\u003C/li>\n\u003Cli>godoc\u003C/li>\n\u003Cli>機能は削ぎ落としたが開発者の助けになる周辺ツールはローンチ時にあった\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2010\">2010\u003C/h3>\n\u003Cul>\n\u003Cli>prof\u003C/li>\n\u003Cli>govet\u003C/li>\n\u003Cli>goinstall\u003C/li>\n\u003Cli>append関数がビルトインで入った\u003C/li>\n\u003Cli>The Go Blogが公開される\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2011\">2011\u003C/h3>\n\u003Cul>\n\u003Cli>gofix\n\u003Cul>\n\u003Cli>このころは破壊的なへんこうがあった（パッケージや、パス名の変更）これらを解決してくれる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>goninstall for build\n\u003Cul>\n\u003Cli>公式のbuildツール\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2012\">2012\u003C/h3>\n\u003Cul>\n\u003Cli>go get\u003C/li>\n\u003Cli>go tool x\n\u003Cul>\n\u003Cli>6g/8g/5gとかでやってたやつがこれになる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Go1がリリースされた。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2013\">2013\u003C/h3>\n\u003Cul>\n\u003Cli>go1.1→1.2\n\u003Cul>\n\u003Cli>エンコーディングやパフォーマンスなどを改善。\n\u003Cul>\n\u003Cli>このあたりからクラウド系でGoが使われるようになった\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2014\">2014\u003C/h3>\n\u003Cul>\n\u003Cli>go1.3\n\u003Cul>\n\u003Cli>GCが50-70%　pause timeした\u003C/li>\n\u003Cli>Runtimeが入った。C→Goになった　go gogenerateが出た。\u003C/li>\n\u003Cli>パッケージ管理ツールが出る　クーバネティス\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2015\">2015\u003C/h3>\n\u003Cul>\n\u003Cli>go1.5\u003C/li>\n\u003Cli>コンパイラーがC→goになった。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2016-2018\">2016-2018\u003C/h3>\n\u003Cul>\n\u003Cli>HTTP/2\u003C/li>\n\u003Cli>パッケージ管理強化など\u003C/li>\n\u003Cli>WASMとか\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2019\">2019\u003C/h3>\n\u003Cul>\n\u003Cli>moduleの機能など\u003C/li>\n\u003Cli>GDN(Go Developer Network)\u003C/li>\n\u003Cli>go playground\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"これから\">これから\u003C/h3>\n\u003Cul>\n\u003Cli>go.dev（go プラットフォーム）\n\u003Cul>\n\u003Cli>教育用のサイト\u003C/li>\n\u003Cli>go2への取り組み\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>言語仕様\n\u003Cul>\n\u003Cli>module管理の強化（ツールチェイン）、静的解析など\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"マイクロサービスの開発とテストファーストテスト駆動開発\">マイクロサービスの開発とテストファースト/テスト駆動開発\u003C/h2>\n\u003Cp>満席で見れなかった。。。\u003C/p>\n\u003Ch2 id=\"how-to-distribute-your-web-app-インストール可能なウェブアプリ\">How to Distribute Your Web App? 「インストール」可能なウェブアプリ\u003C/h2>\n\u003Cp>Speaker:宍戸 俊哉\u003C/p>\n\u003Ch3 id=\"pwa事例\">PWA事例\u003C/h3>\n\u003Cul>\n\u003Cli>スタバUS→決済もできる\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"pwaの特徴\">PWAの特徴\u003C/h3>\n\u003Cul>\n\u003Cli>信頼性\u003C/li>\n\u003Cli>高速、オフライン\u003C/li>\n\u003Cli>高速な表示\u003C/li>\n\u003Cli>エンゲージメント性\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"pwaなんでpwaの背景\">PWAなんで？PWAの背景\u003C/h3>\n\u003Cul>\n\u003Cli>ブックマークがあるのに何故？\u003C/li>\n\u003Cli>モバイルブラウザだと使わなくね？？\u003C/li>\n\u003Cli>理由：UX的にどこにあるか分からない\u003C/li>\n\u003Cli>よりリッチな機能\n\u003Cul>\n\u003Cli>フルスクリーン\u003C/li>\n\u003Cli>web share api\nネイティブアプリだとあるけどwebでもやろうよ\nnavigator.shareから取ってくる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"pwaのインストール使い方\">PWAのインストール,使い方\u003C/h3>\n\u003Cul>\n\u003Cli>ホームから起動\u003C/li>\n\u003Cli>タスクスイッチャー\u003C/li>\n\u003Cli>シェアできる\u003C/li>\n\u003C/ul>\n\u003Cp>サンタトラッカー(PWA)\n\u003Ca href=\"https://santatracker.google.com/intl/ja/\">https://santatracker.google.com/intl/ja/\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>web App Manifest\u003C/li>\n\u003Cli>メタデータ用のjson\u003C/li>\n\u003Cli>多言語ようだとパスを変えて複数manifestファイルを用意する\u003C/li>\n\u003Cli>app shortcuts\u003C/li>\n\u003Cli>web share target\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"manifestを生成するツール\">manifestを生成するツール\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>manifest Builder\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>mini infobar\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>いろんな場所にインストールバーを入れることができる\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>PWAのインストール数の集計、分析もできる\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>ネイティブアプリをインストールしていないかしているかの判定もできる。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>ドメインが同じなのを担保していれば\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>spotify PWA\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>初回利用率54%向上\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>まずはweb→そしてネイティブでも使える\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>huluもPWAしている\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"twa\">TWA\u003C/h3>\n\u003Cul>\n\u003Cli>PWAをAndroidアプリに簡単に埋め込む\u003C/li>\n\u003Cli>デジタルアセットリンク\u003C/li>\n\u003Cli>楽天Pasha TWAしている\u003C/li>\n\u003Cli>lamama pack\n\u003Cul>\n\u003Cli>PWA→TWAに出力するコマンドライン\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"web-packaging\">web packaging\u003C/h3>\n\u003Cul>\n\u003Cli>Exchange\u003C/li>\n\u003Cli>Signed Exchange\n\u003Cul>\n\u003Cli>paypayモール\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>web Bundle\n\u003Cul>\n\u003Cli>Chromecanaryで動かせる\n\u003Cul>\n\u003Cli>webコンテンツをwbnファイルにしてオフラインで閲覧できる。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"yearly-web-2019\">Yearly Web 2019\u003C/h2>\n\u003Cp>Speaker:Jxck\u003C/p>\n\u003Cp>今年WEB業界で起こったことについて振り返りを行う。\u003C/p>\n\u003Ch3 id=\"ダークモードハイコントラストモード\">ダークモード、ハイコントラストモード\u003C/h3>\n\u003Cp>まだ始まったばっかり\nMedia Queries Level5\u003C/p>\n\u003Cul>\n\u003Cli>別に白黒だけじゃない。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"portal\">portal\u003C/h3>\n\u003Cul>\n\u003Cli>画面を遷移でcssでアレンジ\u003C/li>\n\u003Cli>展開できるiframe\n\u003Cul>\n\u003Cli>中身を操作できない\u003C/li>\n\u003Cli>postMessageは可能\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"wasmwasi\">WASM/WASI\u003C/h3>\n\u003Cul>\n\u003Cli>元々Cで書かれた資産をwasmでコンパイルしてwebで配信\u003C/li>\n\u003Cli>WASI\n\u003Cul>\n\u003Cli>システムプログラミングしたい。\u003C/li>\n\u003Cli>posixではなくモダンな設計にしよう\u003C/li>\n\u003Cli>Bytecode Alliance\u003C/li>\n\u003Cli>Mozilla、Fastlyなどが参画\u003C/li>\n\u003Cli>WASM　W3cが使っていいいよとなる。勧告\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"webauthn\">WebAuthn\u003C/h3>\n\u003Cp>Authenticatorで認証するAPIがで実例できてきている\u003C/p>\n\u003Cul>\n\u003Cli>二段階認証ができる\n\u003Cul>\n\u003Cli>yubiketとかtouchIDなど\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>ログインの選択肢が増加\n\u003Cul>\n\u003Cli>どう実装するのが正解かは難しい\u003C/li>\n\u003Cli>まだユーザーのリテラシーがなさそう。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"esjs\">ES/JS\u003C/h3>\n\u003Cul>\n\u003Cli>ES2019の動き\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"private-class-fields\">private Class Fields\u003C/h4>\n\u003Cp>今パブリックしかない。\u003C/p>\n\u003Ch3 id=\"nullish-coalescingとoptional-chaining\">Nullish CoalescingとOptional Chaining\u003C/h3>\n\u003Cp>Nullish Coalescingは??と書くとnull/undefinedであった場合は上書きができる。\u003C/p>\n\u003Cpre class=\"language-plaintext\" data-language=\"plaintext\">\u003Ccode is:raw=\"\" class=\"language-plaintext\">param = param || 'default'\nparam = param ?? 'default'\n\u003C/code>\u003C/pre>\n\u003Cp>Optional Chainingについては別でブログを書きたい。一応スライドに出てたコードを。\u003C/p>\n\u003Cpre class=\"language-plaintext\" data-language=\"plaintext\">\u003Ccode is:raw=\"\" class=\"language-plaintext\">a?.b   // a == null ? undefined : a.b\na?.b() // a == null ? undefined : a.b()\na?.[x] // a == null ? undefined : a[x]\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"promiseallsettled\">Promise.allsettled\u003C/h3>\n\u003Cul>\n\u003Cli>全部完了するまで実施\u003C/li>\n\u003Cli>今は途中で失敗したら後続処理に進まない\u003C/li>\n\u003Cli>これだと途中で失敗しても後続処理は進む。\u003C/li>\n\u003Cli>地味にうれしみ。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"promiseany\">Promise.any\u003C/h3>\n\u003Cul>\n\u003Cli>どれかが成功するまで実施\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"itp\">ITP\u003C/h3>\n\u003Cul>\n\u003Cli>合意のないトラッキングは禁止\u003C/li>\n\u003Cli>3rd Party Cookieなどの制限へ\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"project-fugu\">Project Fugu\u003C/h3>\n\u003Cul>\n\u003Cli>アプリにあるAPIをwebでもやろうよ\u003C/li>\n\u003Cli>Native　File System API\u003C/li>\n\u003Cli>Contact Piker API\u003C/li>\n\u003Cli>SMS Receiver API\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"dns-over-httpstls\">DNS over HTTPS/TLS\u003C/h3>\n\u003Cul>\n\u003Cli>DNSクエリも暗号化\u003C/li>\n\u003Cli>プライバシー保護\n\u003Cul>\n\u003Cli>今まで平文\u003C/li>\n\u003Cli>できないことも増える\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>ペアレンタルコントロールとか\u003C/li>\n\u003Cli>フィルタリング\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"edge\">Edge\u003C/h3>\n\u003Cp>来年リリースするね。多分。\u003C/p>\n\u003Ch3 id=\"webtransport\">webtransport\u003C/h3>\n\u003Cul>\n\u003Cli>主にゲーム業界\u003C/li>\n\u003Cli>fetchでもwebSocetでもWebRTCでもないものがほしい\u003C/li>\n\u003Cli>Client/ServerでもUDPで使いたい\u003C/li>\n\u003Cli>STUDIAで使える\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"終わった系\">終わった系\u003C/h3>\n\u003Cul>\n\u003Cli>web　Components\u003C/li>\n\u003Cli>ちょっと遅れ気味\u003C/li>\n\u003Cli>Same SIte Cookie Lax by default\u003C/li>\n\u003Cli>TLS1.0/1.1→TLS1.2以降を使うべき\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"perspective-of-angular-in-2020\">Perspective of Angular in 2020\u003C/h2>\n\u003Cp>Speaker:稲富 駿(lacoさん)\u003C/p>\n\u003Ch3 id=\"updates-in2019\">updates in2019\u003C/h3>\n\u003Cp>最初からvaluesを掲げている。\nto use\nto build\nCommunity\u003C/p>\n\u003Ch3 id=\"v7\">v7\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>size Budgets\u003C/p>\n\u003Cul>\n\u003Cli>Bundleサイズのチェック\u003C/li>\n\u003Cli>細かい設定ができる\u003C/li>\n\u003Cli>一定のファイルでサイズを制限する\u003C/li>\n\u003Cli>cssのサイズもチェックもできる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>CDK Drag &#x26; Drop\u003C/p>\n\u003Cul>\n\u003Cli>ドラッグの機能が簡単にできる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>CDK Virtual scroll\n一定のDOMの中で描画するDOMを制限できる\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Bazel\u003C/p>\n\u003Cul>\n\u003Cli>GoogleのあらゆるビルドはBazelでやってる\u003C/li>\n\u003Cli>gulpみたいなやつ\u003C/li>\n\u003Cli>GCP上でAngularをビルドしたい。→ローカルではなく。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"v8\">v8\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>differential Lodaing\u003C/p>\n\u003Cul>\n\u003Cli>必要なpolyfillだけしようよ\u003C/li>\n\u003Cli>どうやって判断しているの\u003C/li>\n\u003Cli>babelーpreset-envとかpostcssとかで使っている定義ファイルとかを参照にしている\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Dynamic import() support\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>code spilting\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>web worker\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>ng-deploy\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>どこかにビルドするためのコマンドnetlifyとか\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2020\">2020\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>ivy by default\u003C/p>\n\u003Cul>\n\u003Cli>ビルドはやくする\u003C/li>\n\u003Cli>デバッグ簡単\u003C/li>\n\u003Cli>プラグイン開発者は10まで待って\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>CDK clipboard API\u003C/p>\n\u003Cul>\n\u003Cli>Angular用に使いやすいようにしたクリップボード\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>CDK TestHarness\u003C/p>\n\u003Cul>\n\u003Cli>ハーネスに抽象化したものを作成してそこからコンポーネントをテストする。\u003C/li>\n\u003Cli>宣言的に書ける\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>各種コンポーネントの追加\u003C/p>\n\u003Cul>\n\u003Cli>angular用のyoutubeとgoogle-mapのコンポーネントができる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"今後\">今後\u003C/h2>\n\u003Cul>\n\u003Cli>今まではエンタープライズにvalueが寄っていたが簡単に作れるようにvalueを向けていく\u003C/li>\n\u003Cli>軽量につかえる。 UIbakeryなどでUI上でプロトタイピングしてAngularのソースにするなど\u003C/li>\n\u003Cli>Ionic\u003C/li>\n\u003Cli>国際化\u003C/li>\n\u003Cli>コンポーネント単位でlazy-loading\u003C/li>\n\u003Cli>static site Generator scully.io\u003C/li>\n\u003C/ul>\n\u003Cp>とにかくパフォーマンスをよくしたい。\u003C/p>",{"headings":20,"localImagePaths":192,"remoteImagePaths":193,"frontmatter":11,"imagePaths":194},[21,25,28,32,35,38,40,42,45,47,49,51,53,55,57,60,63,66,69,71,73,75,77,80,82,84,86,88,90,92,94,96,98,100,102,104,106,109,112,115,118,121,124,126,129,132,135,138,140,143,146,149,153,156,159,162,165,168,171,174,176,178,181,184,186,188,190],{"depth":22,"slug":23,"text":24},2,"opening","Opening",{"depth":22,"slug":26,"text":27},"keynote1-世界に広がるgdgコミュニティとdevfest","Keynote1: 世界に広がるGDGコミュニティとDevFest",{"depth":29,"slug":30,"text":31},3,"devfestとは","Devfestとは？",{"depth":29,"slug":33,"text":34},"なんで広がったの","なんで広がったの？",{"depth":22,"slug":36,"text":37},"keynote2-円周率世界記録への道","Keynote2: 円周率世界記録への道",{"depth":29,"slug":39,"text":39},"円周率と計算機",{"depth":29,"slug":41,"text":41},"円周率の難しさ",{"depth":29,"slug":43,"text":44},"世界最速のコンピュータsummit","世界最速のコンピュータ（Summit）",{"depth":29,"slug":46,"text":46},"クラウドを使用した理由",{"depth":29,"slug":48,"text":48},"モニタリング",{"depth":29,"slug":50,"text":50},"周りの同僚など",{"depth":29,"slug":52,"text":52},"振り返り",{"depth":29,"slug":54,"text":54},"エマさんのこれまでの人生を振り返った話など",{"depth":22,"slug":56,"text":56},"パネルディスカッション",{"depth":22,"slug":58,"text":59},"chrome-dev-summit-2019-recap","Chrome Dev Summit 2019: Recap",{"depth":29,"slug":61,"text":62},"html-isnt-done","HTML isn’t done!",{"depth":29,"slug":64,"text":65},"next-generation-web-styling","next-generation web styling",{"depth":29,"slug":67,"text":68},"jsseo的なセッション","JS+SEO的なセッション",{"depth":29,"slug":70,"text":70},"リアルワールド志向のパフォーマンス",{"depth":29,"slug":72,"text":72},"フレームワークを含めてウェブの向上も",{"depth":29,"slug":74,"text":74},"プラットフォームの機能も活用",{"depth":29,"slug":76,"text":76},"まとめ",{"depth":22,"slug":78,"text":79},"goの10年の道のりとその変遷","Goの10年の道のりとその変遷",{"depth":22,"slug":81,"text":81},"誕生",{"depth":29,"slug":83,"text":83},"1960-2007",{"depth":29,"slug":85,"text":85},"クリエイション",{"depth":29,"slug":87,"text":87},"2009",{"depth":29,"slug":89,"text":89},"2010",{"depth":29,"slug":91,"text":91},"2011",{"depth":29,"slug":93,"text":93},"2012",{"depth":29,"slug":95,"text":95},"2013",{"depth":29,"slug":97,"text":97},"2014",{"depth":29,"slug":99,"text":99},"2015",{"depth":29,"slug":101,"text":101},"2016-2018",{"depth":29,"slug":103,"text":103},"2019",{"depth":29,"slug":105,"text":105},"これから",{"depth":22,"slug":107,"text":108},"マイクロサービスの開発とテストファーストテスト駆動開発","マイクロサービスの開発とテストファースト/テスト駆動開発",{"depth":22,"slug":110,"text":111},"how-to-distribute-your-web-app-インストール可能なウェブアプリ","How to Distribute Your Web App? 「インストール」可能なウェブアプリ",{"depth":29,"slug":113,"text":114},"pwa事例","PWA事例",{"depth":29,"slug":116,"text":117},"pwaの特徴","PWAの特徴",{"depth":29,"slug":119,"text":120},"pwaなんでpwaの背景","PWAなんで？PWAの背景",{"depth":29,"slug":122,"text":123},"pwaのインストール使い方","PWAのインストール,使い方",{"depth":29,"slug":125,"text":125},"manifestを生成するツール",{"depth":29,"slug":127,"text":128},"twa","TWA",{"depth":29,"slug":130,"text":131},"web-packaging","web packaging",{"depth":22,"slug":133,"text":134},"yearly-web-2019","Yearly Web 2019",{"depth":29,"slug":136,"text":137},"ダークモードハイコントラストモード","ダークモード、ハイコントラストモード",{"depth":29,"slug":139,"text":139},"portal",{"depth":29,"slug":141,"text":142},"wasmwasi","WASM/WASI",{"depth":29,"slug":144,"text":145},"webauthn","WebAuthn",{"depth":29,"slug":147,"text":148},"esjs","ES/JS",{"depth":150,"slug":151,"text":152},4,"private-class-fields","private Class Fields",{"depth":29,"slug":154,"text":155},"nullish-coalescingとoptional-chaining","Nullish CoalescingとOptional Chaining",{"depth":29,"slug":157,"text":158},"promiseallsettled","Promise.allsettled",{"depth":29,"slug":160,"text":161},"promiseany","Promise.any",{"depth":29,"slug":163,"text":164},"itp","ITP",{"depth":29,"slug":166,"text":167},"project-fugu","Project Fugu",{"depth":29,"slug":169,"text":170},"dns-over-httpstls","DNS over HTTPS/TLS",{"depth":29,"slug":172,"text":173},"edge","Edge",{"depth":29,"slug":175,"text":175},"webtransport",{"depth":29,"slug":177,"text":177},"終わった系",{"depth":22,"slug":179,"text":180},"perspective-of-angular-in-2020","Perspective of Angular in 2020",{"depth":29,"slug":182,"text":183},"updates-in2019","updates in2019",{"depth":29,"slug":185,"text":185},"v7",{"depth":29,"slug":187,"text":187},"v8",{"depth":29,"slug":189,"text":189},"2020",{"depth":22,"slug":191,"text":191},"今後",[],[],[],"2019/002.md","2020/0204",{"id":196,"data":198,"body":201,"filePath":202,"digest":203,"rendered":204,"legacyId":221},{"title":199,"publishDate":200},"SNSアイコンを表示してみた","2020-02-04","とりあえずTwitterとはてぶアイコンを作ってみた。\n\n## Twitter\n\n\n\u003Ca href=\"https://github.com/nygardk/react-share#readme\" target=\"_blank\">react-share\u003C/a>をインストールする。\n\n```shell\n yarn add react-share\n```\nreact-shareは以下のソーシャルアカウントを、簡単に表示してくれる。\n\n![SNSアイコン](/images/20200204_sns.png)\n\n今回は、Twitterだけ表示するので以下のようにimportする。\n\nblog-post.tsx\n```jsx\nimport {\n  TwitterShareButton,\n  TwitterIcon\n} from 'react-share';\n\n...\n\n\u003CTwitterShareButton title={post.frontmatter.title} url={url} className=\"mr-2\">\n  \u003CTwitterIcon size={40} round />\n\u003C/TwitterShareButton>\n\n```\n\nTwitterShareButtonのtitleは、h1属性で使われている```post.frontmatter.title```の情報をそのまま使う。\n\n```jsx\nconst post = this.props.data.markdownRemark\nconst siteTitle = this.props.data.site.siteMetadata.title\nconst { previous, next } = this.props.pageContext\n\n```\n値自体はGraphQLの中に入っているぽい。\n\n\n## はてぶアイコン\n\nはてぶアイコンは以下をそのままコピペした。\n\n```jsx\n\u003CHelmet>\n\u003Cscript type=\"text/javascript\" src=\"//b.st-hatena.com/js/bookmark_button.js\" charset=\"utf-8\" async=\"async\" />\n\u003C/Helmet>\n\u003Ca\n  href=\"http://b.hatena.ne.jp/entry/\"\n  className=\"hatena-bookmark-button\"\n  data-hatena-bookmark-layout=\"vertical-normal\"\n  data-hatena-bookmark-lang=\"ja\"\n  title=\"このエントリーをはてなブックマークに追加\"\n  >\n  \u003Cimg\n    src=\"//b.st-hatena.com/images/entry-button/button-only@2x.png\"\n    alt=\"このエントリーをはてなブックマークに追加\"\n    width=\"20\"\n    height=\"20\"\n    style={{border: 'none'}}\n  />\n\u003C/a>\n\n```\n\nまずreact-helmetではてぶのアイコンで使うJSを読み込ませてアイコン部分のHTMLをベタ書きする。\n\n※いずれコンポーネント化して整理したい。。\n\n\nこれだけで後はogp系を管理するseo.tsxを使ってogp対応は完了する。\n\n## 現在のパスを取得する\nGatsbyで現在のURL取得するときはどうやってやるんだろうと思い、以下の記事にであった。\n\n\u003Ca href=\"https://css-tricks.com/how-to-the-get-current-page-url-in-gatsby/\" target=\"_blank\">How to Get the Current Page URL in Gatsby\u003C/a>\n\nこれの対応1の方法で現在のURLを取得できた。\n\n```jsx\nconst url = typeof window !== 'undefined' ? window.location.href : '';\n```\n\n## TODO\n- SNSアイコンの別コンポーネント化\n- facebookアイコン？ （自分がやっていないのでどうしようか。）\n- 全く関係ないがcssをリファクタリングしなきゃ","src/content/blog/2020/0204.md","a444eb7b43bb94e8",{"html":205,"metadata":206},"\u003Cp>とりあえずTwitterとはてぶアイコンを作ってみた。\u003C/p>\n\u003Ch2 id=\"twitter\">Twitter\u003C/h2>\n\u003Cp>\u003Ca href=\"https://github.com/nygardk/react-share#readme\" target=\"_blank\">react-share\u003C/a>をインストールする。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\"> \u003Cspan class=\"token function\">yarn\u003C/span> \u003Cspan class=\"token function\">add\u003C/span> react-share\n\u003C/code>\u003C/pre>\n\u003Cp>react-shareは以下のソーシャルアカウントを、簡単に表示してくれる。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20200204_sns.png\" alt=\"SNSアイコン\">\u003C/p>\n\u003Cp>今回は、Twitterだけ表示するので以下のようにimportする。\u003C/p>\n\u003Cp>blog-post.tsx\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  TwitterShareButton\u003Cspan class=\"token punctuation\">,\u003C/span>\n  TwitterIcon\n\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'react-share'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token operator\">...\u003C/span>\n\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">TwitterShareButton\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">title\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>post\u003Cspan class=\"token punctuation\">.\u003C/span>frontmatter\u003Cspan class=\"token punctuation\">.\u003C/span>title\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">url\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>url\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">className\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>mr-2\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n  \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">TwitterIcon\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">size\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">round\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>\u003Cspan class=\"token class-name\">TwitterShareButton\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>TwitterShareButtonのtitleは、h1属性で使われている\u003Ccode>post.frontmatter.title\u003C/code>の情報をそのまま使う。\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\">\u003Cspan class=\"token keyword\">const\u003C/span> post \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>props\u003Cspan class=\"token punctuation\">.\u003C/span>data\u003Cspan class=\"token punctuation\">.\u003C/span>markdownRemark\n\u003Cspan class=\"token keyword\">const\u003C/span> siteTitle \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>props\u003Cspan class=\"token punctuation\">.\u003C/span>data\u003Cspan class=\"token punctuation\">.\u003C/span>site\u003Cspan class=\"token punctuation\">.\u003C/span>siteMetadata\u003Cspan class=\"token punctuation\">.\u003C/span>title\n\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> previous\u003Cspan class=\"token punctuation\">,\u003C/span> next \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>props\u003Cspan class=\"token punctuation\">.\u003C/span>pageContext\n\n\u003C/code>\u003C/pre>\n\u003Cp>値自体はGraphQLの中に入っているぽい。\u003C/p>\n\u003Ch2 id=\"はてぶアイコン\">はてぶアイコン\u003C/h2>\n\u003Cp>はてぶアイコンは以下をそのままコピペした。\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Helmet\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>script\u003C/span> \u003Cspan class=\"token attr-name\">type\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>text/javascript\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">src\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>//b.st-hatena.com/js/bookmark_button.js\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">charset\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>utf-8\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">async\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>async\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>\u003Cspan class=\"token class-name\">Helmet\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>a\u003C/span>\n  \u003Cspan class=\"token attr-name\">href\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>http://b.hatena.ne.jp/entry/\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n  \u003Cspan class=\"token attr-name\">className\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>hatena-bookmark-button\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n  \u003Cspan class=\"token attr-name\">data-hatena-bookmark-layout\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>vertical-normal\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n  \u003Cspan class=\"token attr-name\">data-hatena-bookmark-lang\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>ja\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n  \u003Cspan class=\"token attr-name\">title\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>このエントリーをはてなブックマークに追加\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n  \u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n  \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>img\u003C/span>\n    \u003Cspan class=\"token attr-name\">src\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>//b.st-hatena.com/images/entry-button/button-only@2x.png\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n    \u003Cspan class=\"token attr-name\">alt\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>このエントリーをはてなブックマークに追加\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n    \u003Cspan class=\"token attr-name\">width\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>20\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n    \u003Cspan class=\"token attr-name\">height\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>20\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\n    \u003Cspan class=\"token attr-name\">style\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">border\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'none'\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span>\n  \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>a\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>まずreact-helmetではてぶのアイコンで使うJSを読み込ませてアイコン部分のHTMLをベタ書きする。\u003C/p>\n\u003Cp>※いずれコンポーネント化して整理したい。。\u003C/p>\n\u003Cp>これだけで後はogp系を管理するseo.tsxを使ってogp対応は完了する。\u003C/p>\n\u003Ch2 id=\"現在のパスを取得する\">現在のパスを取得する\u003C/h2>\n\u003Cp>Gatsbyで現在のURL取得するときはどうやってやるんだろうと思い、以下の記事にであった。\u003C/p>\n\u003Cp>\u003Ca href=\"https://css-tricks.com/how-to-the-get-current-page-url-in-gatsby/\" target=\"_blank\">How to Get the Current Page URL in Gatsby\u003C/a>\u003C/p>\n\u003Cp>これの対応1の方法で現在のURLを取得できた。\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\">\u003Cspan class=\"token keyword\">const\u003C/span> url \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">typeof\u003C/span> window \u003Cspan class=\"token operator\">!==\u003C/span> \u003Cspan class=\"token string\">'undefined'\u003C/span> \u003Cspan class=\"token operator\">?\u003C/span> window\u003Cspan class=\"token punctuation\">.\u003C/span>location\u003Cspan class=\"token punctuation\">.\u003C/span>href \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">''\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"todo\">TODO\u003C/h2>\n\u003Cul>\n\u003Cli>SNSアイコンの別コンポーネント化\u003C/li>\n\u003Cli>facebookアイコン？ （自分がやっていないのでどうしようか。）\u003C/li>\n\u003Cli>全く関係ないがcssをリファクタリングしなきゃ\u003C/li>\n\u003C/ul>",{"headings":207,"localImagePaths":218,"remoteImagePaths":219,"frontmatter":198,"imagePaths":220},[208,211,213,215],{"depth":22,"slug":209,"text":210},"twitter","Twitter",{"depth":22,"slug":212,"text":212},"はてぶアイコン",{"depth":22,"slug":214,"text":214},"現在のパスを取得する",{"depth":22,"slug":216,"text":217},"todo","TODO",[],[],[],"2020/0204.md","2020/001",{"id":222,"data":224,"body":227,"filePath":228,"digest":229,"rendered":230,"legacyId":253},{"title":225,"publishDate":226},"webpack3から4にアップデートしてみた","2020-01-04","年末に業務でwebpack3で動いてたものを4系にアップデートしたので時代遅れな話題かもだけどやったことを書いてみる。\n\n### 何故アップデートしたの？\n\nStorybookやJestなどを導入してみようと思ったときに、今の資産だと4系ではないからキツかったのが原因だ。あと、ローカル環境でのビルドも平均5秒程度掛かっており少し減らせないかなと考えやってみた。\n\n\u003Ca href=\"https://github.com/webpack/webpack/projects/5\" target=\"_blank\">webpack5\u003C/a>の動向も気になる時期なのに何をやっているんだろう感もあるが。。\n\n### 構成\n\nCLIではないVue.jsを使用している。webpack自体はbaseのwebpackの他にSTG環境用、Prod環境用（本番）と存在している。\n\n```shell\n├── build/\n│ ├── build.js # 本番環境で動かす\n│ ├── check-versions.js # バージョンをチェックする\n│ ├── staging.js # 結合環境で動かす\n│ ├── vue-loader.conf.js # ヘッダーの通知のタイマー処理\n│ ├── utils.js # cssのローディング周りの設定など\n│ ├── webpack.base.conf.js # どの環境でもベースとなるwebpack\n│ ├── webpack.dev.conf.js # npm scriptで最初に呼ばれるwebpack\n│ ├── webpack.stg.conf.js # 結合環境でのwebpack\n│ ├── webpack.prod.conf.js # 本番環境でのwebpack\n```\n\nSTG環境と本番環境の違いはenvの部分が違うだけで後はほぼ一緒。\n\n### 進め方\n\n基本的には\n\n- webpackを4にバージョンアップする\n\n- babelのバージョンアップをする\n\n- その時出たエラーを解消していく\n\nという手順になる。\n\n先人の知恵があるので基本的には問題なく進められると思う。\n\nお世話になった参照記事\n\n\u003Ca href=\"https://blog.hiroppy.me/entry/2017/12/25/100004\" target=\"_blank\">次のリリースであるwebpack4の主な変更点まとめ\u003C/a>\n\n\u003Ca href=\"https://uuka.hatenablog.com/entry/2018/09/30/015713\" target=\"_blank\">vue init webpackで作成したプロジェクトをwebpack4に移行する\u003C/a>\n\n基本この2つでエラーに対しては、Stack Overflowで検索すれば基本出てくる。\n\n1. webpack4からcliと機能が分離されているのでインストール\n\n```shell\nnpm install webpack-cli --save-dev\n\n```\n\n2. package.jsonのwebpackのバージョンを変更してupdate\n\n```shell\n\"webpack\": \"^4.26.0\"\n\n```\n\nこの時vue-routerなどもupdateする。\n\n3. modeオプションを追加する。\n\nwebpack4からmodeオプションが追加されている。これで今までNODE_ENVで設定していたものが使わなくなる。また開発時はdevelopment、公開時はproductionにしてnpm scriptの記述も変える\n\nnpm script\n\n```json\n\"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n\"build\": \"node build/build.js webpack --mode=production\",\n\n```\n\nwebpack.prod.conf.js\n\n```javascript\nmode: 'production',\n\n```\n\n4. mini-css-extract-pluginの追加\n\nwebpack3まで使っていた\u003Ca href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\">extract-text-webpack-plugin\u003C/a>は非推奨なため\u003Ca href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\">mini-css-extract-plugin\u003C/a>をインストールして記述を変更する。\n\nbuild/webpack.prod.conf.js\n\n```javascript\nnew MiniCssExtractPlugin({\n  filename: utils.assetsPath('css/[name].[contenthash].css'),\n  allChunks: true,\n  ignoreOrder: true\n}),\n\n```\n\nbuild/utils.js\n\n```javascript\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nif (options.extract) {\n  return ['vue-style-loader', MiniCssExtractPlugin.loader].concat(loaders)\n} else {\n  return ['vue-style-loader'].concat(loaders)\n}\n\n```\n\n5. optimization系の設定\nmode指定している場合はminifyされるが、UglifyJsPluginを使用している場合はoptimization.minimizerの中に処理を移す必要がある。OptimizeCSSPluginも処理を移動する。\n\nCommonsChunkPluginはv4だと削除となりSplitChunksPluginになっている\n\nさらに、optimization.runtimeChunkを記述してmanifest.jsとして出力するように設定する。\n\n```javascript\noptimization: {\n    runtimeChunk: {\n      name: 'manifest'\n    },\n    minimizer: [\n      new UglifyJsPlugin({\n        uglifyOptions: {\n          compress: {\n            warnings: false\n          }\n        },\n        sourceMap: config.build.productionSourceMap,\n        parallel: true\n      }),\n      new OptimizeCSSPlugin({\n        cssProcessorOptions: config.build.productionSourceMap\n          ? { safe: true, map: { inline: false } }\n          : { safe: true }\n      })\n    ],\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          test: /[\\\\/]node_modules[\\\\/]/,\n          name: \"vendor\",\n          chunks: \"all\"\n        }\n      }\n    }\n  }\n```\n\n6. VueLoaderPluginの追加\nbuild/webpack.base.conf.jsに以下を追加する。\n\n```javascript\nconst VueLoaderPlugin = require('vue-loader/lib/plugin')\nplugins: [\n  new VueLoaderPlugin()\n],\n```\n\n### babelのバージョンアップ\n\nbabel6だったので7にアップデートしていく。参照記事は以下\nhttps://babeljs.io/docs/en/v7-migration\n\n上記を読んで何となく全体感を把握したがbabel7から懐疑的な変更が入っているため色々修正していく。\n\n1. 以下が必要だったのでインストールしていく。\n\n```shell\nnpm install --save-dev @babel/core @babel/preset-env babel-loader\n```\n\n2. webpackの記述を以下に修正する。\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /node_modules/,\n  use: [\n    {\n      loader: 'babel-loader',\n    }\n  ]\n},\n```\n\n3. .babelrcからbabel.config.jsに変更\nbabel.config.jsで以下を記述していく。.babelrcは削除する。\n\n```javascript\nmodule.exports = function (api) {\n  api.cache(true);\n\n  const presets = [\n    [\"@babel/preset-env\", {\n      corejs: 3,\n      modules: false,\n      useBuiltIns: \"usage\"\n    }]\n  ];\n\n  return {\n    presets,\n  };\n}\n\n```\n\n4. エントリーポイントのmain.jsにbabelをimportする。\n\n```javascript\nimport 'core-js/stable'\nimport 'regenerator-runtime/runtime'\n```\n\n### IE11対応\nこれだけだと、IE11環境でエラーとなってしまい、表示できなかったのでbabel.config.jsのuseBuiltInsをentryに変更、targetsにie11を指定。\n\n※entryを指定すると、全polyfillをimportしてしまうのでファイルサイズが肥大化してしまう。\u003Ca href=\"https://polyfill.io/\" target=\"_blank\">polyfill.io\u003C/a>などに移行も検討する必要がある。\n\n```javascript\nmodule.exports = function (api) {\n  api.cache(true);\n\n  const presets = [\n    [\"@babel/preset-env\", {\n      corejs: 3,\n      modules: false,\n      useBuiltIns: \"entry\",\n      targets: {\n        ie: 11\n      }\n    }]\n  ];\n\n  return {\n    presets,\n  };\n}\n```\n\nこれで完了だと思いきや今回のpackageの中のnode_modules内に```.vue```ファイルがあり、その中の処理でアロー関数が使用されていたためIE11環境でSCRIPTエラーとなっていた。対象のpackageは```vue-quill-editor```\n\n```javascript\nimport {quillEditor as QuillEditor} from 'vue-quill-editor'\n```\n\n上記のimport先をnode_modules内のdist内にあるコンパイル済みのファイルに指定してあげることで解決。cssについてはコンパイルされていないので別でimportする必要があった。\n\n```javascript\nimport { quillEditor as QuillEditor } from 'vue-quill-editor/dist/vue-quill-editor'\n\nimport 'quill/dist/quill.core.css'\nimport 'quill/dist/quill.snow.css'\nimport 'quill/dist/quill.bubble.css'\n\n```\n\n### vue-routerのバージョンアップで起きたエラー\n3.1.1にアップデートしたところ以下のissueのエラーに出くわした。\n\nhttps://github.com/vuejs/vue-router/issues/2872\n\nrouter.pushする箇所で以前まではコールバックがない状態だとグローバルなrouterにエラーを送信していたが、3.1.1から個別のrouterにエラーが送られるようになったっぽい。実際にコンソールエラーが表示されていた。\n\nこれを解消するには、issueの通り以下を追加していく。\n\n```javascript\n.catch(err => {})\n```\n\nこれで解決した。検索とかするUIで何度も同じrouter.pushする箇所があると発生する。\n\n### 感想\nIE11対応すると途端につらくなる。ファイルサイズも大きくなるし。残対応としては次は、ファイルサイズを減らしていくチューニングする作業をしていく。","src/content/blog/2020/001.md","82b7f89cfb517fb9",{"html":231,"metadata":232},"\u003Cp>年末に業務でwebpack3で動いてたものを4系にアップデートしたので時代遅れな話題かもだけどやったことを書いてみる。\u003C/p>\n\u003Ch3 id=\"何故アップデートしたの\">何故アップデートしたの？\u003C/h3>\n\u003Cp>StorybookやJestなどを導入してみようと思ったときに、今の資産だと4系ではないからキツかったのが原因だ。あと、ローカル環境でのビルドも平均5秒程度掛かっており少し減らせないかなと考えやってみた。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/webpack/webpack/projects/5\" target=\"_blank\">webpack5\u003C/a>の動向も気になる時期なのに何をやっているんだろう感もあるが。。\u003C/p>\n\u003Ch3 id=\"構成\">構成\u003C/h3>\n\u003Cp>CLIではないVue.jsを使用している。webpack自体はbaseのwebpackの他にSTG環境用、Prod環境用（本番）と存在している。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">├── build/\n│ ├── build.js \u003Cspan class=\"token comment\"># 本番環境で動かす\u003C/span>\n│ ├── check-versions.js \u003Cspan class=\"token comment\"># バージョンをチェックする\u003C/span>\n│ ├── staging.js \u003Cspan class=\"token comment\"># 結合環境で動かす\u003C/span>\n│ ├── vue-loader.conf.js \u003Cspan class=\"token comment\"># ヘッダーの通知のタイマー処理\u003C/span>\n│ ├── utils.js \u003Cspan class=\"token comment\"># cssのローディング周りの設定など\u003C/span>\n│ ├── webpack.base.conf.js \u003Cspan class=\"token comment\"># どの環境でもベースとなるwebpack\u003C/span>\n│ ├── webpack.dev.conf.js \u003Cspan class=\"token comment\"># npm scriptで最初に呼ばれるwebpack\u003C/span>\n│ ├── webpack.stg.conf.js \u003Cspan class=\"token comment\"># 結合環境でのwebpack\u003C/span>\n│ ├── webpack.prod.conf.js \u003Cspan class=\"token comment\"># 本番環境でのwebpack\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>STG環境と本番環境の違いはenvの部分が違うだけで後はほぼ一緒。\u003C/p>\n\u003Ch3 id=\"進め方\">進め方\u003C/h3>\n\u003Cp>基本的には\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>webpackを4にバージョンアップする\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>babelのバージョンアップをする\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>その時出たエラーを解消していく\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>という手順になる。\u003C/p>\n\u003Cp>先人の知恵があるので基本的には問題なく進められると思う。\u003C/p>\n\u003Cp>お世話になった参照記事\u003C/p>\n\u003Cp>\u003Ca href=\"https://blog.hiroppy.me/entry/2017/12/25/100004\" target=\"_blank\">次のリリースであるwebpack4の主な変更点まとめ\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://uuka.hatenablog.com/entry/2018/09/30/015713\" target=\"_blank\">vue init webpackで作成したプロジェクトをwebpack4に移行する\u003C/a>\u003C/p>\n\u003Cp>基本この2つでエラーに対しては、Stack Overflowで検索すれば基本出てくる。\u003C/p>\n\u003Col>\n\u003Cli>webpack4からcliと機能が分離されているのでインストール\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">\u003Cspan class=\"token function\">npm\u003C/span> \u003Cspan class=\"token function\">install\u003C/span> webpack-cli --save-dev\n\n\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>package.jsonのwebpackのバージョンを変更してupdate\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">\u003Cspan class=\"token string\">\"webpack\"\u003C/span>\u003Cspan class=\"token builtin class-name\">:\u003C/span> \u003Cspan class=\"token string\">\"^4.26.0\"\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>この時vue-routerなどもupdateする。\u003C/p>\n\u003Col start=\"3\">\n\u003Cli>modeオプションを追加する。\u003C/li>\n\u003C/ol>\n\u003Cp>webpack4からmodeオプションが追加されている。これで今までNODE_ENVで設定していたものが使わなくなる。また開発時はdevelopment、公開時はproductionにしてnpm scriptの記述も変える\u003C/p>\n\u003Cp>npm script\u003C/p>\n\u003Cpre class=\"language-json\" data-language=\"json\">\u003Ccode is:raw=\"\" class=\"language-json\">\u003Cspan class=\"token property\">\"dev\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token property\">\"build\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"node build/build.js webpack --mode=production\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>webpack.prod.conf.js\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token literal-property property\">mode\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'production'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Col start=\"4\">\n\u003Cli>mini-css-extract-pluginの追加\u003C/li>\n\u003C/ol>\n\u003Cp>webpack3まで使っていた\u003Ca href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\" target=\"_blank\">extract-text-webpack-plugin\u003C/a>は非推奨なため\u003Ca href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\" target=\"_blank\">mini-css-extract-plugin\u003C/a>をインストールして記述を変更する。\u003C/p>\n\u003Cp>build/webpack.prod.conf.js\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">MiniCssExtractPlugin\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token literal-property property\">filename\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> utils\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">assetsPath\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'css/[name].[contenthash].css'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token literal-property property\">allChunks\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token literal-property property\">ignoreOrder\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>build/utils.js\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">const\u003C/span> MiniCssExtractPlugin \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">require\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'mini-css-extract-plugin'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>options\u003Cspan class=\"token punctuation\">.\u003C/span>extract\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'vue-style-loader'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> MiniCssExtractPlugin\u003Cspan class=\"token punctuation\">.\u003C/span>loader\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">concat\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>loaders\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">else\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'vue-style-loader'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">concat\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>loaders\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Col start=\"5\">\n\u003Cli>optimization系の設定\nmode指定している場合はminifyされるが、UglifyJsPluginを使用している場合はoptimization.minimizerの中に処理を移す必要がある。OptimizeCSSPluginも処理を移動する。\u003C/li>\n\u003C/ol>\n\u003Cp>CommonsChunkPluginはv4だと削除となりSplitChunksPluginになっている\u003C/p>\n\u003Cp>さらに、optimization.runtimeChunkを記述してmanifest.jsとして出力するように設定する。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token literal-property property\">optimization\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">runtimeChunk\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">name\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'manifest'\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token literal-property property\">minimizer\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n      \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">UglifyJsPlugin\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token literal-property property\">uglifyOptions\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n          \u003Cspan class=\"token literal-property property\">compress\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n            \u003Cspan class=\"token literal-property property\">warnings\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\n          \u003Cspan class=\"token punctuation\">}\u003C/span>\n        \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n        \u003Cspan class=\"token literal-property property\">sourceMap\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> config\u003Cspan class=\"token punctuation\">.\u003C/span>build\u003Cspan class=\"token punctuation\">.\u003C/span>productionSourceMap\u003Cspan class=\"token punctuation\">,\u003C/span>\n        \u003Cspan class=\"token literal-property property\">parallel\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">OptimizeCSSPlugin\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token literal-property property\">cssProcessorOptions\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> config\u003Cspan class=\"token punctuation\">.\u003C/span>build\u003Cspan class=\"token punctuation\">.\u003C/span>productionSourceMap\n          \u003Cspan class=\"token operator\">?\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">safe\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">map\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">inline\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n          \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">safe\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token literal-property property\">splitChunks\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">cacheGroups\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token literal-property property\">vendor\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n          \u003Cspan class=\"token literal-property property\">test\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token regex\">\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]\u003C/span>\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n          \u003Cspan class=\"token literal-property property\">name\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"vendor\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n          \u003Cspan class=\"token literal-property property\">chunks\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"all\"\u003C/span>\n        \u003Cspan class=\"token punctuation\">}\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Col start=\"6\">\n\u003Cli>VueLoaderPluginの追加\nbuild/webpack.base.conf.jsに以下を追加する。\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">const\u003C/span> VueLoaderPlugin \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">require\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'vue-loader/lib/plugin'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token literal-property property\">plugins\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n  \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">VueLoaderPlugin\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"babelのバージョンアップ\">babelのバージョンアップ\u003C/h3>\n\u003Cp>babel6だったので7にアップデートしていく。参照記事は以下\n\u003Ca href=\"https://babeljs.io/docs/en/v7-migration\">https://babeljs.io/docs/en/v7-migration\u003C/a>\u003C/p>\n\u003Cp>上記を読んで何となく全体感を把握したがbabel7から懐疑的な変更が入っているため色々修正していく。\u003C/p>\n\u003Col>\n\u003Cli>以下が必要だったのでインストールしていく。\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">\u003Cspan class=\"token function\">npm\u003C/span> \u003Cspan class=\"token function\">install\u003C/span> --save-dev @babel/core @babel/preset-env babel-loader\n\u003C/code>\u003C/pre>\n\u003Col start=\"2\">\n\u003Cli>webpackの記述を以下に修正する。\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token literal-property property\">test\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token regex\">\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-source language-regex\">\\.js$\u003C/span>\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token literal-property property\">exclude\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token regex\">\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-source language-regex\">node_modules\u003C/span>\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token literal-property property\">use\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">loader\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'babel-loader'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">]\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Col start=\"3\">\n\u003Cli>.babelrcからbabel.config.jsに変更\nbabel.config.jsで以下を記述していく。.babelrcは削除する。\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">module\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function-variable function\">exports\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">api\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  api\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">cache\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">const\u003C/span> presets \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n    \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"@babel/preset-env\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">corejs\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">modules\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">useBuiltIns\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"usage\"\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n  \u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    presets\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Col start=\"4\">\n\u003Cli>エントリーポイントのmain.jsにbabelをimportする。\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">'core-js/stable'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">'regenerator-runtime/runtime'\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"ie11対応\">IE11対応\u003C/h3>\n\u003Cp>これだけだと、IE11環境でエラーとなってしまい、表示できなかったのでbabel.config.jsのuseBuiltInsをentryに変更、targetsにie11を指定。\u003C/p>\n\u003Cp>※entryを指定すると、全polyfillをimportしてしまうのでファイルサイズが肥大化してしまう。\u003Ca href=\"https://polyfill.io/\" target=\"_blank\">polyfill.io\u003C/a>などに移行も検討する必要がある。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">module\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function-variable function\">exports\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">api\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  api\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">cache\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">const\u003C/span> presets \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n    \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"@babel/preset-env\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">corejs\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">modules\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">useBuiltIns\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"entry\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">targets\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token literal-property property\">ie\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">11\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n  \u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    presets\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>これで完了だと思いきや今回のpackageの中のnode_modules内に\u003Ccode>.vue\u003C/code>ファイルがあり、その中の処理でアロー関数が使用されていたためIE11環境でSCRIPTエラーとなっていた。対象のpackageは\u003Ccode>vue-quill-editor\u003C/code>\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>quillEditor \u003Cspan class=\"token keyword\">as\u003C/span> QuillEditor\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'vue-quill-editor'\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>上記のimport先をnode_modules内のdist内にあるコンパイル済みのファイルに指定してあげることで解決。cssについてはコンパイルされていないので別でimportする必要があった。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> quillEditor \u003Cspan class=\"token keyword\">as\u003C/span> QuillEditor \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'vue-quill-editor/dist/vue-quill-editor'\u003C/span>\n\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">'quill/dist/quill.core.css'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">'quill/dist/quill.snow.css'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">'quill/dist/quill.bubble.css'\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"vue-routerのバージョンアップで起きたエラー\">vue-routerのバージョンアップで起きたエラー\u003C/h3>\n\u003Cp>3.1.1にアップデートしたところ以下のissueのエラーに出くわした。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/vuejs/vue-router/issues/2872\">https://github.com/vuejs/vue-router/issues/2872\u003C/a>\u003C/p>\n\u003Cp>router.pushする箇所で以前まではコールバックがない状態だとグローバルなrouterにエラーを送信していたが、3.1.1から個別のrouterにエラーが送られるようになったっぽい。実際にコンソールエラーが表示されていた。\u003C/p>\n\u003Cp>これを解消するには、issueの通り以下を追加していく。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">catch\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">err\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>これで解決した。検索とかするUIで何度も同じrouter.pushする箇所があると発生する。\u003C/p>\n\u003Ch3 id=\"感想\">感想\u003C/h3>\n\u003Cp>IE11対応すると途端につらくなる。ファイルサイズも大きくなるし。残対応としては次は、ファイルサイズを減らしていくチューニングする作業をしていく。\u003C/p>",{"headings":233,"localImagePaths":250,"remoteImagePaths":251,"frontmatter":224,"imagePaths":252},[234,237,239,241,243,246,248],{"depth":29,"slug":235,"text":236},"何故アップデートしたの","何故アップデートしたの？",{"depth":29,"slug":238,"text":238},"構成",{"depth":29,"slug":240,"text":240},"進め方",{"depth":29,"slug":242,"text":242},"babelのバージョンアップ",{"depth":29,"slug":244,"text":245},"ie11対応","IE11対応",{"depth":29,"slug":247,"text":247},"vue-routerのバージョンアップで起きたエラー",{"depth":29,"slug":249,"text":249},"感想",[],[],[],"2020/001.md","2020/0206",{"id":254,"data":256,"body":259,"filePath":260,"digest":261,"rendered":262,"legacyId":291},{"title":257,"publishDate":258},"Vue3.xのCompositionAPIとTypeScriptの書き方","2020-02-06","そろそろVue3.xが出るかもなので、目玉機能のCompositionAPIを試してみてまとめてみる。\n\n## TypeScript\nVue3.xxでは、TypeScript対応！！\n\nやったー🎉🎉🎉🎉\n\n\n## composition api is 何？\n\n\u003Ca href=\"https://github.com/vuejs/composition-api\" target=\"_blank\">composition api\u003C/a>\n\nドキュメントは以下\nhttps://vue-composition-api-rfc.netlify.com/\n\n今までのVue2だと\n\n- 肥大化していくと可読性が悪い\n- コンポーネントのロジックの再利用性がつらみ\n- TypeScript書きづらい。\n- テスト書きにくい\n\nみたいなことがあった。\n\nこれをReact hooksをヒントに新たにAPIを作成したものがcomposition api。\n\nTypeScript対応だと現状**vue-property-decorator**でデコレータ使うか、```vue.extend```の2択しかないが、これだとアノテーション(型推論)の恩恵を受けづらいという問題もあった。\n\n\n## vue.extendを使う場合\n\n\u003Ca href=\"https://jp.vuejs.org/v2/guide/typescript.html#%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%AE%E5%9E%8B%E3%81%AB%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B\" target=\"_blank\">TypeScript のサポート\u003C/a>の通りだが、importを```Vue```から行いExtendVueオブジェクトを返すメソッドをexportすれば使用可能。（もちろんlang=\"ts\"もする。）\n\n基本的に```components```以外のライフサイクルフックに型を定義していく。\n\n```javascript\n\n// JavaScript\ndata() {\n  retrun {\n    text: 'text',\n    price: 120\n  }\n}\n\n// TypeScript \n// 最初に型を作る\nexport type DataItem = {\n    text: String\n    price: Number\n}\n\ndata(): DataItem {\n  retrun {\n    text: 'text',\n    price: 120\n  }\n}\n\n```\n\nmethods,computedなどはそれぞれの関数に型をつけていく\n※公式ドキュメント通り\n\n```javascript\nmethods: {\n  greet (): string {\n    return this.msg + ' world'\n  }\n},\ncomputed: {\n  greeting(): string {\n    return this.greet() + '!'\n  }\n}\n```\n\n導入のハードルがもっとも低いが細かい所まで型推論できなそう。\n\n## デコレータを使うやり方\n\nJavaScriptのclassを用いたクラスベースの書き方。\n\nvue-property-decoratorで必要なものをimportする。\n\n使わない場合も一応書けるが、propsなどがちょっと見にくい感じになるので導入している所が多い。\n\n```javascript\nimport Vue from 'vue'\nimport {型指定したいもの　Component, Vueなど} from 'vue-property-decorator'\n```\n\ncomponentsは、```@Component({})```で囲う。\n```javascript\n@Component({\n  AddButton\n})\n```\ncomponentsがない場合は@Componentと書けばOK\n\nその他は、```export default class {{Name}} extends Vue {}```と記述。それぞれの処理を書いていく。\nこの時点で、だいぶシンタックスが変わるが以下のように記述していく。\n\n```javascript\n\n// data() リアクティブになる。\nmessage: string = 'message';\nprice: Number = 1230\n\n// propsは@Propを使用する。複数の場合は都度使っていく\n\n// JS\nprops: {\n  text: {\n    type: String,\n    default: \"\"\n  }\n}\n\n//TS\n@Prop({ default: \"\" }) text!: string\n\n\n```\n\n### watch, computed, methods\n\nサンプルコード書かないが以下の様な形\n- watchは@Watchとしてデコレータする\n- computedはクラス構文のgetterメソッドで定義する。\n- methodsはそのままクラス構文の中で使用可能。\n\n※Vue3のRFCによると非推奨の書き方になるようで、今からプロジェクト始める場合は導入しないほうがよさそう。\n\n## composition api\n\n目玉機能！\n\nmain.tsで```@vue/composition-api```をimportする。\n\n```javascript\nimport VueCompositionApi from '@vue/composition-api'\nVue.use(VueCompositionApi)\n\n```\n\n### 各Vueコンポーネントで使う時\n\ndataやMethodsは、setup関数内でリアクティブにする。\n\n※importは、必要なものを適宜変更する\n\n```javascript\nimport {\n  createComponent,\n  reactive,\n  SetupContext\n} from '@vue/composition-api'\n\nexport default createComponent({\n  setup() {\n    // リアクティブデータ、関数を定義していく\n\n    const state =reactive({\n      text: 'text',\n      price: 1200\n    }),\n\n    const isNumber = (price: number) => {\n      state.price = price\n    },\n\n    // 最後にreturnで返す\n   return {\n      state,\n      isNumber\n    }\n  }\n})\n\n```\n\npropsの定義は```type Props```を定義してsetup関数の引数としてPropsを渡してアノテーションをつける\n\n```javascript\ntype Props = {\n  text: string;\n};\n\nexport default createComponent({\n  props: {\n    text: {\n      type: String,\n      default: \"default\"\n    }\n  },\n  setup(props: Props) {\n    props.text\n  }\n})\n\n```\n\n算出プロパティはsetup関数内で、以下のように記述。setup関数内でretrunする。\n\n```javascript\nconst priceLength = computed(() => {\n  return state.price.length\n})\n```\n\n### 感想\n- 関数をretrunで返すシンタックスの方が可読性は良さそう\n- 今までthisを書いていた箇所は不要になる。\n- refなのかリアクティブなのか一瞬わからなくなる\n\n\n## TODO\n- 他のVue3.xxで追加される機能についても試す","src/content/blog/2020/0206.md","3721c54a891b0f7a",{"html":263,"metadata":264},"\u003Cp>そろそろVue3.xが出るかもなので、目玉機能のCompositionAPIを試してみてまとめてみる。\u003C/p>\n\u003Ch2 id=\"typescript\">TypeScript\u003C/h2>\n\u003Cp>Vue3.xxでは、TypeScript対応！！\u003C/p>\n\u003Cp>やったー🎉🎉🎉🎉\u003C/p>\n\u003Ch2 id=\"composition-api-is-何\">composition api is 何？\u003C/h2>\n\u003Cp>\u003Ca href=\"https://github.com/vuejs/composition-api\" target=\"_blank\">composition api\u003C/a>\u003C/p>\n\u003Cp>ドキュメントは以下\n\u003Ca href=\"https://vue-composition-api-rfc.netlify.com/\">https://vue-composition-api-rfc.netlify.com/\u003C/a>\u003C/p>\n\u003Cp>今までのVue2だと\u003C/p>\n\u003Cul>\n\u003Cli>肥大化していくと可読性が悪い\u003C/li>\n\u003Cli>コンポーネントのロジックの再利用性がつらみ\u003C/li>\n\u003Cli>TypeScript書きづらい。\u003C/li>\n\u003Cli>テスト書きにくい\u003C/li>\n\u003C/ul>\n\u003Cp>みたいなことがあった。\u003C/p>\n\u003Cp>これをReact hooksをヒントに新たにAPIを作成したものがcomposition api。\u003C/p>\n\u003Cp>TypeScript対応だと現状\u003Cstrong>vue-property-decorator\u003C/strong>でデコレータ使うか、\u003Ccode>vue.extend\u003C/code>の2択しかないが、これだとアノテーション(型推論)の恩恵を受けづらいという問題もあった。\u003C/p>\n\u003Ch2 id=\"vueextendを使う場合\">vue.extendを使う場合\u003C/h2>\n\u003Cp>\u003Ca href=\"https://jp.vuejs.org/v2/guide/typescript.html#%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%AE%E5%9E%8B%E3%81%AB%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B\" target=\"_blank\">TypeScript のサポート\u003C/a>の通りだが、importを\u003Ccode>Vue\u003C/code>から行いExtendVueオブジェクトを返すメソッドをexportすれば使用可能。（もちろんlang=“ts”もする。）\u003C/p>\n\u003Cp>基本的に\u003Ccode>components\u003C/code>以外のライフサイクルフックに型を定義していく。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\n\u003Cspan class=\"token comment\">// JavaScript\u003C/span>\n\u003Cspan class=\"token function\">data\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  retrun \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">text\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'text'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token literal-property property\">price\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">120\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token comment\">// TypeScript \u003C/span>\n\u003Cspan class=\"token comment\">// 最初に型を作る\u003C/span>\n\u003Cspan class=\"token keyword\">export\u003C/span> type DataItem \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">text\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> String\n    \u003Cspan class=\"token literal-property property\">price\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> Number\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token function\">data\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> DataItem \u003Cspan class=\"token punctuation\">{\u003C/span>\n  retrun \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">text\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'text'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token literal-property property\">price\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">120\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>methods,computedなどはそれぞれの関数に型をつけていく\n※公式ドキュメント通り\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token literal-property property\">methods\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">greet\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> string \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>msg \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token string\">' world'\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token literal-property property\">computed\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">greeting\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> string \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">greet\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token string\">'!'\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>導入のハードルがもっとも低いが細かい所まで型推論できなそう。\u003C/p>\n\u003Ch2 id=\"デコレータを使うやり方\">デコレータを使うやり方\u003C/h2>\n\u003Cp>JavaScriptのclassを用いたクラスベースの書き方。\u003C/p>\n\u003Cp>vue-property-decoratorで必要なものをimportする。\u003C/p>\n\u003Cp>使わない場合も一応書けるが、propsなどがちょっと見にくい感じになるので導入している所が多い。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> Vue \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'vue'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>型指定したいもの　Component\u003Cspan class=\"token punctuation\">,\u003C/span> Vueなど\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'vue-property-decorator'\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>componentsは、\u003Ccode>@Component({})\u003C/code>で囲う。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">@\u003Cspan class=\"token function\">Component\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  AddButton\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>componentsがない場合は@Componentと書けばOK\u003C/p>\n\u003Cp>その他は、\u003Ccode>export default class {{Name}} extends Vue {}\u003C/code>と記述。それぞれの処理を書いていく。\nこの時点で、だいぶシンタックスが変わるが以下のように記述していく。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\n\u003Cspan class=\"token comment\">// data() リアクティブになる。\u003C/span>\n\u003Cspan class=\"token literal-property property\">message\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> string \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'message'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token literal-property property\">price\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> Number \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1230\u003C/span>\n\n\u003Cspan class=\"token comment\">// propsは@Propを使用する。複数の場合は都度使っていく\u003C/span>\n\n\u003Cspan class=\"token comment\">// JS\u003C/span>\n\u003Cspan class=\"token literal-property property\">props\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token literal-property property\">text\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">type\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> String\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token keyword\">default\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"\"\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token comment\">//TS\u003C/span>\n@\u003Cspan class=\"token function\">Prop\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"\"\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> text\u003Cspan class=\"token operator\">!\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> string\n\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"watch-computed-methods\">watch, computed, methods\u003C/h3>\n\u003Cp>サンプルコード書かないが以下の様な形\u003C/p>\n\u003Cul>\n\u003Cli>watchは@Watchとしてデコレータする\u003C/li>\n\u003Cli>computedはクラス構文のgetterメソッドで定義する。\u003C/li>\n\u003Cli>methodsはそのままクラス構文の中で使用可能。\u003C/li>\n\u003C/ul>\n\u003Cp>※Vue3のRFCによると非推奨の書き方になるようで、今からプロジェクト始める場合は導入しないほうがよさそう。\u003C/p>\n\u003Ch2 id=\"composition-api\">composition api\u003C/h2>\n\u003Cp>目玉機能！\u003C/p>\n\u003Cp>main.tsで\u003Ccode>@vue/composition-api\u003C/code>をimportする。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> VueCompositionApi \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'@vue/composition-api'\u003C/span>\nVue\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">use\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>VueCompositionApi\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"各vueコンポーネントで使う時\">各Vueコンポーネントで使う時\u003C/h3>\n\u003Cp>dataやMethodsは、setup関数内でリアクティブにする。\u003C/p>\n\u003Cp>※importは、必要なものを適宜変更する\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  createComponent\u003Cspan class=\"token punctuation\">,\u003C/span>\n  reactive\u003Cspan class=\"token punctuation\">,\u003C/span>\n  SetupContext\n\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'@vue/composition-api'\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> \u003Cspan class=\"token function\">createComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">setup\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token comment\">// リアクティブデータ、関数を定義していく\u003C/span>\n\n    \u003Cspan class=\"token keyword\">const\u003C/span> state \u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token function\">reactive\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">text\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'text'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">price\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">1200\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\n    \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">isNumber\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token literal-property property\">price\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> number\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      state\u003Cspan class=\"token punctuation\">.\u003C/span>price \u003Cspan class=\"token operator\">=\u003C/span> price\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\n    \u003Cspan class=\"token comment\">// 最後にreturnで返す\u003C/span>\n   \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      state\u003Cspan class=\"token punctuation\">,\u003C/span>\n      isNumber\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>propsの定義は\u003Ccode>type Props\u003C/code>を定義してsetup関数の引数としてPropsを渡してアノテーションをつける\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">type Props \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token literal-property property\">text\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> string\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> \u003Cspan class=\"token function\">createComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token literal-property property\">props\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">text\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">type\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> String\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token keyword\">default\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"default\"\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token function\">setup\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token literal-property property\">props\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> Props\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    props\u003Cspan class=\"token punctuation\">.\u003C/span>text\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>算出プロパティはsetup関数内で、以下のように記述。setup関数内でretrunする。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">const\u003C/span> priceLength \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">computed\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> state\u003Cspan class=\"token punctuation\">.\u003C/span>price\u003Cspan class=\"token punctuation\">.\u003C/span>length\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"感想\">感想\u003C/h3>\n\u003Cul>\n\u003Cli>関数をretrunで返すシンタックスの方が可読性は良さそう\u003C/li>\n\u003Cli>今までthisを書いていた箇所は不要になる。\u003C/li>\n\u003Cli>refなのかリアクティブなのか一瞬わからなくなる\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"todo\">TODO\u003C/h2>\n\u003Cul>\n\u003Cli>他のVue3.xxで追加される機能についても試す\u003C/li>\n\u003C/ul>",{"headings":265,"localImagePaths":288,"remoteImagePaths":289,"frontmatter":256,"imagePaths":290},[266,269,272,275,277,280,283,286,287],{"depth":22,"slug":267,"text":268},"typescript","TypeScript",{"depth":22,"slug":270,"text":271},"composition-api-is-何","composition api is 何？",{"depth":22,"slug":273,"text":274},"vueextendを使う場合","vue.extendを使う場合",{"depth":22,"slug":276,"text":276},"デコレータを使うやり方",{"depth":29,"slug":278,"text":279},"watch-computed-methods","watch, computed, methods",{"depth":22,"slug":281,"text":282},"composition-api","composition api",{"depth":29,"slug":284,"text":285},"各vueコンポーネントで使う時","各Vueコンポーネントで使う時",{"depth":29,"slug":249,"text":249},{"depth":22,"slug":216,"text":217},[],[],[],"2020/0206.md","2019/001",{"id":292,"data":294,"body":297,"filePath":298,"digest":299,"rendered":300,"legacyId":321},{"title":295,"publishDate":296},"Gatsby.jsでブログ開設してみた。","2019-12-11","Gatsby.jsでブログを公開してみた。環境構築から、デプロイまで説明している記事が結構あるのでお世話になりつつ構築してみた。\n\n### 構築\n構築は簡単だった。とりあえず以下コマンドラインでローカル環境が起動する。\n今回はgatsby-starter-blogというブログテンプレートを使って構築した。\n\n```shell\n$ npm install -g gatsby\n$ gatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog\n$ cd blog\n$ gatsby develop\n```\n\n※```new blog```のblogの部分は任意の名前で。\n\n\n### CSS\ngatsby.jsでは直接cssが記述されているため、今回は慣れているscss形式に変更してレイアウト調整を行った。\n\nnpmで以下をインストール\n\n```\n$ npm install --save node-sass gatsby-plugin-sass\n\n```\n\ngatsby-config.jsに以下インストールしたプラグインを追加する。\n\n```javascript\nmodule.exports = {\n  plugins: [`gatsby-plugin-sass`]\n}\n```\n\nsrcの任意のフォルダにscssファイルを作成する、当ブログは```src/styles/global.scss```に作成している。\n\nその後、gatsby-browser.jsに以下をimportさせる。\n\n```javascript\nimport \"./src/styles/global.scss\"\n\n```\n\n今後は、CSS-Modulesなども勉強したいので移行を考えている。\n\n ### ダークモード対応\n 流行りなので対応してみた。\n\n prefers-color-schemeを使ってMedia Queryをdarkに設定してあげるとダークモードのcssを指定することができる。\n\n ```css\n@media (prefers-color-scheme: dark) {\n  :root {\n   ・・・\n  }\n}\n\n ```\n\n### 全体のレイアウト\nとりあえずざっくりcssを当てているので品質は良くない。これから細かい部分の改修をしていく予定。\n\n### デプロイ\n\n\u003Ca href=\"https://qiita.com/NaokiIshimura/items/64e060ccc244e38d0c15\" target=\"_blank\">Netlify\u003C/a>で行っている。基本的には新規でアカウントを作ってポチポチ画面に沿っていけば環境は出来上がる。\n\n以下記事を参照いただきたい。\n\n\u003Ca href=\"https://qiita.com/NaokiIshimura/items/64e060ccc244e38d0c15\" target=\"_blank\">https://qiita.com/NaokiIshimura/items/64e060ccc244e38d0c15\u003C/a>\n\nデプロイは、masterブランチにpushされたらNetlifyに、自動デプロイが行われる。今後は、Github Actionsなどを使ってテストとか導入したい。\n\n### このブログはなに？\n\nこのブログでは自分の技術的な取り組みとか、映画のこととか、音楽とか色々書いていく予定。\n\nまた本ブログも日々拡張していく予定。\n\n- TypeScriptへの移行\n- CSSをリファクタリング\n- TwitterとかSNS連携系の拡張\n- 検索機能とか？","src/content/blog/2019/001.md","3f90be47a32d10eb",{"html":301,"metadata":302},"\u003Cp>Gatsby.jsでブログを公開してみた。環境構築から、デプロイまで説明している記事が結構あるのでお世話になりつつ構築してみた。\u003C/p>\n\u003Ch3 id=\"構築\">構築\u003C/h3>\n\u003Cp>構築は簡単だった。とりあえず以下コマンドラインでローカル環境が起動する。\n今回はgatsby-starter-blogというブログテンプレートを使って構築した。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">$ \u003Cspan class=\"token function\">npm\u003C/span> \u003Cspan class=\"token function\">install\u003C/span> \u003Cspan class=\"token parameter variable\">-g\u003C/span> gatsby\n$ gatsby new blog https://github.com/gatsbyjs/gatsby-starter-blog\n$ \u003Cspan class=\"token builtin class-name\">cd\u003C/span> blog\n$ gatsby develop\n\u003C/code>\u003C/pre>\n\u003Cp>※\u003Ccode>new blog\u003C/code>のblogの部分は任意の名前で。\u003C/p>\n\u003Ch3 id=\"css\">CSS\u003C/h3>\n\u003Cp>gatsby.jsでは直接cssが記述されているため、今回は慣れているscss形式に変更してレイアウト調整を行った。\u003C/p>\n\u003Cp>npmで以下をインストール\u003C/p>\n\u003Cpre class=\"language-plaintext\" data-language=\"plaintext\">\u003Ccode is:raw=\"\" class=\"language-plaintext\">$ npm install --save node-sass gatsby-plugin-sass\n\n\u003C/code>\u003C/pre>\n\u003Cp>gatsby-config.jsに以下インストールしたプラグインを追加する。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">module\u003Cspan class=\"token punctuation\">.\u003C/span>exports \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token literal-property property\">plugins\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">gatsby-plugin-sass\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>srcの任意のフォルダにscssファイルを作成する、当ブログは\u003Ccode>src/styles/global.scss\u003C/code>に作成している。\u003C/p>\n\u003Cp>その後、gatsby-browser.jsに以下をimportさせる。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">\"./src/styles/global.scss\"\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>今後は、CSS-Modulesなども勉強したいので移行を考えている。\u003C/p>\n\u003Ch3 id=\"ダークモード対応\">ダークモード対応\u003C/h3>\n\u003Cp>流行りなので対応してみた。\u003C/p>\n\u003Cp>prefers-color-schemeを使ってMedia Queryをdarkに設定してあげるとダークモードのcssを指定することができる。\u003C/p>\n\u003Cpre class=\"language-css\" data-language=\"css\">\u003Ccode is:raw=\"\" class=\"language-css\">\u003Cspan class=\"token atrule\">\u003Cspan class=\"token rule\">@media\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token property\">prefers-color-scheme\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> dark\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n \u003Cspan class=\"token selector\">:root\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  ・・・\n \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"全体のレイアウト\">全体のレイアウト\u003C/h3>\n\u003Cp>とりあえずざっくりcssを当てているので品質は良くない。これから細かい部分の改修をしていく予定。\u003C/p>\n\u003Ch3 id=\"デプロイ\">デプロイ\u003C/h3>\n\u003Cp>\u003Ca href=\"https://qiita.com/NaokiIshimura/items/64e060ccc244e38d0c15\" target=\"_blank\">Netlify\u003C/a>で行っている。基本的には新規でアカウントを作ってポチポチ画面に沿っていけば環境は出来上がる。\u003C/p>\n\u003Cp>以下記事を参照いただきたい。\u003C/p>\n\u003Cp>\u003Ca href=\"https://qiita.com/NaokiIshimura/items/64e060ccc244e38d0c15\" target=\"_blank\">\u003C/a>\u003Ca href=\"https://qiita.com/NaokiIshimura/items/64e060ccc244e38d0c15\">https://qiita.com/NaokiIshimura/items/64e060ccc244e38d0c15\u003C/a>\u003C/p>\n\u003Cp>デプロイは、masterブランチにpushされたらNetlifyに、自動デプロイが行われる。今後は、Github Actionsなどを使ってテストとか導入したい。\u003C/p>\n\u003Ch3 id=\"このブログはなに\">このブログはなに？\u003C/h3>\n\u003Cp>このブログでは自分の技術的な取り組みとか、映画のこととか、音楽とか色々書いていく予定。\u003C/p>\n\u003Cp>また本ブログも日々拡張していく予定。\u003C/p>\n\u003Cul>\n\u003Cli>TypeScriptへの移行\u003C/li>\n\u003Cli>CSSをリファクタリング\u003C/li>\n\u003Cli>TwitterとかSNS連携系の拡張\u003C/li>\n\u003Cli>検索機能とか？\u003C/li>\n\u003C/ul>",{"headings":303,"localImagePaths":318,"remoteImagePaths":319,"frontmatter":294,"imagePaths":320},[304,306,309,311,313,315],{"depth":29,"slug":305,"text":305},"構築",{"depth":29,"slug":307,"text":308},"css","CSS",{"depth":29,"slug":310,"text":310},"ダークモード対応",{"depth":29,"slug":312,"text":312},"全体のレイアウト",{"depth":29,"slug":314,"text":314},"デプロイ",{"depth":29,"slug":316,"text":317},"このブログはなに","このブログはなに？",[],[],[],"2019/001.md","2020/0315",{"id":322,"data":324,"body":327,"filePath":328,"digest":329,"rendered":330,"legacyId":358},{"title":325,"publishDate":326},"アクセシビリティに考慮したモーダルを作るというか写経した。","2020-03-15","僕もフォローさせていただいてるICSの池田さんが以下のようなツイートをしていた。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">フロントエンドエンジニアのスキルは、モーダルの実装を見ると判断しやすい。\u003Cbr>\u003Cbr>・HTML構造とCSS設計: z-index地獄の対策\u003Cbr>・JSでのデータの受け渡しが合理的か\u003Cbr>・アニメーションの気配りができるか\u003Cbr>・アクセシビリティ: フォーカス制御など\u003Cbr>・拡張性: 複数のモーダル表示が可能か \u003Ca href=\"https://t.co/flsord4TK1\">https://t.co/flsord4TK1\u003C/a>\u003C/p>&mdash; 池田 泰延 (@clockmaker) \u003Ca href=\"https://twitter.com/clockmaker/status/1237170058230550529?ref_src=twsrc%5Etfw\">March 10, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\nなるほど！自分が前職の受託時代にjQueryで、結構モーダルを作っていて純粋なJavaScriptで実装したことないし（Vueでは作ったことある）アクセシビリティを考慮したモーダルも要件としてなかったことが多く、あまり作ったことがないなーと思ったので作ってみた。\n\n## アクセシビリティに考慮？？\n\nツイートにもあるが、モーダルが開いている時に純粋に実装するとモーダル展開時は、フォーカスがモーダル内に当たらずにページに残ってしまう。\n\nこれは俗に言う***フォーカストラップ***というやつである。このブログを書く前にそういえばGoogleのブログ記事に以下があるのを思い出した。\n\n## tabindex の使用\n\n[https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex?hl=ja](https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex?hl=ja)\n\nページ内でフォーカス管理するためのtipsが書かれているのだが、記事の下にフォーカストラップについて触れられていて[モーダルのサンプル]([モーダルのサンプル](http://udacity.github.io/ud891/lesson2-focus/07-modals-and-keyboard-traps/solution/index.html))が出ている。「モーダルこれでいいじゃん。。」と思ったので、このサンプルコードを写経しつつ修正を加えてみた。\n\n作成したものは以下の、GitHubに置いた。\n\nhttps://github.com/ryokatsuse/blog_demo/tree/master/modal\n\n## ざっくり仕様\n\n- 「ログインモーダル」のボタンを押すとモーダルがフェードで表示させる\n- この時オーバーレイも表示される\n- モーダルが開いた状態でTABキーを押すと最初にIDのinputタグにフォーカスが当たる。\n- TABキーで次のフォーカス先、Shift＋TABキーで前のフォーカス先に移動する。（モーダル内）\n- Xボタンクリックまたはモーダル展開時にescキーを押すとモーダルは閉じる。\n\n## 変更点\n\n### HTML\n\nアクセシビリティ対応を入れた。role属性とaria-labelledby属性、aria-describedby属性を付与して該当の箇所にidを指定した。\n\n```html\n\u003Cdiv class=\"modal\" role=\"dialog\" aria-labelledby=\"dialog-header\" aria-describedby=\"dialog-desc\">\n  \u003Ch1 id=\"dialog-header\">ログイン\u003C/h1>\n  \u003Cp id=\"dialog-desc\">ログインしますか？\u003C/p>\n  \u003Cdiv class=\"field\">\n    \u003Clabel for=\"user_id\">ID\u003C/label>\n    \u003Cinput id=\"user_id\" type=\"text\">\n  \u003C/div>\n  \u003Cdiv class=\"field\">\n    \u003Clabel for=\"user_password\">password\u003C/label>\n    \u003Cinput id=\"user_password\" type=\"password\">\n  \u003C/div>\n  \u003Cbutton id=\"signup\">sign up\u003C/button>\n  \u003Cbutton class=\"close\">X\u003C/button>\n\u003C/div>\n\n```\n\nrole属性はdialogが推奨されており、ria-labelledbyとaria-describedby属性を使うことでスクリーンリーダーに対応することができます。（MDN）\n\u003Ca href=\"https://developer.mozilla.org/ja/docs/Web/Accessibility/ARIA/Roles/dialog_role\" target=\"_blank\">ARIA: dialog ロール\u003C/a>\n\n\n### CSS\nGoogleのサンプルではモーダルの表示非表示にアニメーションがなかったのでフェードアニメーションを追加した。\n\n### JavaScript\nまず変数が、```var```指定だったので```let const```にそれぞれ変更して関数もアロー関数に変更した。\n\nopenModal関数内では、以下のような処理をしている。汚いコードですみません。\n\n```javascript\nconst openModal = () => {\n  //フォーカス中のDOMを保存する\n  focusedElementBeforeModal = document.activeElement\n\n  const focusableElementsString = 'a[href], area[href], input:not([disabled]), button:not([disabled]), object, embed, [tabindex=\"0\"], [contenteditable]'\n  let focusableElements = modal.querySelectorAll(focusableElementsString)\n\n  focusableElements = [].slice.call(focusableElements)\n\n  let firstTabStop = focusableElements[0]\n  let lastTabStop = focusableElements[focusableElements.length -1]\n\n  modal.classList.add('is-modal')\n  modalOverlay.classList.add('is-modal-overlay')\n\n  firstTabStop.focus()\n\n  const trapTabKey = (e) => {\n    if (e.keyCode === 9) {\n\n      if(e.shiftKey) {\n        if(document.activeElement === firstTabStop) {\n          e.preventDefault()\n          lastTabStop.focus()\n        }\n      } else {\n        if (document.activeElement === lastTabStop) {\n          e.preventDefault();\n          firstTabStop.focus();\n        }\n      }\n    }\n\n    if (e.keyCode === 27) {\n      closeModal();\n    }\n  }\n\n  modal.addEventListener('keydown', trapTabKey)\n  modalOverlay.addEventListener('click', closeModal)\n  const closeBtn = modal.querySelector('.close');\n  closeBtn.addEventListener('click', closeModal);\n}\n\n```\n\n特に、フォーカスするDOMの保存とフォーカスを行き来する箇所についてがこの関数の肝になる。\n\nfocusableElementsStringの中にDOMをぶち込んでおり、その後サンプルの方では```Array.prototype.slice.call```を使って、先程のDOMコレクションを配列に変換しています。\n\nただ```Array.prototype```なんて書きたくないので[]にして省略した。\n\n```javascript\nfocusableElements = [].slice.call(focusableElements)\n```\n\nサンプルではXボタンがなかったので、追加してXボタンがフォーカスされた状態でEnterを押すとモーダルが閉じるようになる。\n\n後は、特に変えておらずアロー関数にしたことの弊害で、addEventListenerの呼び出し順番を少し変更したぐらいだ。\n\ntrapTabKey関数も基本同じ。キーイベントを行うときはpreventDefault()を使うことがお約束になっている点は注目箇所。\n\n例えばこれに十字キーでも、フォーカス移動したいなどの要件が出た場合は追加でキーイベントを追加していく必要がありそうだがUIも考慮しないとつらいかもしれない。\n\n\n## 写経して思ったこと\n\nモーダルの実装は、比較的簡単ではあるが要件が膨らむと確かに考慮ポイントが多い。\n\n特に今回は複数モーダルに対応していないが、要件によっては実装方法が変わったりするケースもあるし、今回みたいに複数のaddEventListenerはつらいので、リファクタリングする必要はありそうだ。\n\n\n## 余談\nそういえばdialogタグというのがHTMLの標準であるが、safariが実装していないし中々使えないものになっている。\n\nhttps://developer.mozilla.org/ja/docs/Web/HTML/Element/dialog\n\n多くのサイトは最低1つ何かしらのモーダルがUIとして提供されていると思うからブラウザのネイティブで実装が進んでほしいものである。","src/content/blog/2020/0315.md","22bbfe47485a7acb",{"html":331,"metadata":332},"\u003Cp>僕もフォローさせていただいてるICSの池田さんが以下のようなツイートをしていた。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">フロントエンドエンジニアのスキルは、モーダルの実装を見ると判断しやすい。\u003Cbr>\u003Cbr>・HTML構造とCSS設計: z-index地獄の対策\u003Cbr>・JSでのデータの受け渡しが合理的か\u003Cbr>・アニメーションの気配りができるか\u003Cbr>・アクセシビリティ: フォーカス制御など\u003Cbr>・拡張性: 複数のモーダル表示が可能か \u003Ca href=\"https://t.co/flsord4TK1\">https://t.co/flsord4TK1\u003C/a>\u003C/p>— 池田 泰延 (@clockmaker) \u003Ca href=\"https://twitter.com/clockmaker/status/1237170058230550529?ref_src=twsrc%5Etfw\">March 10, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>なるほど！自分が前職の受託時代にjQueryで、結構モーダルを作っていて純粋なJavaScriptで実装したことないし（Vueでは作ったことある）アクセシビリティを考慮したモーダルも要件としてなかったことが多く、あまり作ったことがないなーと思ったので作ってみた。\u003C/p>\n\u003Ch2 id=\"アクセシビリティに考慮\">アクセシビリティに考慮？？\u003C/h2>\n\u003Cp>ツイートにもあるが、モーダルが開いている時に純粋に実装するとモーダル展開時は、フォーカスがモーダル内に当たらずにページに残ってしまう。\u003C/p>\n\u003Cp>これは俗に言う\u003Cem>\u003Cstrong>フォーカストラップ\u003C/strong>\u003C/em>というやつである。このブログを書く前にそういえばGoogleのブログ記事に以下があるのを思い出した。\u003C/p>\n\u003Ch2 id=\"tabindex-の使用\">tabindex の使用\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex?hl=ja\">https://developers.google.com/web/fundamentals/accessibility/focus/using-tabindex?hl=ja\u003C/a>\u003C/p>\n\u003Cp>ページ内でフォーカス管理するためのtipsが書かれているのだが、記事の下にフォーカストラップについて触れられていて\u003Ca href=\"%5B%E3%83%A2%E3%83%BC%E3%83%80%E3%83%AB%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%5D(http://udacity.github.io/ud891/lesson2-focus/07-modals-and-keyboard-traps/solution/index.html)\">モーダルのサンプル\u003C/a>が出ている。「モーダルこれでいいじゃん。。」と思ったので、このサンプルコードを写経しつつ修正を加えてみた。\u003C/p>\n\u003Cp>作成したものは以下の、GitHubに置いた。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ryokatsuse/blog_demo/tree/master/modal\">https://github.com/ryokatsuse/blog_demo/tree/master/modal\u003C/a>\u003C/p>\n\u003Ch2 id=\"ざっくり仕様\">ざっくり仕様\u003C/h2>\n\u003Cul>\n\u003Cli>「ログインモーダル」のボタンを押すとモーダルがフェードで表示させる\u003C/li>\n\u003Cli>この時オーバーレイも表示される\u003C/li>\n\u003Cli>モーダルが開いた状態でTABキーを押すと最初にIDのinputタグにフォーカスが当たる。\u003C/li>\n\u003Cli>TABキーで次のフォーカス先、Shift＋TABキーで前のフォーカス先に移動する。（モーダル内）\u003C/li>\n\u003Cli>Xボタンクリックまたはモーダル展開時にescキーを押すとモーダルは閉じる。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"変更点\">変更点\u003C/h2>\n\u003Ch3 id=\"html\">HTML\u003C/h3>\n\u003Cp>アクセシビリティ対応を入れた。role属性とaria-labelledby属性、aria-describedby属性を付与して該当の箇所にidを指定した。\u003C/p>\n\u003Cpre class=\"language-html\" data-language=\"html\">\u003Ccode is:raw=\"\" class=\"language-html\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>modal\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">role\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>dialog\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">aria-labelledby\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>dialog-header\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">aria-describedby\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>dialog-desc\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>h1\u003C/span> \u003Cspan class=\"token attr-name\">id\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>dialog-header\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>ログイン\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>h1\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>p\u003C/span> \u003Cspan class=\"token attr-name\">id\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>dialog-desc\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>ログインしますか？\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>p\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>field\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>label\u003C/span> \u003Cspan class=\"token attr-name\">for\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>user_id\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>ID\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>label\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>input\u003C/span> \u003Cspan class=\"token attr-name\">id\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>user_id\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">type\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>text\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>field\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>label\u003C/span> \u003Cspan class=\"token attr-name\">for\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>user_password\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>password\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>label\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>input\u003C/span> \u003Cspan class=\"token attr-name\">id\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>user_password\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">type\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>password\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>button\u003C/span> \u003Cspan class=\"token attr-name\">id\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>signup\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>sign up\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>button\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>button\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>close\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>X\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>button\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>role属性はdialogが推奨されており、ria-labelledbyとaria-describedby属性を使うことでスクリーンリーダーに対応することができます。（MDN）\n\u003Ca href=\"https://developer.mozilla.org/ja/docs/Web/Accessibility/ARIA/Roles/dialog_role\" target=\"_blank\">ARIA: dialog ロール\u003C/a>\u003C/p>\n\u003Ch3 id=\"css\">CSS\u003C/h3>\n\u003Cp>Googleのサンプルではモーダルの表示非表示にアニメーションがなかったのでフェードアニメーションを追加した。\u003C/p>\n\u003Ch3 id=\"javascript\">JavaScript\u003C/h3>\n\u003Cp>まず変数が、\u003Ccode>var\u003C/code>指定だったので\u003Ccode>let const\u003C/code>にそれぞれ変更して関数もアロー関数に変更した。\u003C/p>\n\u003Cp>openModal関数内では、以下のような処理をしている。汚いコードですみません。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">openModal\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token comment\">//フォーカス中のDOMを保存する\u003C/span>\n  focusedElementBeforeModal \u003Cspan class=\"token operator\">=\u003C/span> document\u003Cspan class=\"token punctuation\">.\u003C/span>activeElement\n\n  \u003Cspan class=\"token keyword\">const\u003C/span> focusableElementsString \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'a[href], area[href], input:not([disabled]), button:not([disabled]), object, embed, [tabindex=\"0\"], [contenteditable]'\u003C/span>\n  \u003Cspan class=\"token keyword\">let\u003C/span> focusableElements \u003Cspan class=\"token operator\">=\u003C/span> modal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">querySelectorAll\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>focusableElementsString\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n  focusableElements \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">slice\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">call\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>focusableElements\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n  \u003Cspan class=\"token keyword\">let\u003C/span> firstTabStop \u003Cspan class=\"token operator\">=\u003C/span> focusableElements\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n  \u003Cspan class=\"token keyword\">let\u003C/span> lastTabStop \u003Cspan class=\"token operator\">=\u003C/span> focusableElements\u003Cspan class=\"token punctuation\">[\u003C/span>focusableElements\u003Cspan class=\"token punctuation\">.\u003C/span>length \u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\n  modal\u003Cspan class=\"token punctuation\">.\u003C/span>classList\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">add\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'is-modal'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  modalOverlay\u003Cspan class=\"token punctuation\">.\u003C/span>classList\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">add\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'is-modal-overlay'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n  firstTabStop\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">focus\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">trapTabKey\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">e\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>e\u003Cspan class=\"token punctuation\">.\u003C/span>keyCode \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">9\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\n      \u003Cspan class=\"token keyword\">if\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>e\u003Cspan class=\"token punctuation\">.\u003C/span>shiftKey\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token keyword\">if\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>document\u003Cspan class=\"token punctuation\">.\u003C/span>activeElement \u003Cspan class=\"token operator\">===\u003C/span> firstTabStop\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n          e\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">preventDefault\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n          lastTabStop\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">focus\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n        \u003Cspan class=\"token punctuation\">}\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">else\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>document\u003Cspan class=\"token punctuation\">.\u003C/span>activeElement \u003Cspan class=\"token operator\">===\u003C/span> lastTabStop\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n          e\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">preventDefault\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n          firstTabStop\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">focus\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n        \u003Cspan class=\"token punctuation\">}\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>e\u003Cspan class=\"token punctuation\">.\u003C/span>keyCode \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">27\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token function\">closeModal\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n  modal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">addEventListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'keydown'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> trapTabKey\u003Cspan class=\"token punctuation\">)\u003C/span>\n  modalOverlay\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">addEventListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'click'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> closeModal\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> closeBtn \u003Cspan class=\"token operator\">=\u003C/span> modal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">querySelector\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'.close'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  closeBtn\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">addEventListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'click'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> closeModal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>特に、フォーカスするDOMの保存とフォーカスを行き来する箇所についてがこの関数の肝になる。\u003C/p>\n\u003Cp>focusableElementsStringの中にDOMをぶち込んでおり、その後サンプルの方では\u003Ccode>Array.prototype.slice.call\u003C/code>を使って、先程のDOMコレクションを配列に変換しています。\u003C/p>\n\u003Cp>ただ\u003Ccode>Array.prototype\u003C/code>なんて書きたくないので[]にして省略した。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">focusableElements \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">slice\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">call\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>focusableElements\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>サンプルではXボタンがなかったので、追加してXボタンがフォーカスされた状態でEnterを押すとモーダルが閉じるようになる。\u003C/p>\n\u003Cp>後は、特に変えておらずアロー関数にしたことの弊害で、addEventListenerの呼び出し順番を少し変更したぐらいだ。\u003C/p>\n\u003Cp>trapTabKey関数も基本同じ。キーイベントを行うときはpreventDefault()を使うことがお約束になっている点は注目箇所。\u003C/p>\n\u003Cp>例えばこれに十字キーでも、フォーカス移動したいなどの要件が出た場合は追加でキーイベントを追加していく必要がありそうだがUIも考慮しないとつらいかもしれない。\u003C/p>\n\u003Ch2 id=\"写経して思ったこと\">写経して思ったこと\u003C/h2>\n\u003Cp>モーダルの実装は、比較的簡単ではあるが要件が膨らむと確かに考慮ポイントが多い。\u003C/p>\n\u003Cp>特に今回は複数モーダルに対応していないが、要件によっては実装方法が変わったりするケースもあるし、今回みたいに複数のaddEventListenerはつらいので、リファクタリングする必要はありそうだ。\u003C/p>\n\u003Ch2 id=\"余談\">余談\u003C/h2>\n\u003Cp>そういえばdialogタグというのがHTMLの標準であるが、safariが実装していないし中々使えないものになっている。\u003C/p>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/ja/docs/Web/HTML/Element/dialog\">https://developer.mozilla.org/ja/docs/Web/HTML/Element/dialog\u003C/a>\u003C/p>\n\u003Cp>多くのサイトは最低1つ何かしらのモーダルがUIとして提供されていると思うからブラウザのネイティブで実装が進んでほしいものである。\u003C/p>",{"headings":333,"localImagePaths":355,"remoteImagePaths":356,"frontmatter":324,"imagePaths":357},[334,337,340,342,344,347,348,351,353],{"depth":22,"slug":335,"text":336},"アクセシビリティに考慮","アクセシビリティに考慮？？",{"depth":22,"slug":338,"text":339},"tabindex-の使用","tabindex の使用",{"depth":22,"slug":341,"text":341},"ざっくり仕様",{"depth":22,"slug":343,"text":343},"変更点",{"depth":29,"slug":345,"text":346},"html","HTML",{"depth":29,"slug":307,"text":308},{"depth":29,"slug":349,"text":350},"javascript","JavaScript",{"depth":22,"slug":352,"text":352},"写経して思ったこと",{"depth":22,"slug":354,"text":354},"余談",[],[],[],"2020/0315.md","2020/0322",{"id":359,"data":361,"body":364,"filePath":365,"digest":366,"rendered":367,"legacyId":387},{"title":362,"publishDate":363},"【書評】プログラミングTypeScript 〜第1,2章〜","2020-03-22","O'Reillyから発売されている「プログラミングTypeScript」の書評。\n\nhttps://www.oreilly.co.jp/books/9784873119045/\n\n\n## 1章　イントロダクション\n\n- JavaScriptの問題点はバグに気づきにくいことになる。\n - プログラムの実行時に、バグに気づくことになる。\n- TypeScriptは、それより前にエラーを検知できる（つまりテキストエディタで開発中に教えてくれる）\n\n##  2章　TypeScript:全体像\n\n### コンパイラー\n\nほとんどのプラグラムのコードは、以下のように手順でコンパイルされる\n\n1. プログラムが AST（抽象構文木）へと解析される\n2. AST がバイトコードにコンパイルされる\n3. バイトコードがランライムによって評価される\n\nTypeScriptは、バイトコードへ直接変換するのではなく JavaScriptへ変換する。\n\n- 実際にはASTに生成したあとで、TSCがコードの型チェックを行う。\n\nTS→JSへのコンパイルの流れは以下になる。\n\n1. TypeScriptソース→TypeScript AST\n2. ASTが型チェッカーによってチェックされる\n3. TypeScript AST →JavaScriptソース\n4. JavaScriptソース → JavaScript AST\n5. AST →バイトコード\n6. バイトコードがランタイムによって評価される\n\n※1-3は、TSCによって行われれる。\n\n※4-6は、JSのブラウザエンジンによって実行される。\n\n ### 型チェック\n\n型をチェックする方法として、明示的に型を宣言する方法と、いい感じに型を推論してくれる方法と2種類ある。\n\n```typescript\n// 明示的に宣言（アノテーション）\nlet a: number = 1 // aはnumberです\nlet b: string = 'hello' // bはstringです\nlet c: boolean[] = [true, false] // cはbooleanの配列です\n\n// 型推論\nlet a = 1 // aはnumberです\nlet b = 'hello' // bはstringです\nlet c = [true, false] // cはbooleanの配列です\n```\n\n- 明示的に型を宣言するよりTS側でできるだけ推論してくれる方がよいとされている。\n\ntslintは非推奨になっているので使わない。（eslintを使う）\n\n## tsconfig.json\n\nルートディレクトリに必ず、tsconfig.jsonが存在する。どういう設定でTypeScriptプロジェクトを扱うかを記述した設定ファイル\n\n以下は最低限な設定\n\n```json\n{\n  \"compilerOptions\": {\n    \"lib\": [\"es2015\"],\n    \"module\": \"commonjs\",\n    \"outDir\": \"dist\",\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"target\": \"es2015\"\n  },\n  \"include\": [\n    \"src\"\n  ]\n}\n\n```\n\n-  JS→TSからの移行をする際はanyを許可して、慣れてきたら厳格にしていくとよい。\n- configができたらindex.tsを作成して```tsc```または、```./node_modules/.bin/tsc```を実行。\n\ntsconfigのオプションは公式サイトに乗っている。\n\nhttps://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n\n以下のQiitaも参考に。\n\nhttps://qiita.com/ryokkkke/items/390647a7c26933940470","src/content/blog/2020/0322.md","fed630b3905c4eca",{"html":368,"metadata":369},"\u003Cp>O’Reillyから発売されている「プログラミングTypeScript」の書評。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.oreilly.co.jp/books/9784873119045/\">https://www.oreilly.co.jp/books/9784873119045/\u003C/a>\u003C/p>\n\u003Ch2 id=\"1章イントロダクション\">1章　イントロダクション\u003C/h2>\n\u003Cul>\n\u003Cli>JavaScriptの問題点はバグに気づきにくいことになる。\u003C/li>\n\u003Cli>プログラムの実行時に、バグに気づくことになる。\u003C/li>\n\u003Cli>TypeScriptは、それより前にエラーを検知できる（つまりテキストエディタで開発中に教えてくれる）\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"2章typescript全体像\">2章　TypeScript:全体像\u003C/h2>\n\u003Ch3 id=\"コンパイラー\">コンパイラー\u003C/h3>\n\u003Cp>ほとんどのプラグラムのコードは、以下のように手順でコンパイルされる\u003C/p>\n\u003Col>\n\u003Cli>プログラムが AST（抽象構文木）へと解析される\u003C/li>\n\u003Cli>AST がバイトコードにコンパイルされる\u003C/li>\n\u003Cli>バイトコードがランライムによって評価される\u003C/li>\n\u003C/ol>\n\u003Cp>TypeScriptは、バイトコードへ直接変換するのではなく JavaScriptへ変換する。\u003C/p>\n\u003Cul>\n\u003Cli>実際にはASTに生成したあとで、TSCがコードの型チェックを行う。\u003C/li>\n\u003C/ul>\n\u003Cp>TS→JSへのコンパイルの流れは以下になる。\u003C/p>\n\u003Col>\n\u003Cli>TypeScriptソース→TypeScript AST\u003C/li>\n\u003Cli>ASTが型チェッカーによってチェックされる\u003C/li>\n\u003Cli>TypeScript AST →JavaScriptソース\u003C/li>\n\u003Cli>JavaScriptソース → JavaScript AST\u003C/li>\n\u003Cli>AST →バイトコード\u003C/li>\n\u003Cli>バイトコードがランタイムによって評価される\u003C/li>\n\u003C/ol>\n\u003Cp>※1-3は、TSCによって行われれる。\u003C/p>\n\u003Cp>※4-6は、JSのブラウザエンジンによって実行される。\u003C/p>\n\u003Ch3 id=\"型チェック\">型チェック\u003C/h3>\n\u003Cp>型をチェックする方法として、明示的に型を宣言する方法と、いい感じに型を推論してくれる方法と2種類ある。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token comment\">// 明示的に宣言（アノテーション）\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> a\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token comment\">// aはnumberです\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> b\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'hello'\u003C/span> \u003Cspan class=\"token comment\">// bはstringです\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> c\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// cはbooleanの配列です\u003C/span>\n\n\u003Cspan class=\"token comment\">// 型推論\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token comment\">// aはnumberです\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> b \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'hello'\u003C/span> \u003Cspan class=\"token comment\">// bはstringです\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> c \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// cはbooleanの配列です\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>明示的に型を宣言するよりTS側でできるだけ推論してくれる方がよいとされている。\u003C/li>\n\u003C/ul>\n\u003Cp>tslintは非推奨になっているので使わない。（eslintを使う）\u003C/p>\n\u003Ch2 id=\"tsconfigjson\">tsconfig.json\u003C/h2>\n\u003Cp>ルートディレクトリに必ず、tsconfig.jsonが存在する。どういう設定でTypeScriptプロジェクトを扱うかを記述した設定ファイル\u003C/p>\n\u003Cp>以下は最低限な設定\u003C/p>\n\u003Cpre class=\"language-json\" data-language=\"json\">\u003Ccode is:raw=\"\" class=\"language-json\">\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token property\">\"compilerOptions\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token property\">\"lib\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"es2015\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"module\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"commonjs\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"outDir\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"dist\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"sourceMap\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"strict\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"target\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"es2015\"\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token property\">\"include\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n    \u003Cspan class=\"token string\">\"src\"\u003C/span>\n  \u003Cspan class=\"token punctuation\">]\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>JS→TSからの移行をする際はanyを許可して、慣れてきたら厳格にしていくとよい。\u003C/li>\n\u003Cli>configができたらindex.tsを作成して\u003Ccode>tsc\u003C/code>または、\u003Ccode>./node_modules/.bin/tsc\u003C/code>を実行。\u003C/li>\n\u003C/ul>\n\u003Cp>tsconfigのオプションは公式サイトに乗っている。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\u003C/a>\u003C/p>\n\u003Cp>以下のQiitaも参考に。\u003C/p>\n\u003Cp>\u003Ca href=\"https://qiita.com/ryokkkke/items/390647a7c26933940470\">https://qiita.com/ryokkkke/items/390647a7c26933940470\u003C/a>\u003C/p>",{"headings":370,"localImagePaths":384,"remoteImagePaths":385,"frontmatter":361,"imagePaths":386},[371,374,377,379,381],{"depth":22,"slug":372,"text":373},"1章イントロダクション","1章　イントロダクション",{"depth":22,"slug":375,"text":376},"2章typescript全体像","2章　TypeScript:全体像",{"depth":29,"slug":378,"text":378},"コンパイラー",{"depth":29,"slug":380,"text":380},"型チェック",{"depth":22,"slug":382,"text":383},"tsconfigjson","tsconfig.json",[],[],[],"2020/0322.md","2020/0323",{"id":388,"data":390,"body":393,"filePath":394,"digest":395,"rendered":396,"legacyId":440},{"title":391,"publishDate":392},"【書評】プログラミングTypeScript 〜第3章〜","2020-03-27","O'Reillyから発売されている「プログラミングTypeScript」の書評。\n\nhttps://www.oreilly.co.jp/books/9784873119045/\n\n\n## 3章　型について\n\n- 型の階層構造の図がわかりやすい\n\n![型の階層構造](/images/20200323_ts_nest.png)\n\n### any\n- tscの設定で、noImplicitAnyをtrueにするのは、最終手段！！(strictがtrueになっていれば問題ない)\n- 新規プロジェクトの場合はanyはなるべく使わない方針にする。\n- JS→TSへの移行時はanyを許可しないとツライ場面があるかもしれない。\n\n\n### unknown\n- 前もって値が不明な場合に使う。（それでも使わない）\n- 使うケースは、typeof演算子や、instanceof演算子などで絞り込みたい場合。\n\n```typescript\nlet a: unknown = 30\nlet b = a === 123\nlet c = a + 10\nif (typeof a === 'number') {\n  let d = a + 10 // number \n}\n\n```\n\n### boolean\n\n- booleanは、その名の通りtrueかfalseを型チェックする。\n\n```typescript\n//普通はこう使う\nconst A = true\n\n//より厳格にチェックしたい場合は以下\nlet B: true = true //true\nlet C: true = false // エラーになる\n```\n\n- 1つだけの値を受け入れてそれ以外の値は、受け入れない型は**リテラル型**という。\n\n\n### number\n整数、浮動小数点数、正数、負数、Infinity(無限大)、NaN(非数)など数字に関わることをチェックします。\n\n```typescript\nlet a = 1234 // number\nconst b = 5678 // 5678型になる。\nlet c: number = 100 // number\nlet d: 26.218 = 10 //エラーになる。\n\n```\n\n上記のように、より厳格にチェックを行うことができる。\n\n\n### bigInt\nJSで表現できる整数より大きな整数を扱うことができる\n\n### string\n文字列のチェック。基本的にはnumberと一緒でリテラル型も可能\n\n```typescript\nlet a = 'Hello' // string\nconst b = 'Hello!!' // Hello!!\nlet c: 'test' = 'dev' // エラー\n\n```\n\n### symbol\nあまり使わないので省略。\n\n### オブジェクト\n\n型宣言する方法はいくつかある。\n\n```typescript\nlet a: object = {\n  b: 'x' \n}\n\nlet a: {b: number} = {\n  b: 12\n}\n\n```\n\nただし、すべてはオブジェクトというJavaSctiptの言語特性上、anyとそこまで変わらない。\n\n### インデックスシグネチャ\n- オブジェクトは元来、キーとなる値は文字列以外に数値や Symbolなどを指定できる。\n- TSでこのいずれかのキーを指定できるという状況を避けるようにするために以下のように```[key: String]: number``` の形式で記述する。\n\n```typescript\n// 数値のキーに文字列を保持する連動配列\ninterface NumStrDictionary {\n    [key: number]: string;\n}\n\n```\n\n ### 型エイリアス\n- 変数宣言と同じように```type xxx```という形式で型をエイリアス宣言できる\n- 変数同様に、スコープを持ちます。\n\n```typescript\ntype Age = Number //AgeにNumber型を設定した\n\n```\n\n## 配列\n推論は以下のような感じ\n\n```typescript\nlet a = [1, 2, 3]  // number[]\nvar b = ['a', 'b']  //string[]\nlet c: string[] = ['a']  //string[]\nlet d = [1, 'a']  //(number | string)[]\nconst e = [2, 'b']  // (number | string)[]\n\n```\n\n- 配列は暗黙的に型推論することが多いので使い方によっては、こちらからTS側に情報を与えてあげないといけない\n\n\n```(number | string)[]```の型だった場合に、例えば全体の配列をマップして小文字→大文字したいケースがあった場合に、数値か文字列を```typeof```でチェックしないといけない。\n\n### タプル\n固定長の配列を型付けする特別な方法\n\n```typescript\nlet a: [string, string, number] = ['malcolm', 'gladwell', 1963]\na = ['queen', 'elizabeth', 'ii', 1926] // エラー TS2322\n```\n\n- 上記のように順番通りに型が推論され当てはまらない型が入ってきたらエラーになる。\n- 可変長にも対応していてスプレッド演算子で以下のような記述も可能\n\n```typescript\n// 少なくとも1つの要素(とそれに続く可変長の要素)を持つ、文字列のリスト\nlet friends: [string, ...string[]] = ['Sara', 'Tali', 'Chloe', 'Claire']\n\n// 不均一なリスト\nlet list: [number, boolean, ...string[]] = [1, false, 'a', 'b', 'c']\n```\n\n細かい型指定が可能なので積極的に使うことを、推奨されている\n\n### 読み取り専用の配列とタプル\nreadonlyを使って元の配列の状態をそのままにし。新たにコピーした配列を扱うことができる。\n\n作成する場合は、アノテーションを使用する。\n\n```typescript\nlet as: readonly number[] = [1, 2, 3] // readonly number[] \nlet bs: readonly number[] = as.concat(4) // readonly number[]\nlet three = bs[2] \nas[4] = 5 //  エラー\n```\n\n### null、undefined、void、never\nまず使うことはないので省略するが、概要は以下\n\n|  型  |  意味  |\n| ---- | ---- |\n|  null  |  値の欠如  |\n|  undefined  |  値がまだ割り当てられていない変数  |\n|  void  |  return文を持たない関数の戻り値  |\n|  never  |  決して戻ることのない関数の戻り値  |\n\n## 列挙型(enum)\n順序付けされていないデータ構造でキーを値にマッピングする\n文字列→数値（数値列挙）、文字列→文字列（文字列列挙）の2種類がある\n\n\n```typescript\nenum Language { \n  English,\n  Spanish,\n  Russian\n}\n\n\nenum Language {\n  English = 100,\n  Spanish = 200 + 300,\n  Russian // TypeScriptは501と推論します(500の次の数値)\n}\n\n```\n\n## TODO\n- enum型はこれだけで色々試してブログ化したい。","src/content/blog/2020/0323.md","b8167d87662d49ab",{"html":397,"metadata":398},"\u003Cp>O’Reillyから発売されている「プログラミングTypeScript」の書評。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.oreilly.co.jp/books/9784873119045/\">https://www.oreilly.co.jp/books/9784873119045/\u003C/a>\u003C/p>\n\u003Ch2 id=\"3章型について\">3章　型について\u003C/h2>\n\u003Cul>\n\u003Cli>型の階層構造の図がわかりやすい\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"/images/20200323_ts_nest.png\" alt=\"型の階層構造\">\u003C/p>\n\u003Ch3 id=\"any\">any\u003C/h3>\n\u003Cul>\n\u003Cli>tscの設定で、noImplicitAnyをtrueにするのは、最終手段！！(strictがtrueになっていれば問題ない)\u003C/li>\n\u003Cli>新規プロジェクトの場合はanyはなるべく使わない方針にする。\u003C/li>\n\u003Cli>JS→TSへの移行時はanyを許可しないとツライ場面があるかもしれない。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"unknown\">unknown\u003C/h3>\n\u003Cul>\n\u003Cli>前もって値が不明な場合に使う。（それでも使わない）\u003C/li>\n\u003Cli>使うケースは、typeof演算子や、instanceof演算子などで絞り込みたい場合。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> a\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">unknown\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> b \u003Cspan class=\"token operator\">=\u003C/span> a \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">123\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> c \u003Cspan class=\"token operator\">=\u003C/span> a \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\n\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">typeof\u003C/span> a \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token string\">'number'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">let\u003C/span> d \u003Cspan class=\"token operator\">=\u003C/span> a \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">10\u003C/span> \u003Cspan class=\"token comment\">// number \u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"boolean\">boolean\u003C/h3>\n\u003Cul>\n\u003Cli>booleanは、その名の通りtrueかfalseを型チェックする。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token comment\">//普通はこう使う\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token constant\">A\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n\n\u003Cspan class=\"token comment\">//より厳格にチェックしたい場合は以下\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> \u003Cspan class=\"token constant\">B\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span> \u003Cspan class=\"token comment\">//true\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> \u003Cspan class=\"token constant\">C\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span> \u003Cspan class=\"token comment\">// エラーになる\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>1つだけの値を受け入れてそれ以外の値は、受け入れない型は\u003Cstrong>リテラル型\u003C/strong>という。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"number\">number\u003C/h3>\n\u003Cp>整数、浮動小数点数、正数、負数、Infinity(無限大)、NaN(非数)など数字に関わることをチェックします。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1234\u003C/span> \u003Cspan class=\"token comment\">// number\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> b \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">5678\u003C/span> \u003Cspan class=\"token comment\">// 5678型になる。\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> c\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">100\u003C/span> \u003Cspan class=\"token comment\">// number\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> d\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">26.218\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span> \u003Cspan class=\"token comment\">//エラーになる。\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>上記のように、より厳格にチェックを行うことができる。\u003C/p>\n\u003Ch3 id=\"bigint\">bigInt\u003C/h3>\n\u003Cp>JSで表現できる整数より大きな整数を扱うことができる\u003C/p>\n\u003Ch3 id=\"string\">string\u003C/h3>\n\u003Cp>文字列のチェック。基本的にはnumberと一緒でリテラル型も可能\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'Hello'\u003C/span> \u003Cspan class=\"token comment\">// string\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> b \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'Hello!!'\u003C/span> \u003Cspan class=\"token comment\">// Hello!!\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> c\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'test'\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'dev'\u003C/span> \u003Cspan class=\"token comment\">// エラー\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"symbol\">symbol\u003C/h3>\n\u003Cp>あまり使わないので省略。\u003C/p>\n\u003Ch3 id=\"オブジェクト\">オブジェクト\u003C/h3>\n\u003Cp>型宣言する方法はいくつかある。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> a\u003Cspan class=\"token operator\">:\u003C/span> object \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  b\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'x'\u003C/span> \n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">let\u003C/span> a\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>b\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  b\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">12\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>ただし、すべてはオブジェクトというJavaSctiptの言語特性上、anyとそこまで変わらない。\u003C/p>\n\u003Ch3 id=\"インデックスシグネチャ\">インデックスシグネチャ\u003C/h3>\n\u003Cul>\n\u003Cli>オブジェクトは元来、キーとなる値は文字列以外に数値や Symbolなどを指定できる。\u003C/li>\n\u003Cli>TSでこのいずれかのキーを指定できるという状況を避けるようにするために以下のように\u003Ccode>[key: String]: number\u003C/code> の形式で記述する。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token comment\">// 数値のキーに文字列を保持する連動配列\u003C/span>\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">NumStrDictionary\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"型エイリアス\">型エイリアス\u003C/h3>\n\u003Cul>\n\u003Cli>変数宣言と同じように\u003Ccode>type xxx\u003C/code>という形式で型をエイリアス宣言できる\u003C/li>\n\u003Cli>変数同様に、スコープを持ちます。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Age\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> Number \u003Cspan class=\"token comment\">//AgeにNumber型を設定した\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"配列\">配列\u003C/h2>\n\u003Cp>推論は以下のような感じ\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>  \u003Cspan class=\"token comment\">// number[]\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> b \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'a'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'b'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>  \u003Cspan class=\"token comment\">//string[]\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> c\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'a'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>  \u003Cspan class=\"token comment\">//string[]\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> d \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'a'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>  \u003Cspan class=\"token comment\">//(number | string)[]\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> e \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'b'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>  \u003Cspan class=\"token comment\">// (number | string)[]\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>配列は暗黙的に型推論することが多いので使い方によっては、こちらからTS側に情報を与えてあげないといけない\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ccode>(number | string)[]\u003C/code>の型だった場合に、例えば全体の配列をマップして小文字→大文字したいケースがあった場合に、数値か文字列を\u003Ccode>typeof\u003C/code>でチェックしないといけない。\u003C/p>\n\u003Ch3 id=\"タプル\">タプル\u003C/h3>\n\u003Cp>固定長の配列を型付けする特別な方法\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> a\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'malcolm'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'gladwell'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">1963\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\na \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'queen'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'elizabeth'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'ii'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">1926\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// エラー TS2322\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>上記のように順番通りに型が推論され当てはまらない型が入ってきたらエラーになる。\u003C/li>\n\u003Cli>可変長にも対応していてスプレッド演算子で以下のような記述も可能\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token comment\">// 少なくとも1つの要素(とそれに続く可変長の要素)を持つ、文字列のリスト\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> friends\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'Sara'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'Tali'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'Chloe'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'Claire'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\n\u003Cspan class=\"token comment\">// 不均一なリスト\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> list\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'a'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'b'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'c'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>細かい型指定が可能なので積極的に使うことを、推奨されている\u003C/p>\n\u003Ch3 id=\"読み取り専用の配列とタプル\">読み取り専用の配列とタプル\u003C/h3>\n\u003Cp>readonlyを使って元の配列の状態をそのままにし。新たにコピーした配列を扱うことができる。\u003C/p>\n\u003Cp>作成する場合は、アノテーションを使用する。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> \u003Cspan class=\"token keyword\">as\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">readonly\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// readonly number[] \u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> bs\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">readonly\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">as\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">concat\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// readonly number[]\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> three \u003Cspan class=\"token operator\">=\u003C/span> bs\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \n\u003Cspan class=\"token keyword\">as\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token comment\">//  エラー\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"nullundefinedvoidnever\">null、undefined、void、never\u003C/h3>\n\u003Cp>まず使うことはないので省略するが、概要は以下\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>型\u003C/th>\u003Cth>意味\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>null\u003C/td>\u003Ctd>値の欠如\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>undefined\u003C/td>\u003Ctd>値がまだ割り当てられていない変数\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>void\u003C/td>\u003Ctd>return文を持たない関数の戻り値\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>never\u003C/td>\u003Ctd>決して戻ることのない関数の戻り値\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"列挙型enum\">列挙型(enum)\u003C/h2>\n\u003Cp>順序付けされていないデータ構造でキーを値にマッピングする\n文字列→数値（数値列挙）、文字列→文字列（文字列列挙）の2種類がある\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">enum\u003C/span> Language \u003Cspan class=\"token punctuation\">{\u003C/span> \n  English\u003Cspan class=\"token punctuation\">,\u003C/span>\n  Spanish\u003Cspan class=\"token punctuation\">,\u003C/span>\n  Russian\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\n\u003Cspan class=\"token keyword\">enum\u003C/span> Language \u003Cspan class=\"token punctuation\">{\u003C/span>\n  English \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">100\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  Spanish \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">200\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">300\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  Russian \u003Cspan class=\"token comment\">// TypeScriptは501と推論します(500の次の数値)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"todo\">TODO\u003C/h2>\n\u003Cul>\n\u003Cli>enum型はこれだけで色々試してブログ化したい。\u003C/li>\n\u003C/ul>",{"headings":399,"localImagePaths":437,"remoteImagePaths":438,"frontmatter":390,"imagePaths":439},[400,403,405,407,409,411,414,416,418,420,422,424,426,428,430,433,436],{"depth":22,"slug":401,"text":402},"3章型について","3章　型について",{"depth":29,"slug":404,"text":404},"any",{"depth":29,"slug":406,"text":406},"unknown",{"depth":29,"slug":408,"text":408},"boolean",{"depth":29,"slug":410,"text":410},"number",{"depth":29,"slug":412,"text":413},"bigint","bigInt",{"depth":29,"slug":415,"text":415},"string",{"depth":29,"slug":417,"text":417},"symbol",{"depth":29,"slug":419,"text":419},"オブジェクト",{"depth":29,"slug":421,"text":421},"インデックスシグネチャ",{"depth":29,"slug":423,"text":423},"型エイリアス",{"depth":22,"slug":425,"text":425},"配列",{"depth":29,"slug":427,"text":427},"タプル",{"depth":29,"slug":429,"text":429},"読み取り専用の配列とタプル",{"depth":29,"slug":431,"text":432},"nullundefinedvoidnever","null、undefined、void、never",{"depth":22,"slug":434,"text":435},"列挙型enum","列挙型(enum)",{"depth":22,"slug":216,"text":217},[],[],[],"2020/0323.md","2020/0329",{"id":441,"data":443,"body":446,"filePath":447,"digest":448,"rendered":449,"legacyId":477},{"title":444,"publishDate":445},"【書評】プログラミングTypeScript 〜第4章〜","2020-03-29","O'Reillyから発売されている「プログラミングTypeScript」の書評。\n\nhttps://www.oreilly.co.jp/books/9784873119045/\n\n\n## 4章　関数\n\n以下を学んでいく\n\n- TypeScript での関数の宣言方法と呼び出し方法\n- シグネチャのオーバーロード\n- 関数についてのポリモーフィズム\n- 型エイリアスについてのポリモーフィズム\n\n### オプションパラメーターとデフォルトパラメーター\n\n- 関数本体は常に型推論されるが、パラメータについては型推論しないので明示的にアノテーションをつける。\n- 引数忘れや、引数の型が違うとエラーを出してくれる\n- ?を使うことでパラメーターの省略を宣言可能\n - デフォルトパラメータをつけることもできる\n\n```typescript\nfunction log(message: string, userId = 'Not signed in') {\n  let time = new Date().toISOString()\n  console.log(time, message, userId)\n}\nlog('User clicked on a button', 'da763be') log('User signed out')\n```\n\n- デフォルトパラメーターに明示的な型アノテーションを加えることも可能\n\n```typescript\ntype Context = {\n  appId?: string\n  userId?: string\n}\n\nfunction log(message: string, context: Context = {}) {\n  let time = new Date().toISOString()\n  console.log(time, message, context.userId)\n}\n```\n\n### 可変長引数の型宣言（レストパラメータ）\n- 可変長引数（arguments）は配列っぽいけど配列じゃないから一度配列に変換して呼び出さないといけない（JS）\n- そもそもargumentsは型が安全ではない。\n\n以下がanyと推論されるケース\n\n```typescript\nfunction sumVariadic(): number {\n  return Array\n  .from(arguments)\n  .reduce((total, n) => total + n, 0)\n}\n\n```\n\n以下のようにargumentsを使用しないで以下のレストパラメータを使用する。\n\n```typescript\nfunction sumVariadicSafe(...numbers: number[]): number {\n  return numbers.reduce((total, n) => total + n, 0)\n}\n\n```\n\n### this の型付け\nthisのアノテーションは以下のようにする。\n\n```typescript\n\nfunction fancyDate(this: Date) {\n  return `${this.getMonth() + 1}/${this.getDate()}/${this.getFullYear()}`\n}\n\nfancyDate.call(new Date) // yyyy/mm//dd\nfancyDate() // エラー\n\n```\n\n### ジェネレーター、イテレータ\n当然アノテーションできる\n- どこかでブログ書くので、今回は省略\n\n\n### 呼び出しシグネチャ\n\n- 関数本体への型アノテーションFunction型は使わない。\n\n以下のようにアロー関数のような記法でアノテーションする\n\n```typescript\ntype Log = (message: string, userId?: string) => void\n\nlet log: Log = (\n  message,\n  userId = 'Not signed in'\n) => {\n  let time = new Date().toISOString()\n  console.log(time, message, userId) \n}\n\n```\n\n1. Log型を型付けする。\n2. Logから型推論させる\n3. userIdにデフォルト値を追加\n4. 戻り値を再びアノテートする必要はない。\n\n\n- オーバーロードされた関数の型\n複数の場所で呼び出されるシグネチャをもつ関数は完全なシグネチャで記述した方がよい\n\n```typescript\n// 完全な呼び出しシグネチャ\ntype Log = {\n  (message: string, userId?: string): void\n}\n\n```\n\n### ポリモーフィズム(ジェネリクス)\nジェネリクスは以下の記事がわかりやすいので省略\n\nhttps://qiita.com/Yametaro/items/bcd3166e5d2ad696a89e\n\n### 型駆動開発\n- 型シグネチャで概略を記述し、その後で値を埋め込むプログラミングのスタイルのこと\n- 今までは実装を先行して型がなんであるかを導いていたが、TypeScriptではまず型シグネチャから考えてその後に実装していくのが望ましい。","src/content/blog/2020/0329.md","00f634a797dbd42e",{"html":450,"metadata":451},"\u003Cp>O’Reillyから発売されている「プログラミングTypeScript」の書評。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.oreilly.co.jp/books/9784873119045/\">https://www.oreilly.co.jp/books/9784873119045/\u003C/a>\u003C/p>\n\u003Ch2 id=\"4章関数\">4章　関数\u003C/h2>\n\u003Cp>以下を学んでいく\u003C/p>\n\u003Cul>\n\u003Cli>TypeScript での関数の宣言方法と呼び出し方法\u003C/li>\n\u003Cli>シグネチャのオーバーロード\u003C/li>\n\u003Cli>関数についてのポリモーフィズム\u003C/li>\n\u003Cli>型エイリアスについてのポリモーフィズム\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"オプションパラメーターとデフォルトパラメーター\">オプションパラメーターとデフォルトパラメーター\u003C/h3>\n\u003Cul>\n\u003Cli>関数本体は常に型推論されるが、パラメータについては型推論しないので明示的にアノテーションをつける。\u003C/li>\n\u003Cli>引数忘れや、引数の型が違うとエラーを出してくれる\u003C/li>\n\u003Cli>?を使うことでパラメーターの省略を宣言可能\u003C/li>\n\u003Cli>デフォルトパラメータをつけることもできる\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>message\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> userId \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'Not signed in'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">let\u003C/span> time \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Date\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">toISOString\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>time\u003Cspan class=\"token punctuation\">,\u003C/span> message\u003Cspan class=\"token punctuation\">,\u003C/span> userId\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'User clicked on a button'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'da763be'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'User signed out'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>デフォルトパラメーターに明示的な型アノテーションを加えることも可能\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Context\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  appId\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\n  userId\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>message\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> context\u003Cspan class=\"token operator\">:\u003C/span> Context \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">let\u003C/span> time \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Date\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">toISOString\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>time\u003Cspan class=\"token punctuation\">,\u003C/span> message\u003Cspan class=\"token punctuation\">,\u003C/span> context\u003Cspan class=\"token punctuation\">.\u003C/span>userId\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"可変長引数の型宣言レストパラメータ\">可変長引数の型宣言（レストパラメータ）\u003C/h3>\n\u003Cul>\n\u003Cli>可変長引数（arguments）は配列っぽいけど配列じゃないから一度配列に変換して呼び出さないといけない（JS）\u003C/li>\n\u003Cli>そもそもargumentsは型が安全ではない。\u003C/li>\n\u003C/ul>\n\u003Cp>以下がanyと推論されるケース\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">sumVariadic\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token builtin\">Array\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">from\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>arguments\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">reduce\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>total\u003Cspan class=\"token punctuation\">,\u003C/span> n\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> total \u003Cspan class=\"token operator\">+\u003C/span> n\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>以下のようにargumentsを使用しないで以下のレストパラメータを使用する。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">sumVariadicSafe\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>numbers\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> numbers\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">reduce\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>total\u003Cspan class=\"token punctuation\">,\u003C/span> n\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> total \u003Cspan class=\"token operator\">+\u003C/span> n\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"this-の型付け\">this の型付け\u003C/h3>\n\u003Cp>thisのアノテーションは以下のようにする。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">fancyDate\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> Date\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">getMonth\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token string\">/\u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">getDate\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token string\">/\u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">getFullYear\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token function\">fancyDate\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">call\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Date\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// yyyy/mm//dd\u003C/span>\n\u003Cspan class=\"token function\">fancyDate\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// エラー\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"ジェネレーターイテレータ\">ジェネレーター、イテレータ\u003C/h3>\n\u003Cp>当然アノテーションできる\u003C/p>\n\u003Cul>\n\u003Cli>どこかでブログ書くので、今回は省略\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"呼び出しシグネチャ\">呼び出しシグネチャ\u003C/h3>\n\u003Cul>\n\u003Cli>関数本体への型アノテーションFunction型は使わない。\u003C/li>\n\u003C/ul>\n\u003Cp>以下のようにアロー関数のような記法でアノテーションする\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Log\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>message\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> userId\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\n\n\u003Cspan class=\"token keyword\">let\u003C/span> log\u003Cspan class=\"token operator\">:\u003C/span> Log \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n  message\u003Cspan class=\"token punctuation\">,\u003C/span>\n  userId \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'Not signed in'\u003C/span>\n\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">let\u003C/span> time \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Date\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">toISOString\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>time\u003Cspan class=\"token punctuation\">,\u003C/span> message\u003Cspan class=\"token punctuation\">,\u003C/span> userId\u003Cspan class=\"token punctuation\">)\u003C/span> \n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Col>\n\u003Cli>Log型を型付けする。\u003C/li>\n\u003Cli>Logから型推論させる\u003C/li>\n\u003Cli>userIdにデフォルト値を追加\u003C/li>\n\u003Cli>戻り値を再びアノテートする必要はない。\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>オーバーロードされた関数の型\n複数の場所で呼び出されるシグネチャをもつ関数は完全なシグネチャで記述した方がよい\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token comment\">// 完全な呼び出しシグネチャ\u003C/span>\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Log\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token punctuation\">(\u003C/span>message\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> userId\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"ポリモーフィズムジェネリクス\">ポリモーフィズム(ジェネリクス)\u003C/h3>\n\u003Cp>ジェネリクスは以下の記事がわかりやすいので省略\u003C/p>\n\u003Cp>\u003Ca href=\"https://qiita.com/Yametaro/items/bcd3166e5d2ad696a89e\">https://qiita.com/Yametaro/items/bcd3166e5d2ad696a89e\u003C/a>\u003C/p>\n\u003Ch3 id=\"型駆動開発\">型駆動開発\u003C/h3>\n\u003Cul>\n\u003Cli>型シグネチャで概略を記述し、その後で値を埋め込むプログラミングのスタイルのこと\u003C/li>\n\u003Cli>今までは実装を先行して型がなんであるかを導いていたが、TypeScriptではまず型シグネチャから考えてその後に実装していくのが望ましい。\u003C/li>\n\u003C/ul>",{"headings":452,"localImagePaths":474,"remoteImagePaths":475,"frontmatter":443,"imagePaths":476},[453,456,458,461,464,467,469,472],{"depth":22,"slug":454,"text":455},"4章関数","4章　関数",{"depth":29,"slug":457,"text":457},"オプションパラメーターとデフォルトパラメーター",{"depth":29,"slug":459,"text":460},"可変長引数の型宣言レストパラメータ","可変長引数の型宣言（レストパラメータ）",{"depth":29,"slug":462,"text":463},"this-の型付け","this の型付け",{"depth":29,"slug":465,"text":466},"ジェネレーターイテレータ","ジェネレーター、イテレータ",{"depth":29,"slug":468,"text":468},"呼び出しシグネチャ",{"depth":29,"slug":470,"text":471},"ポリモーフィズムジェネリクス","ポリモーフィズム(ジェネリクス)",{"depth":29,"slug":473,"text":473},"型駆動開発",[],[],[],"2020/0329.md","2020/0404",{"id":478,"data":480,"body":483,"filePath":484,"digest":485,"rendered":486,"legacyId":510},{"title":481,"publishDate":482},"【書評】プログラミングTypeScript 〜第5章〜","2020-04-04","O'Reillyから発売されている「プログラミングTypeScript」の書評。\n\nhttps://www.oreilly.co.jp/books/9784873119045/\n\n\n## 5章 クラスとインターフェース\n\nTypeScriptは。クラスのプロパティとメソッドに3つの修飾子をサポート\n\n- public\n - どこからでもアクセス可能。これがデフォルトのアクセス\n- protected\n - このクラスとサブクラスのインスタンスからアクセスができる\n- private\n - このクラスのインスタンスからのみアクセス可能\n\n\n```typescript\nabstract class Price {\n  constructor ()\n}\n\nnew Price('White', 'E', 1)  // エラー\n```\n\nabstractは抽象クラスを呼ばれ直接インスタンス化しようとするとエラーになる。\n\n### super\nJavaScriptと同様に、呼び出し可能。\n- メソッド呼び出し、コンストラクター呼び出し\n\n### thisの戻り値型\nthisの型付けは可能なので、当然使用可能\n\n以下は別のクラスを拡張するクラスを作成する時に使える記述。\n\n```typescript\nlet set = new Set \nset.add(1).add(2).add(3) \nset.has(2) // true \nset.has(4) // false\n\nclass Set {\n  has(value: number): boolean {\n  ... \n  }\n  add(value: number): this {\n  ...\n  }\n}\n\n```\n\n### インターフェース\ntypeと同じような形で使えるが違いがある。\n\n食べ物を型付けして具体的な食べ物を更に型付けする場合\n```typescript\n\n// Typeで書く場合\ntype Food = { \n  calories: number\n  tasty: boolean \n}\n\ntype Sushi = Food & {\n  salty: boolean\n}\ntype Cake = Food & {\n  sweet: boolean\n}\n\n// interfaceで書く場合\ninterface Food {\n  calories: number\n  tasty: boolean\n}\ninterface Sushi extends Food {\n  salty: boolean\n}\ninterface Cake extends Food {\n  sweet: boolean\n}\n\n```\n\n- インターフェースはnamsspaceのように2つ宣言したものが出てきても1つにマージしてくれる\n- typeはマージしてくれないので重複した場合にエラーになる。\n\n### 実装例\n\n- readonlyが使える\n- implementsを使うとそのクラスが特定のインターフェースを満たすことを実現できる\n\n```typescript\ninterface Animal {\n  readonly name: string \n  eat(food: string): void\n  sleep(hours: number): void\n}\n\ninterface Feline {\n  meow(): void\n}\nclass Cat implements Animal, Feline {\n  name = 'Whiskers'\n  eat(food: string) {\n    console.info('Ate some', food, '. Mmm!') }\n  sleep(hours: number) {\n    console.info('Slept for', hours, 'hours') }\n  meow() {\n    console.info('Meow')\n  }\n}\n\n\n```\n\n\n## デザインパターン\n\n### ファクトリーパターン\n - 何らかの型オブジェクトを作成するための方法。\n\n```typescript\ntype Shoe = {\n  purpose: string\n}\n\nclass BalletFlat implements Shoe {\n  purpose = 'dancing'\n}\n\nclass Boot implements Shoe {\n  purpose = 'woodcutting'\n}\n\nclass Sneaker implements Shoe {\n  purpose = 'walking'\n}\n```\n\n上記のようにじっそうしておけば```.create```で呼び出すだけ\n\n### ビルダーパターン\n- オブジェクト構築と実装部分を分けるやり方。\n\n```typescript\nnew RequestBuilder()\n  .setURL('/users')\n  .setMethod('get')\n  .setData({firstName: 'Anna'})\n  .send()\n\nclass RequestBuilder {\n  private url: string | null = null\n  setURL(url: string): this {\n    this.url = url\n    return this\n  }\n}\n\n```","src/content/blog/2020/0404.md","8f5f4301b93dae1d",{"html":487,"metadata":488},"\u003Cp>O’Reillyから発売されている「プログラミングTypeScript」の書評。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.oreilly.co.jp/books/9784873119045/\">https://www.oreilly.co.jp/books/9784873119045/\u003C/a>\u003C/p>\n\u003Ch2 id=\"5章-クラスとインターフェース\">5章 クラスとインターフェース\u003C/h2>\n\u003Cp>TypeScriptは。クラスのプロパティとメソッドに3つの修飾子をサポート\u003C/p>\n\u003Cul>\n\u003Cli>public\u003C/li>\n\u003Cli>どこからでもアクセス可能。これがデフォルトのアクセス\u003C/li>\n\u003Cli>protected\u003C/li>\n\u003Cli>このクラスとサブクラスのインスタンスからアクセスができる\u003C/li>\n\u003Cli>private\u003C/li>\n\u003Cli>このクラスのインスタンスからのみアクセス可能\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">abstract\u003C/span> \u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Price\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">constructor\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Price\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'White'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'E'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>  \u003Cspan class=\"token comment\">// エラー\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>abstractは抽象クラスを呼ばれ直接インスタンス化しようとするとエラーになる。\u003C/p>\n\u003Ch3 id=\"super\">super\u003C/h3>\n\u003Cp>JavaScriptと同様に、呼び出し可能。\u003C/p>\n\u003Cul>\n\u003Cli>メソッド呼び出し、コンストラクター呼び出し\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"thisの戻り値型\">thisの戻り値型\u003C/h3>\n\u003Cp>thisの型付けは可能なので、当然使用可能\u003C/p>\n\u003Cp>以下は別のクラスを拡張するクラスを作成する時に使える記述。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> set \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Set\u003C/span> \nset\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">add\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">add\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">add\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \nset\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">has\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// true \u003C/span>\nset\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">has\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// false\u003C/span>\n\n\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Set\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">has\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token operator\">...\u003C/span> \n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token function\">add\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token operator\">...\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"インターフェース\">インターフェース\u003C/h3>\n\u003Cp>typeと同じような形で使えるが違いがある。\u003C/p>\n\u003Cp>食べ物を型付けして具体的な食べ物を更に型付けする場合\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\n\u003Cspan class=\"token comment\">// Typeで書く場合\u003C/span>\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Food\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \n  calories\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\n  tasty\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span> \n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Sushi\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> Food \u003Cspan class=\"token operator\">&#x26;\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  salty\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Cake\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> Food \u003Cspan class=\"token operator\">&#x26;\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  sweet\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token comment\">// interfaceで書く場合\u003C/span>\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">Food\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  calories\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\n  tasty\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">Sushi\u003C/span> \u003Cspan class=\"token keyword\">extends\u003C/span> \u003Cspan class=\"token class-name\">Food\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  salty\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">Cake\u003C/span> \u003Cspan class=\"token keyword\">extends\u003C/span> \u003Cspan class=\"token class-name\">Food\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  sweet\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>インターフェースはnamsspaceのように2つ宣言したものが出てきても1つにマージしてくれる\u003C/li>\n\u003Cli>typeはマージしてくれないので重複した場合にエラーになる。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"実装例\">実装例\u003C/h3>\n\u003Cul>\n\u003Cli>readonlyが使える\u003C/li>\n\u003Cli>implementsを使うとそのクラスが特定のインターフェースを満たすことを実現できる\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">Animal\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">readonly\u003C/span> name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span> \n  \u003Cspan class=\"token function\">eat\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>food\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\n  \u003Cspan class=\"token function\">sleep\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>hours\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">Feline\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">meow\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Cat\u003C/span> \u003Cspan class=\"token keyword\">implements\u003C/span> \u003Cspan class=\"token class-name\">Animal\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> Feline \u003Cspan class=\"token punctuation\">{\u003C/span>\n  name \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'Whiskers'\u003C/span>\n  \u003Cspan class=\"token function\">eat\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>food\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">info\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'Ate some'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> food\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'. Mmm!'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token function\">sleep\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>hours\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">info\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'Slept for'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> hours\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'hours'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token function\">meow\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">info\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'Meow'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"デザインパターン\">デザインパターン\u003C/h2>\n\u003Ch3 id=\"ファクトリーパターン\">ファクトリーパターン\u003C/h3>\n\u003Cul>\n\u003Cli>何らかの型オブジェクトを作成するための方法。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Shoe\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  purpose\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">BalletFlat\u003C/span> \u003Cspan class=\"token keyword\">implements\u003C/span> \u003Cspan class=\"token class-name\">Shoe\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  purpose \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'dancing'\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Boot\u003C/span> \u003Cspan class=\"token keyword\">implements\u003C/span> \u003Cspan class=\"token class-name\">Shoe\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  purpose \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'woodcutting'\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Sneaker\u003C/span> \u003Cspan class=\"token keyword\">implements\u003C/span> \u003Cspan class=\"token class-name\">Shoe\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  purpose \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'walking'\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>上記のようにじっそうしておけば\u003Ccode>.create\u003C/code>で呼び出すだけ\u003C/p>\n\u003Ch3 id=\"ビルダーパターン\">ビルダーパターン\u003C/h3>\n\u003Cul>\n\u003Cli>オブジェクト構築と実装部分を分けるやり方。\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">RequestBuilder\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">setURL\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'/users'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">setMethod\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'get'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">setData\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>firstName\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'Anna'\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">send\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">RequestBuilder\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">private\u003C/span> url\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token keyword\">null\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">null\u003C/span>\n  \u003Cspan class=\"token function\">setURL\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>url\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>url \u003Cspan class=\"token operator\">=\u003C/span> url\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>",{"headings":489,"localImagePaths":507,"remoteImagePaths":508,"frontmatter":480,"imagePaths":509},[490,493,495,497,499,501,503,505],{"depth":22,"slug":491,"text":492},"5章-クラスとインターフェース","5章 クラスとインターフェース",{"depth":29,"slug":494,"text":494},"super",{"depth":29,"slug":496,"text":496},"thisの戻り値型",{"depth":29,"slug":498,"text":498},"インターフェース",{"depth":29,"slug":500,"text":500},"実装例",{"depth":22,"slug":502,"text":502},"デザインパターン",{"depth":29,"slug":504,"text":504},"ファクトリーパターン",{"depth":29,"slug":506,"text":506},"ビルダーパターン",[],[],[],"2020/0404.md","2020/0426",{"id":511,"data":513,"body":516,"filePath":517,"digest":518,"rendered":519,"legacyId":538},{"title":514,"publishDate":515},"【書評】エンジニアリング組織論への招待","2020-04-26","ちょっと前にやっと読んだので感想など\n\n- EMになる人、なった人は読んでおくと良さそうな1冊\n- ざっくり以下について書かれている\n  - 自分の意識改革、不確実性をどうやって減らしていくか\n  - チームメンバーとどう向き合っていくか\n  - アジャイルの仕方\n  - エンジニアとの目標認識合わせ（技術的負債、デリゲーションポーカーなど）\n  - エンジニアリング組織にしていく方法\n\n\n## 自分の意識改革\n- エンジニアリングとは、**「不確実性の高い状態から、低い状態に効率よく移すその過程で行う全て」**のこと\n- 不確実性をどう減らすか\n  - 自分を知る、疑う、囚われないようにする\n  - 仮説と検証を繰り返して減らす\n  - コミュニケーションをする\n\nとにかく、仮説と検証をアジャイル的に繰り返して、チームメンバーとコミュニケーションをしていくことが大事。\n\n自己組織化された組織を目指すことが重要\n\n```抽象的で自由度のある指示を指示者が出し、指示を受けたものが考えて行動する組織。```\n\n自分がコントロールできないのが未来と他人。\n\n## チームメンバーとどう向き合っていくか\n- 1on1を実施する\n    - 自分主体ではない（傾聴を使って相手に同感ではなく共感をしていく）\n    - メンティを自律的な問題解決に導くことであって問題解決をすることではない\n\n```\n具体的である（Specific）\n測定可能である（Measurable）\n達成可能である（Achievable）\nメンティの課題と行動が関連している。（Related）\n時間制限がある。いつまでにやるかが明確になっている。 Time-Bound\n```\n\n## アジャイルの仕方\nスクラムに関する色々な説明。既に知っていることが多かったので割愛するが、\n思ったこととしてはスクラム開発をエンジニアとして経験していない状態でEMへのキャリアを歩むのはやめたほうが良さそう。\n一度スクラム開発を経験したほうが良さそう。\n\n## エンジニアとの目標認識合わせ\n- 技術的負債は目に見えないため開発側とプロダクト側ではすり合わせが必要。\n- 方法としてデリゲーションポーカーという手法がある。\n - 以下の記事がおすすめ\n - https://developers.cyberagent.co.jp/blog/archives/13234/\n\n\n## エンジニアリング組織にしていく方法\n- マイクロサービス化していくのが良い。\n- ただししっかり検討しないと逆に開発スピードが落ちたりして生産性が下がる場合があるので注意\n\n## その他\n- プロジェクトマネジメント\n    - 目的は終わらせること\n    - 方法不確実性に向き合い、スケジュール不安を減少させること\n- プロダクトマネジメント\n    - 目的は終わらせなこと\n    - 目的不確実性に向き合い、マーケット不安を減少させること","src/content/blog/2020/0426.md","185ed25c30446c4b",{"html":520,"metadata":521},"\u003Cp>ちょっと前にやっと読んだので感想など\u003C/p>\n\u003Cul>\n\u003Cli>EMになる人、なった人は読んでおくと良さそうな1冊\u003C/li>\n\u003Cli>ざっくり以下について書かれている\n\u003Cul>\n\u003Cli>自分の意識改革、不確実性をどうやって減らしていくか\u003C/li>\n\u003Cli>チームメンバーとどう向き合っていくか\u003C/li>\n\u003Cli>アジャイルの仕方\u003C/li>\n\u003Cli>エンジニアとの目標認識合わせ（技術的負債、デリゲーションポーカーなど）\u003C/li>\n\u003Cli>エンジニアリング組織にしていく方法\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"自分の意識改革\">自分の意識改革\u003C/h2>\n\u003Cul>\n\u003Cli>エンジニアリングとは、**「不確実性の高い状態から、低い状態に効率よく移すその過程で行う全て」**のこと\u003C/li>\n\u003Cli>不確実性をどう減らすか\n\u003Cul>\n\u003Cli>自分を知る、疑う、囚われないようにする\u003C/li>\n\u003Cli>仮説と検証を繰り返して減らす\u003C/li>\n\u003Cli>コミュニケーションをする\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>とにかく、仮説と検証をアジャイル的に繰り返して、チームメンバーとコミュニケーションをしていくことが大事。\u003C/p>\n\u003Cp>自己組織化された組織を目指すことが重要\u003C/p>\n\u003Cp>\u003Ccode>抽象的で自由度のある指示を指示者が出し、指示を受けたものが考えて行動する組織。\u003C/code>\u003C/p>\n\u003Cp>自分がコントロールできないのが未来と他人。\u003C/p>\n\u003Ch2 id=\"チームメンバーとどう向き合っていくか\">チームメンバーとどう向き合っていくか\u003C/h2>\n\u003Cul>\n\u003Cli>1on1を実施する\n\u003Cul>\n\u003Cli>自分主体ではない（傾聴を使って相手に同感ではなく共感をしていく）\u003C/li>\n\u003Cli>メンティを自律的な問題解決に導くことであって問題解決をすることではない\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-plaintext\" data-language=\"plaintext\">\u003Ccode is:raw=\"\" class=\"language-plaintext\">具体的である（Specific）\n測定可能である（Measurable）\n達成可能である（Achievable）\nメンティの課題と行動が関連している。（Related）\n時間制限がある。いつまでにやるかが明確になっている。 Time-Bound\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"アジャイルの仕方\">アジャイルの仕方\u003C/h2>\n\u003Cp>スクラムに関する色々な説明。既に知っていることが多かったので割愛するが、\n思ったこととしてはスクラム開発をエンジニアとして経験していない状態でEMへのキャリアを歩むのはやめたほうが良さそう。\n一度スクラム開発を経験したほうが良さそう。\u003C/p>\n\u003Ch2 id=\"エンジニアとの目標認識合わせ\">エンジニアとの目標認識合わせ\u003C/h2>\n\u003Cul>\n\u003Cli>技術的負債は目に見えないため開発側とプロダクト側ではすり合わせが必要。\u003C/li>\n\u003Cli>方法としてデリゲーションポーカーという手法がある。\u003C/li>\n\u003Cli>以下の記事がおすすめ\u003C/li>\n\u003Cli>\u003Ca href=\"https://developers.cyberagent.co.jp/blog/archives/13234/\">https://developers.cyberagent.co.jp/blog/archives/13234/\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"エンジニアリング組織にしていく方法\">エンジニアリング組織にしていく方法\u003C/h2>\n\u003Cul>\n\u003Cli>マイクロサービス化していくのが良い。\u003C/li>\n\u003Cli>ただししっかり検討しないと逆に開発スピードが落ちたりして生産性が下がる場合があるので注意\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"その他\">その他\u003C/h2>\n\u003Cul>\n\u003Cli>プロジェクトマネジメント\n\u003Cul>\n\u003Cli>目的は終わらせること\u003C/li>\n\u003Cli>方法不確実性に向き合い、スケジュール不安を減少させること\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>プロダクトマネジメント\n\u003Cul>\n\u003Cli>目的は終わらせなこと\u003C/li>\n\u003Cli>目的不確実性に向き合い、マーケット不安を減少させること\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>",{"headings":522,"localImagePaths":535,"remoteImagePaths":536,"frontmatter":513,"imagePaths":537},[523,525,527,529,531,533],{"depth":22,"slug":524,"text":524},"自分の意識改革",{"depth":22,"slug":526,"text":526},"チームメンバーとどう向き合っていくか",{"depth":22,"slug":528,"text":528},"アジャイルの仕方",{"depth":22,"slug":530,"text":530},"エンジニアとの目標認識合わせ",{"depth":22,"slug":532,"text":532},"エンジニアリング組織にしていく方法",{"depth":22,"slug":534,"text":534},"その他",[],[],[],"2020/0426.md","2020/0418",{"id":539,"data":541,"body":544,"filePath":545,"digest":546,"rendered":547,"legacyId":578},{"title":542,"publishDate":543},"フルリモートでスクラムやってみての感想","2020-04-18","完全フルリモートでスクラム開発をしていて思った所感をメモする。\n\n## 前提\n\n- 1スプリント1週間\n- チーム全員が自宅からのフルリモートの状態\n- スクラムといっても[LESS]([https://less.works/jp/less/principles/overview](https://less.works/jp/less/principles/overview))というフレームワークを使って2チーム制で開発している。\n\n## 環境\n\n自粛ムードになるちょっと前ぐらいから週4リモート週1出社というスタイルを取っていたのでリモート慣れはしていたが、今後続く可能性もあるとのことだったので、以下を購した。\n\n- LG モニター ディスプレイ 32ML600M-B 31.5インチ\n- サンワダイレクト シンプルワークデスク\n- サンワダイレクト バランスチェア\n\n結果こんな感じになった。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">明日からここが仕事場 \u003Ca href=\"[https://t.co/aRXJ0orRv3](https://t.co/aRXJ0orRv3)\">[pic.twitter.com/aRXJ0orRv3](http://pic.twitter.com/aRXJ0orRv3)\u003C/a>\u003C/p>— Ryo Katsuse (@RyoEnter) \u003Ca href=\"[https://twitter.com/RyoEnter/status/1246652172441243650?ref_src=twsrc^tfw](https://twitter.com/RyoEnter/status/1246652172441243650?ref_src=twsrc%5Etfw)\">April 5, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n開発中は特に問題なく作業できている。\n\nただ、元々部屋が狭いので家族が近くにいたりする。MTG時や、子供が昼寝する時間などは部屋を移動したりして、対応するしかないのは若干のストレスだ。\n\n## コミュニケーション\n\n- 基本的にはSlackを使って行っている（朝のデイリースクラムや簡単な仕様相談などもSlackの通話機能でやっている）\n- スクラムイベントのMTGについてはハングアウト。\n- それ以外に雑談タイムや、15時になったらおやつタイムなどをハングアウト上で行っている。\n\n※zoomも用意されているが諸事情によりあまり使われない。\n\n対面時と比べてコミュニケーションが、取りにくいというのは自分は大きな違いは感じなかった。\n\nただチームメンバー内では「急に質問するハードルが高くなった」「チャットだと言葉尻がキツく感じる」「認識のズレがおきそう」などの課題も出た。Tryとしては\n\n- 「質問が来ること自体はチームメンバーが全員がウェルカムな環境」という共通認識を持つこと。\n- スタンプを多めに使うや、出勤退勤時今日の自分の調子を天気で表現してみる。\n- 認識のズレが起こりそうなら通話に切り替える\n\nなど様々なアプローチを取ることで少しでも心理的安全性を高める努力をしていく。\n\n## スクラムイベント\n\n### スプリントプランニング\n\n対面の時と特に変わらず出来ていると思う。別途メンバーに本スプリントで対応するストーリーで相談したいことがある場合は、そのまま通話を続けるなどして早め早めの対応が求められる。\n\n### デイリースクラム\n\n- 毎朝の進捗報告などで、しっかりと行う。\n- この時点でチーム内でヘルプが必要かなどを確認する。\n\n### リファインメント\n\nエンジニアは任意参加なので出なくてもよい。不参加の場合は開発に専念できる。\n\n参加した感じ画面共有を駆使しながら行えば特に対面時の時と変わらず会議はしていた。\n\nストーリーにポイント見積もりする際、対面時は指を出してポイント見積もりしていたがオンラインの場合、特にハングアウトだと画面分割に収まらない人が出てきて一斉に見積もりを確認できないため、共通のスプレッドシートを用意してプルダウンでポイントを選ぶようになった。特にやりにくさはない\n\n### POのリリース判断\n\nPO受け入れというイベントがあり、スプリント内で開発した成果物のデモをしてリリース判断をPOに確認してもらうMTG。場合によってはリリースできないという判断もPOが決定する\n\nデモする人が画面共有して説明するやり方は対面時と特に変わらないので問題はない。ただし回線の問題などで動作が遅くなったりする可能性が考えられるので予め画面録画しておくとよさそう。\n\n### リリース作業\n\n手順が完結かつ自動化されているため1人でもリリース作業が可能。\n\nただし何かあった時のために画面共有はしておき必要に応じてチームで対応するのがよさそうと感じた。\n\n### レトロスペクティブ\n\nチームと全体のレトロがありそれぞれ毎週行っている。\n\n上記同様特に大きな問題はないが、発言のしにくさは人数が増えるとどうしても起きるのかなと思っている。またリアクションもハングアウトの場合、チャットしかないのでツラい。全体で振り返るときは対面の方がいいのではと感じた。\n\n### 普段の開発\n\n- 普通に出勤していた時からポモドーロで開発していたが、よりポモドーロするようになった。\n- バランスチェアが結構自分にはフィットしていてポモドーロ4回（2時間まで）続けても座れるが、それ以降は一回立ち上がらないと膝が痛くなる。\n- 子供が机や椅子の近くに寄ってくる場合もあるがそこまで集中力が切れることはない。\n\n## まとめ\n\n- 出社時と比べて開発の生産性はやや高いと感じる。\n- MTG時に発言していないけどマイクオンのままになっている人がいるときめちゃくちゃ気になる。\n- MTG時は発言以外はマイクは絶対ミュートにすることを徹底したい。\n    - 確かzoomだとスペースキー押している間は、ミュート解除あった。\n- なるべくレスは早く！","src/content/blog/2020/0418.md","c6b30aa067f4b296",{"html":548,"metadata":549},"\u003Cp>完全フルリモートでスクラム開発をしていて思った所感をメモする。\u003C/p>\n\u003Ch2 id=\"前提\">前提\u003C/h2>\n\u003Cul>\n\u003Cli>1スプリント1週間\u003C/li>\n\u003Cli>チーム全員が自宅からのフルリモートの状態\u003C/li>\n\u003Cli>スクラムといっても\u003Ca href=\"%5Bhttps://less.works/jp/less/principles/overview%5D(https://less.works/jp/less/principles/overview)\">LESS\u003C/a>というフレームワークを使って2チーム制で開発している。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"環境\">環境\u003C/h2>\n\u003Cp>自粛ムードになるちょっと前ぐらいから週4リモート週1出社というスタイルを取っていたのでリモート慣れはしていたが、今後続く可能性もあるとのことだったので、以下を購した。\u003C/p>\n\u003Cul>\n\u003Cli>LG モニター ディスプレイ 32ML600M-B 31.5インチ\u003C/li>\n\u003Cli>サンワダイレクト シンプルワークデスク\u003C/li>\n\u003Cli>サンワダイレクト バランスチェア\u003C/li>\n\u003C/ul>\n\u003Cp>結果こんな感じになった。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">明日からここが仕事場 \u003Ca href=\"[https://t.co/aRXJ0orRv3](https://t.co/aRXJ0orRv3)\">[pic.twitter.com/aRXJ0orRv3](http://pic.twitter.com/aRXJ0orRv3)\u003C/a>\u003C/p>— Ryo Katsuse (@RyoEnter) \u003Ca href=\"[https://twitter.com/RyoEnter/status/1246652172441243650?ref_src=twsrc^tfw](https://twitter.com/RyoEnter/status/1246652172441243650?ref_src=twsrc%5Etfw)\">April 5, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>開発中は特に問題なく作業できている。\u003C/p>\n\u003Cp>ただ、元々部屋が狭いので家族が近くにいたりする。MTG時や、子供が昼寝する時間などは部屋を移動したりして、対応するしかないのは若干のストレスだ。\u003C/p>\n\u003Ch2 id=\"コミュニケーション\">コミュニケーション\u003C/h2>\n\u003Cul>\n\u003Cli>基本的にはSlackを使って行っている（朝のデイリースクラムや簡単な仕様相談などもSlackの通話機能でやっている）\u003C/li>\n\u003Cli>スクラムイベントのMTGについてはハングアウト。\u003C/li>\n\u003Cli>それ以外に雑談タイムや、15時になったらおやつタイムなどをハングアウト上で行っている。\u003C/li>\n\u003C/ul>\n\u003Cp>※zoomも用意されているが諸事情によりあまり使われない。\u003C/p>\n\u003Cp>対面時と比べてコミュニケーションが、取りにくいというのは自分は大きな違いは感じなかった。\u003C/p>\n\u003Cp>ただチームメンバー内では「急に質問するハードルが高くなった」「チャットだと言葉尻がキツく感じる」「認識のズレがおきそう」などの課題も出た。Tryとしては\u003C/p>\n\u003Cul>\n\u003Cli>「質問が来ること自体はチームメンバーが全員がウェルカムな環境」という共通認識を持つこと。\u003C/li>\n\u003Cli>スタンプを多めに使うや、出勤退勤時今日の自分の調子を天気で表現してみる。\u003C/li>\n\u003Cli>認識のズレが起こりそうなら通話に切り替える\u003C/li>\n\u003C/ul>\n\u003Cp>など様々なアプローチを取ることで少しでも心理的安全性を高める努力をしていく。\u003C/p>\n\u003Ch2 id=\"スクラムイベント\">スクラムイベント\u003C/h2>\n\u003Ch3 id=\"スプリントプランニング\">スプリントプランニング\u003C/h3>\n\u003Cp>対面の時と特に変わらず出来ていると思う。別途メンバーに本スプリントで対応するストーリーで相談したいことがある場合は、そのまま通話を続けるなどして早め早めの対応が求められる。\u003C/p>\n\u003Ch3 id=\"デイリースクラム\">デイリースクラム\u003C/h3>\n\u003Cul>\n\u003Cli>毎朝の進捗報告などで、しっかりと行う。\u003C/li>\n\u003Cli>この時点でチーム内でヘルプが必要かなどを確認する。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"リファインメント\">リファインメント\u003C/h3>\n\u003Cp>エンジニアは任意参加なので出なくてもよい。不参加の場合は開発に専念できる。\u003C/p>\n\u003Cp>参加した感じ画面共有を駆使しながら行えば特に対面時の時と変わらず会議はしていた。\u003C/p>\n\u003Cp>ストーリーにポイント見積もりする際、対面時は指を出してポイント見積もりしていたがオンラインの場合、特にハングアウトだと画面分割に収まらない人が出てきて一斉に見積もりを確認できないため、共通のスプレッドシートを用意してプルダウンでポイントを選ぶようになった。特にやりにくさはない\u003C/p>\n\u003Ch3 id=\"poのリリース判断\">POのリリース判断\u003C/h3>\n\u003Cp>PO受け入れというイベントがあり、スプリント内で開発した成果物のデモをしてリリース判断をPOに確認してもらうMTG。場合によってはリリースできないという判断もPOが決定する\u003C/p>\n\u003Cp>デモする人が画面共有して説明するやり方は対面時と特に変わらないので問題はない。ただし回線の問題などで動作が遅くなったりする可能性が考えられるので予め画面録画しておくとよさそう。\u003C/p>\n\u003Ch3 id=\"リリース作業\">リリース作業\u003C/h3>\n\u003Cp>手順が完結かつ自動化されているため1人でもリリース作業が可能。\u003C/p>\n\u003Cp>ただし何かあった時のために画面共有はしておき必要に応じてチームで対応するのがよさそうと感じた。\u003C/p>\n\u003Ch3 id=\"レトロスペクティブ\">レトロスペクティブ\u003C/h3>\n\u003Cp>チームと全体のレトロがありそれぞれ毎週行っている。\u003C/p>\n\u003Cp>上記同様特に大きな問題はないが、発言のしにくさは人数が増えるとどうしても起きるのかなと思っている。またリアクションもハングアウトの場合、チャットしかないのでツラい。全体で振り返るときは対面の方がいいのではと感じた。\u003C/p>\n\u003Ch3 id=\"普段の開発\">普段の開発\u003C/h3>\n\u003Cul>\n\u003Cli>普通に出勤していた時からポモドーロで開発していたが、よりポモドーロするようになった。\u003C/li>\n\u003Cli>バランスチェアが結構自分にはフィットしていてポモドーロ4回（2時間まで）続けても座れるが、それ以降は一回立ち上がらないと膝が痛くなる。\u003C/li>\n\u003Cli>子供が机や椅子の近くに寄ってくる場合もあるがそこまで集中力が切れることはない。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"まとめ\">まとめ\u003C/h2>\n\u003Cul>\n\u003Cli>出社時と比べて開発の生産性はやや高いと感じる。\u003C/li>\n\u003Cli>MTG時に発言していないけどマイクオンのままになっている人がいるときめちゃくちゃ気になる。\u003C/li>\n\u003Cli>MTG時は発言以外はマイクは絶対ミュートにすることを徹底したい。\n\u003Cul>\n\u003Cli>確かzoomだとスペースキー押している間は、ミュート解除あった。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>なるべくレスは早く！\u003C/li>\n\u003C/ul>",{"headings":550,"localImagePaths":575,"remoteImagePaths":576,"frontmatter":541,"imagePaths":577},[551,553,555,557,559,561,563,565,568,570,572,574],{"depth":22,"slug":552,"text":552},"前提",{"depth":22,"slug":554,"text":554},"環境",{"depth":22,"slug":556,"text":556},"コミュニケーション",{"depth":22,"slug":558,"text":558},"スクラムイベント",{"depth":29,"slug":560,"text":560},"スプリントプランニング",{"depth":29,"slug":562,"text":562},"デイリースクラム",{"depth":29,"slug":564,"text":564},"リファインメント",{"depth":29,"slug":566,"text":567},"poのリリース判断","POのリリース判断",{"depth":29,"slug":569,"text":569},"リリース作業",{"depth":29,"slug":571,"text":571},"レトロスペクティブ",{"depth":29,"slug":573,"text":573},"普段の開発",{"depth":22,"slug":76,"text":76},[],[],[],"2020/0418.md","2020/0426-2",{"id":579,"data":581,"body":583,"filePath":584,"digest":585,"rendered":586,"legacyId":600},{"title":582,"publishDate":515},"treeコマンドを使ってみる","ちょっと調べたことをまとめた。\n\n極稀に今のディレクトリの階層を調べたり、共有したりすることあるのでtreeコマンドを使うことがあるけど、\nどういうオプションがあるのか分かっていなかったので色々実行してみた。\n\n## Mac環境のtreeコマンド\n\n以下でインストール\n\n```shell\nbrew install tree\n```\n\nこれでtreeコマンドが打てるようになる。\n\n\n## 階層の指定\n何階層まで出力するかを指定できる\n\n```shell\ntree -L 2 // 2階層まで出力\n```\n\n\n## 階層の除外\nフロントエンドやっていると必ずといっていい程```node_modules```がいる。こいつは出力したくないので以下のように除外できる\n\n```shell\ntree -I \"node_modules\"\n```\n\nただしこれだと静的ビルドしたstaticファイルとか余計な出力がありそうなので先程の階層の指定オプションもプラスする。\n\n```shell\ntree -I \"node_modules\" -L 2\n```\n\nさらにディレクトリだけ出力したい場合は以下のように```-d```のオプションをつける\n\n```shell\ntree -I \"node_modules\" -L 2 -d\n```","src/content/blog/2020/0426-2.md","b6c9d7fbbda4b31f",{"html":587,"metadata":588},"\u003Cp>ちょっと調べたことをまとめた。\u003C/p>\n\u003Cp>極稀に今のディレクトリの階層を調べたり、共有したりすることあるのでtreeコマンドを使うことがあるけど、\nどういうオプションがあるのか分かっていなかったので色々実行してみた。\u003C/p>\n\u003Ch2 id=\"mac環境のtreeコマンド\">Mac環境のtreeコマンド\u003C/h2>\n\u003Cp>以下でインストール\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">brew \u003Cspan class=\"token function\">install\u003C/span> tree\n\u003C/code>\u003C/pre>\n\u003Cp>これでtreeコマンドが打てるようになる。\u003C/p>\n\u003Ch2 id=\"階層の指定\">階層の指定\u003C/h2>\n\u003Cp>何階層まで出力するかを指定できる\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">tree \u003Cspan class=\"token parameter variable\">-L\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> // \u003Cspan class=\"token number\">2\u003C/span>階層まで出力\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"階層の除外\">階層の除外\u003C/h2>\n\u003Cp>フロントエンドやっていると必ずといっていい程\u003Ccode>node_modules\u003C/code>がいる。こいつは出力したくないので以下のように除外できる\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">tree \u003Cspan class=\"token parameter variable\">-I\u003C/span> \u003Cspan class=\"token string\">\"node_modules\"\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>ただしこれだと静的ビルドしたstaticファイルとか余計な出力がありそうなので先程の階層の指定オプションもプラスする。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">tree \u003Cspan class=\"token parameter variable\">-I\u003C/span> \u003Cspan class=\"token string\">\"node_modules\"\u003C/span> \u003Cspan class=\"token parameter variable\">-L\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>さらにディレクトリだけ出力したい場合は以下のように\u003Ccode>-d\u003C/code>のオプションをつける\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">tree \u003Cspan class=\"token parameter variable\">-I\u003C/span> \u003Cspan class=\"token string\">\"node_modules\"\u003C/span> \u003Cspan class=\"token parameter variable\">-L\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token parameter variable\">-d\u003C/span>\n\u003C/code>\u003C/pre>",{"headings":589,"localImagePaths":597,"remoteImagePaths":598,"frontmatter":581,"imagePaths":599},[590,593,595],{"depth":22,"slug":591,"text":592},"mac環境のtreeコマンド","Mac環境のtreeコマンド",{"depth":22,"slug":594,"text":594},"階層の指定",{"depth":22,"slug":596,"text":596},"階層の除外",[],[],[],"2020/0426-2.md","2020/0505",{"id":601,"data":603,"body":606,"filePath":607,"digest":608,"rendered":609,"legacyId":636},{"title":604,"publishDate":605},"【書評】Teem Geek","2020-05-05","積ん読状態だったので読んだ。\n\n少し古めの本ではあるが、今でも内容的に刺さる部分が多かった。\n\nGoogleのエンジニアが実践しているギークなチームとして、日々開発しているときに注意していることが書かれている。\n\n## HRT\nこの言葉は前の前の職場で聴いたことがあったけど意味は良く分かっていなかった。\n\nHRTとは謙虚（Humility）、尊敬（Respect）、信頼（Trust）の頭文字を取ったもの。この本が一番訴えたいHRT精神である。\n\n次のような一節があった。\n\n> あらゆる人間関係の衝突は、謙虚・尊敬・信頼の欠如によるものだ\n\nなるほど確かにそうだと思った。それぞれ以下のような説明をしていた。\n\n### 謙虚（Humility）\n自分が常に絶対に正しいわけでもない。常に自分を改善しよう。\n\n### 尊敬（Respect）\n一緒に働く人のことを心から思いやる。そしてスキルや能力に対してちゃんと評価しよう。\n\n### 信頼（Trust）\n自分以外の人は有能であることを信じ仕事を任せられるような状態を作ろう\n\n\n当たり前のようで当たり前にできないというか、常に忘れず行動したいと改めて思った。この本は正直これだけでも十分な価値があるが読み進めていくと、具体的にどうしていくかが書かれている。\n\n### チームメンバーに対して\n- コードレビューなど非対面でのコミュニケーションでは絵文字などを使う\n- 命令ではなく提案を心がける。例えば「〜してください」ではなく「〜してはどうでしょう。」などの言い方に変える。\n- 断定しない\n\nコードレビュー時にいつも思うことがあって \n> 「指摘事項を修正しました。」\n\nって言われるといつも悲しい気持ちになっていた。\n自分としては指摘したつもりはなく提案をしたのに。。みたいな感情になることがあった。多分相手の尊敬が足りなかったとか\nコミュニケーションが若干伝わっていないとかがあるんだなとこの本を読んで改めて振り返った。\n\n## 有害な人への対策\nチームにとって有害な人がいた場合の対策についても書かれていた。どんな人が有害なのかというと\n\n- エゴが強い人\n- 完璧主義\n- 何かについて要求する人\n\nなどがある。\n\n対策としては、これも当たり前のようだが、\n- チームの目標ミッションを決めて共有する\n- すべての情報を可能な限りオープンにする\n- マナーやルールを決める（特に非対面）\n\nみたいなことがある。特に可能な限りオープンにするというは凄い大事なことだと思った。\n\n例えばSlackなどがいい例で、プライベートチャンネルやDMなどは基本非推奨にするべきなのは有害な人への対策にもなる。新参者が入ったときに、\nやり取りが開示されているのと開示されていないとでは、モチベーションや今後の会社での過ごし方を決めることができるので会社にとってもメリットだと思うし、\n今コロナで非対面でのコミュニケーションが、当たり前になのでオープンではい社内政治が、行われている企業は生き残れないとさえ思った。\n\n対策をしてもまだ有害だと感じるときは最終的に追い出してもいいと本の中では言っていた。\n\n## 非エンジニアとの関わり方\nエンジニアは自分のことだけやっていればOKという考えはあるし、自分もこの気持よくわかる。でも以下のように振る舞うと尚良い。\n特に対マネージャーとかかな。\n\n- 大人らしく振る舞う\n- 質問をしてみる\n- 適宜報告する\n\n-特に適宜報告はtimesチャンネル的な感じで、定期的につぶやいて「ああこいつ仕事してるな」と思わせることが大事。マイクロマネジメント回避策にもなる。\n- 自分を売り込むことも大事。\n- ときには逃げることも大事だと言っている\n\n## マネジメントの仕方\nなんとなくマネージャーぽいことを初めてしまった方にどうすればいいのかも触れていた。\n\n- サーバントリーダーになることが重要\n  - HRTの雰囲気を作り出して支援する\n  - 差し入れとかをする\n  - マイクロマネジメントをしない\n  - チームの合意形成を全力で支援する\n\nなどが挙げられる。つまり、チームに奉仕活動をしていく。\n\n特にマイクロマネジメントだけが絶対にやらないようにする。\n\n自分もなんちゃってリーダーとか、経験あるけど自分の価値観を押し付けても仕方がないのは分かっているし\n例えチームのメンバーがサボっていてもぶっちゃけ気にしないタイプだ。\n\nチームの指針に外れそうになったり議論が変な方向になりそうなときにそっと支える程度なことしか意識していない。自分に足りないのは、\nネガティブなフィードバックをうまい具合に伝えるやり方とかかな。\n\nエゴをなくして、いつでもウェルカムだよという雰囲気作りがうまくできるといいチームになりそうだなと感じた。","src/content/blog/2020/0505.md","b653045e9ec88158",{"html":610,"metadata":611},"\u003Cp>積ん読状態だったので読んだ。\u003C/p>\n\u003Cp>少し古めの本ではあるが、今でも内容的に刺さる部分が多かった。\u003C/p>\n\u003Cp>Googleのエンジニアが実践しているギークなチームとして、日々開発しているときに注意していることが書かれている。\u003C/p>\n\u003Ch2 id=\"hrt\">HRT\u003C/h2>\n\u003Cp>この言葉は前の前の職場で聴いたことがあったけど意味は良く分かっていなかった。\u003C/p>\n\u003Cp>HRTとは謙虚（Humility）、尊敬（Respect）、信頼（Trust）の頭文字を取ったもの。この本が一番訴えたいHRT精神である。\u003C/p>\n\u003Cp>次のような一節があった。\u003C/p>\n\u003Cblockquote>\n\u003Cp>あらゆる人間関係の衝突は、謙虚・尊敬・信頼の欠如によるものだ\u003C/p>\n\u003C/blockquote>\n\u003Cp>なるほど確かにそうだと思った。それぞれ以下のような説明をしていた。\u003C/p>\n\u003Ch3 id=\"謙虚humility\">謙虚（Humility）\u003C/h3>\n\u003Cp>自分が常に絶対に正しいわけでもない。常に自分を改善しよう。\u003C/p>\n\u003Ch3 id=\"尊敬respect\">尊敬（Respect）\u003C/h3>\n\u003Cp>一緒に働く人のことを心から思いやる。そしてスキルや能力に対してちゃんと評価しよう。\u003C/p>\n\u003Ch3 id=\"信頼trust\">信頼（Trust）\u003C/h3>\n\u003Cp>自分以外の人は有能であることを信じ仕事を任せられるような状態を作ろう\u003C/p>\n\u003Cp>当たり前のようで当たり前にできないというか、常に忘れず行動したいと改めて思った。この本は正直これだけでも十分な価値があるが読み進めていくと、具体的にどうしていくかが書かれている。\u003C/p>\n\u003Ch3 id=\"チームメンバーに対して\">チームメンバーに対して\u003C/h3>\n\u003Cul>\n\u003Cli>コードレビューなど非対面でのコミュニケーションでは絵文字などを使う\u003C/li>\n\u003Cli>命令ではなく提案を心がける。例えば「〜してください」ではなく「〜してはどうでしょう。」などの言い方に変える。\u003C/li>\n\u003Cli>断定しない\u003C/li>\n\u003C/ul>\n\u003Cp>コードレビュー時にいつも思うことがあって\u003C/p>\n\u003Cblockquote>\n\u003Cp>「指摘事項を修正しました。」\u003C/p>\n\u003C/blockquote>\n\u003Cp>って言われるといつも悲しい気持ちになっていた。\n自分としては指摘したつもりはなく提案をしたのに。。みたいな感情になることがあった。多分相手の尊敬が足りなかったとか\nコミュニケーションが若干伝わっていないとかがあるんだなとこの本を読んで改めて振り返った。\u003C/p>\n\u003Ch2 id=\"有害な人への対策\">有害な人への対策\u003C/h2>\n\u003Cp>チームにとって有害な人がいた場合の対策についても書かれていた。どんな人が有害なのかというと\u003C/p>\n\u003Cul>\n\u003Cli>エゴが強い人\u003C/li>\n\u003Cli>完璧主義\u003C/li>\n\u003Cli>何かについて要求する人\u003C/li>\n\u003C/ul>\n\u003Cp>などがある。\u003C/p>\n\u003Cp>対策としては、これも当たり前のようだが、\u003C/p>\n\u003Cul>\n\u003Cli>チームの目標ミッションを決めて共有する\u003C/li>\n\u003Cli>すべての情報を可能な限りオープンにする\u003C/li>\n\u003Cli>マナーやルールを決める（特に非対面）\u003C/li>\n\u003C/ul>\n\u003Cp>みたいなことがある。特に可能な限りオープンにするというは凄い大事なことだと思った。\u003C/p>\n\u003Cp>例えばSlackなどがいい例で、プライベートチャンネルやDMなどは基本非推奨にするべきなのは有害な人への対策にもなる。新参者が入ったときに、\nやり取りが開示されているのと開示されていないとでは、モチベーションや今後の会社での過ごし方を決めることができるので会社にとってもメリットだと思うし、\n今コロナで非対面でのコミュニケーションが、当たり前になのでオープンではい社内政治が、行われている企業は生き残れないとさえ思った。\u003C/p>\n\u003Cp>対策をしてもまだ有害だと感じるときは最終的に追い出してもいいと本の中では言っていた。\u003C/p>\n\u003Ch2 id=\"非エンジニアとの関わり方\">非エンジニアとの関わり方\u003C/h2>\n\u003Cp>エンジニアは自分のことだけやっていればOKという考えはあるし、自分もこの気持よくわかる。でも以下のように振る舞うと尚良い。\n特に対マネージャーとかかな。\u003C/p>\n\u003Cul>\n\u003Cli>大人らしく振る舞う\u003C/li>\n\u003Cli>質問をしてみる\u003C/li>\n\u003Cli>適宜報告する\u003C/li>\n\u003C/ul>\n\u003Cp>-特に適宜報告はtimesチャンネル的な感じで、定期的につぶやいて「ああこいつ仕事してるな」と思わせることが大事。マイクロマネジメント回避策にもなる。\u003C/p>\n\u003Cul>\n\u003Cli>自分を売り込むことも大事。\u003C/li>\n\u003Cli>ときには逃げることも大事だと言っている\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"マネジメントの仕方\">マネジメントの仕方\u003C/h2>\n\u003Cp>なんとなくマネージャーぽいことを初めてしまった方にどうすればいいのかも触れていた。\u003C/p>\n\u003Cul>\n\u003Cli>サーバントリーダーになることが重要\n\u003Cul>\n\u003Cli>HRTの雰囲気を作り出して支援する\u003C/li>\n\u003Cli>差し入れとかをする\u003C/li>\n\u003Cli>マイクロマネジメントをしない\u003C/li>\n\u003Cli>チームの合意形成を全力で支援する\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>などが挙げられる。つまり、チームに奉仕活動をしていく。\u003C/p>\n\u003Cp>特にマイクロマネジメントだけが絶対にやらないようにする。\u003C/p>\n\u003Cp>自分もなんちゃってリーダーとか、経験あるけど自分の価値観を押し付けても仕方がないのは分かっているし\n例えチームのメンバーがサボっていてもぶっちゃけ気にしないタイプだ。\u003C/p>\n\u003Cp>チームの指針に外れそうになったり議論が変な方向になりそうなときにそっと支える程度なことしか意識していない。自分に足りないのは、\nネガティブなフィードバックをうまい具合に伝えるやり方とかかな。\u003C/p>\n\u003Cp>エゴをなくして、いつでもウェルカムだよという雰囲気作りがうまくできるといいチームになりそうだなと感じた。\u003C/p>",{"headings":612,"localImagePaths":633,"remoteImagePaths":634,"frontmatter":603,"imagePaths":635},[613,616,619,622,625,627,629,631],{"depth":22,"slug":614,"text":615},"hrt","HRT",{"depth":29,"slug":617,"text":618},"謙虚humility","謙虚（Humility）",{"depth":29,"slug":620,"text":621},"尊敬respect","尊敬（Respect）",{"depth":29,"slug":623,"text":624},"信頼trust","信頼（Trust）",{"depth":29,"slug":626,"text":626},"チームメンバーに対して",{"depth":22,"slug":628,"text":628},"有害な人への対策",{"depth":22,"slug":630,"text":630},"非エンジニアとの関わり方",{"depth":22,"slug":632,"text":632},"マネジメントの仕方",[],[],[],"2020/0505.md","2020/0514",{"id":637,"data":639,"body":642,"filePath":643,"digest":644,"rendered":645,"legacyId":666},{"title":640,"publishDate":641},"Denoがリリースされたので触ってみる","2020-05-14","Denoのv1.0が出たので、雑に触ってみた。\n\n## Deno\n- Node.jsの作者が作った新しいJavaScripとTypeScriptのランタイム\n- Typescriptがビルトイン\n- package.jsonのようなパッケージ管理はなく、すべてURLでインポートする。\n- テストもフォーマッターも入っている。\n- 読み方はディーノだと思う。\n- コアの部分がRust\n\nhttps://deno.land/v1\n\n\n## インストール\n自分は、macなのでhomebrew形式でインストールしてみる。\n\n```shell\nbrew install deno\n```\n\nその他のインストール方法は以下を参照。\n\nhttps://deno.land/manual/getting_started/installation\n\n\n## Hello world\n以下コマンドを実行する\n\n```shell\n$ deno run https://deno.land/std/examples/welcome.ts\n\nWelcome to Deno 🦕\n```\n\n恐竜が可愛い。\n\n- 公式ではrunコマンドがついているので付けた方がいいのかも。後ほど実行したサーバー起動のコマンドはrunなしだと失敗した。\n\n\n## 安全なランタイム\n- 以下のコマンドを実行する\n\n```shell\ndeno run https://deno.land/std/examples/curl.ts https://example.com\n```\n\nただこれだとエラーが返ってくる。Denoは安全なランタイムが売りなので、許可フラグをつけて実行しないといけない。\nこれを利用して自分のブログRyo Katsuse BlogのHTMLを返すコマンドを実行する\n\n```shell\ndeno run --allow-net=ryokatsu.dev https://deno.land/std/examples/curl.ts https://ryokatsu.dev/\n```\n\n長くなるから結果は記載しないが、レンダリング後のHTMLが返ってくるのが確認できた。\n\n\n## サーバーの起動\n公式にあるサンプルをもとにサーバーを起動してみる。\n\n適当なserver.tsファイルを作成する。\n\n```javascript\nimport { serve } from \"https://deno.land/std@0.50.0/http/server.ts\";\nconst s = serve({ port: 8000 });\nconsole.log(\"http://localhost:8000/\");\nfor await (const req of s) {\n  req.respond({ body: \"Hello World\\n\" });\n}\n\n```\n\n以下コマンドを実行する。\n\n```shell\ndeno run  --allow-net server.ts\n```\n\nこれでサーバーが起動できる。ちなみにNode.jsだと以下。\n\n```javascript\nvar http=require('http');\nvar server = http.createServer(function(req, res) {\n   res.writeHead(200, {'ContentType’: 'text/plain'});\n   res.end('HelloWorld');\n});\nserver.listen(8000);\n```\n\n## その他\n- 現時点でNode.jsから移行することは厳しいと思う。\n  - ブログのボトルネックにも記載があったけどTSCが遅いみたい。今後型チェックはRustになる。\n  - package管理しているものの中にDenoに置き換え可能なものが揃っていなそう。\n- フロントエンド開発はまだ厳しい（Deno澤さんも何かのLTで発言してた。）\n\n## TODO\n- どんなAPIがあるか確認してみる","src/content/blog/2020/0514.md","1401b65b215119f4",{"html":646,"metadata":647},"\u003Cp>Denoのv1.0が出たので、雑に触ってみた。\u003C/p>\n\u003Ch2 id=\"deno\">Deno\u003C/h2>\n\u003Cul>\n\u003Cli>Node.jsの作者が作った新しいJavaScripとTypeScriptのランタイム\u003C/li>\n\u003Cli>Typescriptがビルトイン\u003C/li>\n\u003Cli>package.jsonのようなパッケージ管理はなく、すべてURLでインポートする。\u003C/li>\n\u003Cli>テストもフォーマッターも入っている。\u003C/li>\n\u003Cli>読み方はディーノだと思う。\u003C/li>\n\u003Cli>コアの部分がRust\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ca href=\"https://deno.land/v1\">https://deno.land/v1\u003C/a>\u003C/p>\n\u003Ch2 id=\"インストール\">インストール\u003C/h2>\n\u003Cp>自分は、macなのでhomebrew形式でインストールしてみる。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">brew \u003Cspan class=\"token function\">install\u003C/span> deno\n\u003C/code>\u003C/pre>\n\u003Cp>その他のインストール方法は以下を参照。\u003C/p>\n\u003Cp>\u003Ca href=\"https://deno.land/manual/getting_started/installation\">https://deno.land/manual/getting_started/installation\u003C/a>\u003C/p>\n\u003Ch2 id=\"hello-world\">Hello world\u003C/h2>\n\u003Cp>以下コマンドを実行する\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">$ deno run https://deno.land/std/examples/welcome.ts\n\nWelcome to Deno 🦕\n\u003C/code>\u003C/pre>\n\u003Cp>恐竜が可愛い。\u003C/p>\n\u003Cul>\n\u003Cli>公式ではrunコマンドがついているので付けた方がいいのかも。後ほど実行したサーバー起動のコマンドはrunなしだと失敗した。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"安全なランタイム\">安全なランタイム\u003C/h2>\n\u003Cul>\n\u003Cli>以下のコマンドを実行する\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">deno run https://deno.land/std/examples/curl.ts https://example.com\n\u003C/code>\u003C/pre>\n\u003Cp>ただこれだとエラーが返ってくる。Denoは安全なランタイムが売りなので、許可フラグをつけて実行しないといけない。\nこれを利用して自分のブログRyo Katsuse BlogのHTMLを返すコマンドを実行する\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">deno run --allow-net\u003Cspan class=\"token operator\">=\u003C/span>ryokatsu.dev https://deno.land/std/examples/curl.ts https://ryokatsu.dev/\n\u003C/code>\u003C/pre>\n\u003Cp>長くなるから結果は記載しないが、レンダリング後のHTMLが返ってくるのが確認できた。\u003C/p>\n\u003Ch2 id=\"サーバーの起動\">サーバーの起動\u003C/h2>\n\u003Cp>公式にあるサンプルをもとにサーバーを起動してみる。\u003C/p>\n\u003Cp>適当なserver.tsファイルを作成する。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> serve \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">\"https://deno.land/std@0.50.0/http/server.ts\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> s \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">serve\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">port\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">8000\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nconsole\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"http://localhost:8000/\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token keyword\">await\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">const\u003C/span> req \u003Cspan class=\"token keyword\">of\u003C/span> s\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  req\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">respond\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">body\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"Hello World\\n\"\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>以下コマンドを実行する。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">deno run  --allow-net server.ts\n\u003C/code>\u003C/pre>\n\u003Cp>これでサーバーが起動できる。ちなみにNode.jsだと以下。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">var\u003C/span> http\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token function\">require\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'http'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> server \u003Cspan class=\"token operator\">=\u003C/span> http\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">createServer\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">function\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">req\u003Cspan class=\"token punctuation\">,\u003C/span> res\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n   res\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">writeHead\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">200\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token string\">'ContentType’: '\u003C/span>text\u003Cspan class=\"token operator\">/\u003C/span>plain'\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n   res\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">end\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'HelloWorld'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\nserver\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">listen\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">8000\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"その他\">その他\u003C/h2>\n\u003Cul>\n\u003Cli>現時点でNode.jsから移行することは厳しいと思う。\n\u003Cul>\n\u003Cli>ブログのボトルネックにも記載があったけどTSCが遅いみたい。今後型チェックはRustになる。\u003C/li>\n\u003Cli>package管理しているものの中にDenoに置き換え可能なものが揃っていなそう。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>フロントエンド開発はまだ厳しい（Deno澤さんも何かのLTで発言してた。）\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"todo\">TODO\u003C/h2>\n\u003Cul>\n\u003Cli>どんなAPIがあるか確認してみる\u003C/li>\n\u003C/ul>",{"headings":648,"localImagePaths":663,"remoteImagePaths":664,"frontmatter":639,"imagePaths":665},[649,652,654,657,659,661,662],{"depth":22,"slug":650,"text":651},"deno","Deno",{"depth":22,"slug":653,"text":653},"インストール",{"depth":22,"slug":655,"text":656},"hello-world","Hello world",{"depth":22,"slug":658,"text":658},"安全なランタイム",{"depth":22,"slug":660,"text":660},"サーバーの起動",{"depth":22,"slug":534,"text":534},{"depth":22,"slug":216,"text":217},[],[],[],"2020/0514.md","2020/0524",{"id":667,"data":669,"body":672,"filePath":673,"digest":674,"rendered":675,"legacyId":684},{"title":670,"publishDate":671},"ブログにページネーションを導入した","2020-05-24","表題の通りブログにページネーションを追加した。\n\n公式に追加の仕方とチュートリアルがあるのでその通りにやれば、実装できる。\n\n[Adding Pagination](https://www.gatsbyjs.org/docs/adding-pagination/)\n\n## 方法\n\n ```/pages/index.tsx```をtemplate配下のディレクトリに変更する。\n\nその後```gatsby-node.js```に変更を加える。\n\n```jsx\n// Create blog-list pages\n  const posts = result.data.allMarkdownRemark.edges\n  const postsPerPage = 10\n  const numPages = Math.ceil(posts.length / postsPerPage)\n  Array.from({ length: numPages }).forEach((_, i) => {\n    createPage({\n      path: i === 0 ? `/blog` : `/blog/${i + 1}`,\n      component: path.resolve(\"./src/templates/blog-list-template.js\"),\n      context: {\n        limit: postsPerPage,\n        skip: i * postsPerPage,\n        numPages,\n        currentPage: i + 1,\n      },\n    })\n  })\n\n\n```\n\n- ```createPage```関数でページネーション用のページを作成するのに必要な情報を定義する\n  - 表示件数\n  - ページのパス\n  - ブログ記事の総数を計算して表示件数を割る計算\n- GraphQLで新たにlimitとskipを取得するようにcontext内に格納してあげる。\n\ntemplate配下に移動したindex.tsxのGraphQLでlimitとskipを取得する\n\n```jsx\nexport const blogListQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\n```\n\nページネーションするコンポーネントを表示する。\n\n\n```jsx\n\n\u003Cdiv className=\"pagenation\">\n  {!isFirst && (\n    \u003CLink to={prevPage} rel=\"prev\">\n      &lt; Prev\n    \u003C/Link>\n  )}\n  {!isLast && (\n    \u003CLink to={nextPage} rel=\"next\" className=\"pagenation-next\">\n      Next &gt;\n    \u003C/Link>\n  )}\n\u003C/div>\n\n```\n\nちなみに以下のようにする1ページずつ遷移ではなくページ番号で遷移できるコンポーネントが実装できる。\n\n```jsx\n {Array.from({ length: numPages }, (_, i) => (\n  \u003CLink key={`pagination-number${i + 1}`} to={`/${i === 0 ? \"\" : i + 1}`}>\n    {i + 1}\n  \u003C/Link>\n))}\n\n```\n\n他にもプラグインを使用して実装する方法もある。参考になるブログは以下\n\n[gatsby-awesome-paginationでGatsbyにpaginationをつけた](https://www.terrier.dev/blog/2019/20190306231739-gatsby-awesome-pagination-gatsby-pagination/)","src/content/blog/2020/0524.md","76295103d117fd60",{"html":676,"metadata":677},"\u003Cp>表題の通りブログにページネーションを追加した。\u003C/p>\n\u003Cp>公式に追加の仕方とチュートリアルがあるのでその通りにやれば、実装できる。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.gatsbyjs.org/docs/adding-pagination/\">Adding Pagination\u003C/a>\u003C/p>\n\u003Ch2 id=\"方法\">方法\u003C/h2>\n\u003Cp>\u003Ccode>/pages/index.tsx\u003C/code>をtemplate配下のディレクトリに変更する。\u003C/p>\n\u003Cp>その後\u003Ccode>gatsby-node.js\u003C/code>に変更を加える。\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\">\u003Cspan class=\"token comment\">// Create blog-list pages\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> posts \u003Cspan class=\"token operator\">=\u003C/span> result\u003Cspan class=\"token punctuation\">.\u003C/span>data\u003Cspan class=\"token punctuation\">.\u003C/span>allMarkdownRemark\u003Cspan class=\"token punctuation\">.\u003C/span>edges\n  \u003Cspan class=\"token keyword\">const\u003C/span> postsPerPage \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> numPages \u003Cspan class=\"token operator\">=\u003C/span> Math\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">ceil\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>posts\u003Cspan class=\"token punctuation\">.\u003C/span>length \u003Cspan class=\"token operator\">/\u003C/span> postsPerPage\u003Cspan class=\"token punctuation\">)\u003C/span>\n  Array\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">from\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">length\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> numPages \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">_\u003Cspan class=\"token punctuation\">,\u003C/span> i\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token function\">createPage\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">path\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> i \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">0\u003C/span> \u003Cspan class=\"token operator\">?\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">/blog\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">/blog/\u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">component\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> path\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">resolve\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"./src/templates/blog-list-template.js\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token literal-property property\">context\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n        \u003Cspan class=\"token literal-property property\">limit\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> postsPerPage\u003Cspan class=\"token punctuation\">,\u003C/span>\n        \u003Cspan class=\"token literal-property property\">skip\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> i \u003Cspan class=\"token operator\">*\u003C/span> postsPerPage\u003Cspan class=\"token punctuation\">,\u003C/span>\n        numPages\u003Cspan class=\"token punctuation\">,\u003C/span>\n        \u003Cspan class=\"token literal-property property\">currentPage\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>\u003Ccode>createPage\u003C/code>関数でページネーション用のページを作成するのに必要な情報を定義する\n\u003Cul>\n\u003Cli>表示件数\u003C/li>\n\u003Cli>ページのパス\u003C/li>\n\u003Cli>ブログ記事の総数を計算して表示件数を割る計算\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>GraphQLで新たにlimitとskipを取得するようにcontext内に格納してあげる。\u003C/li>\n\u003C/ul>\n\u003Cp>template配下に移動したindex.tsxのGraphQLでlimitとskipを取得する\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\">\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> blogListQuery \u003Cspan class=\"token operator\">=\u003C/span> graphql\u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>ページネーションするコンポーネントを表示する。\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\">\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">className\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>pagenation\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n  \u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token operator\">!\u003C/span>isFirst \u003Cspan class=\"token operator\">&#x26;&#x26;\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Link\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">to\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>prevPage\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">rel\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>prev\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n      &#x26;lt; Prev\n    \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>\u003Cspan class=\"token class-name\">Link\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token plain-text\">\n  \u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token operator\">!\u003C/span>isLast \u003Cspan class=\"token operator\">&#x26;&#x26;\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Link\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">to\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>nextPage\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">rel\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>next\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">className\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>pagenation-next\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n      Next &#x26;gt;\n    \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>\u003Cspan class=\"token class-name\">Link\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>ちなみに以下のようにする1ページずつ遷移ではなくページ番号で遷移できるコンポーネントが実装できる。\u003C/p>\n\u003Cpre class=\"language-jsx\" data-language=\"jsx\">\u003Ccode is:raw=\"\" class=\"language-jsx\"> \u003Cspan class=\"token punctuation\">{\u003C/span>Array\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">from\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">length\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> numPages \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">_\u003Cspan class=\"token punctuation\">,\u003C/span> i\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Link\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">key\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">pagination-number\u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">to\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">/\u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>i \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token number\">0\u003C/span> \u003Cspan class=\"token operator\">?\u003C/span> \u003Cspan class=\"token string\">\"\"\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n    \u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>i \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token plain-text\">\n  \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>\u003Cspan class=\"token class-name\">Link\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>他にもプラグインを使用して実装する方法もある。参考になるブログは以下\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.terrier.dev/blog/2019/20190306231739-gatsby-awesome-pagination-gatsby-pagination/\">gatsby-awesome-paginationでGatsbyにpaginationをつけた\u003C/a>\u003C/p>",{"headings":678,"localImagePaths":681,"remoteImagePaths":682,"frontmatter":669,"imagePaths":683},[679],{"depth":22,"slug":680,"text":680},"方法",[],[],[],"2020/0524.md","2020/0506",{"id":685,"data":687,"body":690,"filePath":691,"digest":692,"rendered":693,"legacyId":716},{"title":688,"publishDate":689},"【書評】プログラミングTypeScript 〜第6章〜","2020-05-06","O'Reillyから発売されている「プログラミングTypeScript」の書評。\n\nhttps://www.oreilly.co.jp/books/9784873119045/\n\n\n## 6章 高度な型\nこの章は、色々な型の拡充や、絞り込みなどを扱った章のためリファレンスっぽい内容だったので軽くそれぞれの単語をおさらいだけする。\n\n## サブタイプ\nA、Bという2つの型があり、BがAのサブタイプ(派生型)である場合、Aが要求されるところ\nではどこでも、Bを安全に使うことができる。\n\n- 配列はオブジェクトのサブタイプ\n- タプルは配列のサブタイプ\n- すべてのものは anyのサブタイプです\n- neverはすべてのもののサブタイプです\n\n## 変性\nパラメータ化されたジェネリック型とか、複雑な型については以下のようになっている。\n\n- 不変性(invariance)\n  - Tそのものを必要とする。 \n- 共変性(covariance)\n  - \u003C:Tであるものを必要とする。 \n- 反変性(contravariance)\n  - スーパータイプ（>:Tであるもの）を必要とする。\n- 双変性(bivariance)\n  - \u003C:Tまたは >:Tであれば OK。\n\n## 型の拡大\n型推論がどのように機能するかを理解するための鍵となるもの。より一般的な型を推論しすぎる傾向にあるので、\nプログラマーの作業はより簡 単になり、型チェッカーの不満を抑えるために費やす時間が少なくて済む\n\n```typescript\nlet a = 'x' // string\nlet b = 3  // number\nvar c = true // boolean \nconst d = {x: 3} // {x: number}\nenum E {X, Y, Z} let e = E.X \n```\n\n### const アサーション\nこれを使うと、宣言と同時に型の拡大を抑えることができる。\n\n## 型の絞り込み\ntypeof、instanceof、inなどを使って、型の絞り込みを行う。\n\nこの記事がわかりやすい\n\n[TypeScriptの型推論詳説](https://qiita.com/uhyo/items/6acb7f4ee73287d5dac0#%E6%9D%A1%E4%BB%B6%E5%88%86%E5%B2%90%E3%81%AB%E3%82%88%E3%82%8B%E5%9E%8B%E3%81%AE%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF)\n\n\n## 型アサーション\nBという型があり、「A \u003C: B \u003C: C」という関係がある場合、Bが実際にはAまたはCであることを型\nチェッカーに主張することができる。","src/content/blog/2020/0506.md","de836b818d6bdc97",{"html":694,"metadata":695},"\u003Cp>O’Reillyから発売されている「プログラミングTypeScript」の書評。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.oreilly.co.jp/books/9784873119045/\">https://www.oreilly.co.jp/books/9784873119045/\u003C/a>\u003C/p>\n\u003Ch2 id=\"6章-高度な型\">6章 高度な型\u003C/h2>\n\u003Cp>この章は、色々な型の拡充や、絞り込みなどを扱った章のためリファレンスっぽい内容だったので軽くそれぞれの単語をおさらいだけする。\u003C/p>\n\u003Ch2 id=\"サブタイプ\">サブタイプ\u003C/h2>\n\u003Cp>A、Bという2つの型があり、BがAのサブタイプ(派生型)である場合、Aが要求されるところ\nではどこでも、Bを安全に使うことができる。\u003C/p>\n\u003Cul>\n\u003Cli>配列はオブジェクトのサブタイプ\u003C/li>\n\u003Cli>タプルは配列のサブタイプ\u003C/li>\n\u003Cli>すべてのものは anyのサブタイプです\u003C/li>\n\u003Cli>neverはすべてのもののサブタイプです\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"変性\">変性\u003C/h2>\n\u003Cp>パラメータ化されたジェネリック型とか、複雑な型については以下のようになっている。\u003C/p>\n\u003Cul>\n\u003Cli>不変性(invariance)\n\u003Cul>\n\u003Cli>Tそのものを必要とする。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>共変性(covariance)\n\u003Cul>\n\u003Cli>&#x3C;:Tであるものを必要とする。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>反変性(contravariance)\n\u003Cul>\n\u003Cli>スーパータイプ（>:Tであるもの）を必要とする。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>双変性(bivariance)\n\u003Cul>\n\u003Cli>&#x3C;:Tまたは >:Tであれば OK。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"型の拡大\">型の拡大\u003C/h2>\n\u003Cp>型推論がどのように機能するかを理解するための鍵となるもの。より一般的な型を推論しすぎる傾向にあるので、\nプログラマーの作業はより簡 単になり、型チェッカーの不満を抑えるために費やす時間が少なくて済む\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">let\u003C/span> a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'x'\u003C/span> \u003Cspan class=\"token comment\">// string\u003C/span>\n\u003Cspan class=\"token keyword\">let\u003C/span> b \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>  \u003Cspan class=\"token comment\">// number\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> c \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span> \u003Cspan class=\"token comment\">// boolean \u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> d \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>x\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token comment\">// {x: number}\u003C/span>\n\u003Cspan class=\"token keyword\">enum\u003C/span> \u003Cspan class=\"token constant\">E\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token constant\">X\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token constant\">Y\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token constant\">Z\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">let\u003C/span> e \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token constant\">E\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token constant\">X\u003C/span> \n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"const-アサーション\">const アサーション\u003C/h3>\n\u003Cp>これを使うと、宣言と同時に型の拡大を抑えることができる。\u003C/p>\n\u003Ch2 id=\"型の絞り込み\">型の絞り込み\u003C/h2>\n\u003Cp>typeof、instanceof、inなどを使って、型の絞り込みを行う。\u003C/p>\n\u003Cp>この記事がわかりやすい\u003C/p>\n\u003Cp>\u003Ca href=\"https://qiita.com/uhyo/items/6acb7f4ee73287d5dac0#%E6%9D%A1%E4%BB%B6%E5%88%86%E5%B2%90%E3%81%AB%E3%82%88%E3%82%8B%E5%9E%8B%E3%81%AE%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF\">TypeScriptの型推論詳説\u003C/a>\u003C/p>\n\u003Ch2 id=\"型アサーション\">型アサーション\u003C/h2>\n\u003Cp>Bという型があり、「A &#x3C;: B &#x3C;: C」という関係がある場合、Bが実際にはAまたはCであることを型\nチェッカーに主張することができる。\u003C/p>",{"headings":696,"localImagePaths":713,"remoteImagePaths":714,"frontmatter":687,"imagePaths":715},[697,700,702,704,706,709,711],{"depth":22,"slug":698,"text":699},"6章-高度な型","6章 高度な型",{"depth":22,"slug":701,"text":701},"サブタイプ",{"depth":22,"slug":703,"text":703},"変性",{"depth":22,"slug":705,"text":705},"型の拡大",{"depth":29,"slug":707,"text":708},"const-アサーション","const アサーション",{"depth":22,"slug":710,"text":710},"型の絞り込み",{"depth":22,"slug":712,"text":712},"型アサーション",[],[],[],"2020/0506.md","2020/0615",{"id":717,"data":719,"body":722,"filePath":723,"digest":724,"rendered":725,"legacyId":748},{"title":720,"publishDate":721},"Remote.vue#1を視聴した感想","2020-06-15","当日はリアルタイムで視聴できなかったので、アーカイブを見直した感想\n\nhttps://lapras.connpass.com/event/177974/\n\n\n非常にレベルが高くて、自分が無能に思えた。その分知見が得られてよかった。\n\nトップバッターのkazu_ponさん以外は、***状態管理でVuexを使うな***話になっていた。\n\n### Native-ESM powered web dev build tool\n\nhttps://speakerdeck.com/kazupon/native-esm-powered-web-dev-build-tool\n\nViteはとにかく起動がめちゃ高速なdevserver。Evan You氏が徹夜して作ったものでVuePressを久しぶりに起動したら遅く辛かったのがきっかけらしい。\nrollupのAPIベースで作られているぽい。webpackとかの設定が面倒でサクッとビルド環境を用意したい時に使えそうだった。まだ正式リリースされていないので\nこれからテストとか、Vue以外でも使えるように対応などしていくらしい。ESbuildは、はやい。\n\n### ぼくのかんがえたさいきょうのVueあーきてくちゃ\n\nhttps://speakerdeck.com/slont/bokufalsekangaetasaikiyoufalsevueakitekutiya\n\nフロントの責務は```遷移と参照、権限と操作```はほんそれ。一覧画面とかAPIのfetchをしておくとか処理を共通化できそうとかは、現場でもあるあるなので意識はしている。\nenumsの話はなるほどと思った。具体的な事例があると使ってみたくなる。個人的にはunionとかで管理したほうがいいって思っているけど、namespaceをオーバーライしてメソッド\n生やすとか確かに便利そうとか思った。CompositionAPIを積極的に使われていて素敵。\n\n個人的にはextend辛いなとか思ったりしたけどmixinsフォルダ内での責務は確かにいいなと思った。\n\n\n### Vue.observable で状態管理\n\nhttps://speakerdeck.com/odanado/vue-observable-state-management\n\n存在は知っていたけど使ったことはないので知見が得られた。\n\n```Vue.config.errorHandler```はプラグインではなくネイティブだったのか。。この辺曖昧だったので勉強し直し。\n\n### NuxtでSSRしている時でもGoogle Optimize(ABテスト)を動かしたい\n\nhttps://speakerdeck.com/spicez/nuxttessrshi-nigoogleoptimize-abtesutoturu-woshi-itai\n\n面白かった。こういう内部コードを追っていく系は萌えるね。ハイドレーション後のイベントとしてNuxtでは```onNuxtReady```があるとのことでこれは初耳だった。SSRは結構罠ありそうだなと思った。\n\n### 終わりゆく Vue 2.x 時代の状態設計のアンサー - Vue 3 の Provider への期待\n\nhttps://speakerdeck.com/potato4d/the-last-architecture-of-the-vue-2-dot-x\n\nこれまでの発表内容を違うアプローチで話しつつ、総括するような、まとめるような内容だった。Injectはもちろん知っていたけど使うのは割と抵抗があった。結局Vuexとそこまで違いある？っていう自分がいたが\nその疑問が解決された内容ではあった。その他にモーダルとかで　Vuex管理するなって言っててTeleport使うケースなどなるほどと思った。ただのモーダルの状態を箱として管理するなら確かにありだと思った。\n\n## まとめ\n状態管理の話が多かった。\nそろそろVue3が出るけど[Vuex4では、型定義ファイルが付いている](https://github.com/vuejs/vuex/issues/994)ので、状態管理についてもっと幅を効かせた使い方ができるようにはなりそう。一方で結局はアーキテクチャ設計次第ではカオスにもなりうると思ったのでキャッチアップしないと行けないと感じた。","src/content/blog/2020/0615.md","9b09d5b95b0879b3",{"html":726,"metadata":727},"\u003Cp>当日はリアルタイムで視聴できなかったので、アーカイブを見直した感想\u003C/p>\n\u003Cp>\u003Ca href=\"https://lapras.connpass.com/event/177974/\">https://lapras.connpass.com/event/177974/\u003C/a>\u003C/p>\n\u003Cp>非常にレベルが高くて、自分が無能に思えた。その分知見が得られてよかった。\u003C/p>\n\u003Cp>トップバッターのkazu_ponさん以外は、\u003Cem>\u003Cstrong>状態管理でVuexを使うな\u003C/strong>\u003C/em>話になっていた。\u003C/p>\n\u003Ch3 id=\"native-esm-powered-web-dev-build-tool\">Native-ESM powered web dev build tool\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/kazupon/native-esm-powered-web-dev-build-tool\">https://speakerdeck.com/kazupon/native-esm-powered-web-dev-build-tool\u003C/a>\u003C/p>\n\u003Cp>Viteはとにかく起動がめちゃ高速なdevserver。Evan You氏が徹夜して作ったものでVuePressを久しぶりに起動したら遅く辛かったのがきっかけらしい。\nrollupのAPIベースで作られているぽい。webpackとかの設定が面倒でサクッとビルド環境を用意したい時に使えそうだった。まだ正式リリースされていないので\nこれからテストとか、Vue以外でも使えるように対応などしていくらしい。ESbuildは、はやい。\u003C/p>\n\u003Ch3 id=\"ぼくのかんがえたさいきょうのvueあーきてくちゃ\">ぼくのかんがえたさいきょうのVueあーきてくちゃ\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/slont/bokufalsekangaetasaikiyoufalsevueakitekutiya\">https://speakerdeck.com/slont/bokufalsekangaetasaikiyoufalsevueakitekutiya\u003C/a>\u003C/p>\n\u003Cp>フロントの責務は\u003Ccode>遷移と参照、権限と操作\u003C/code>はほんそれ。一覧画面とかAPIのfetchをしておくとか処理を共通化できそうとかは、現場でもあるあるなので意識はしている。\nenumsの話はなるほどと思った。具体的な事例があると使ってみたくなる。個人的にはunionとかで管理したほうがいいって思っているけど、namespaceをオーバーライしてメソッド\n生やすとか確かに便利そうとか思った。CompositionAPIを積極的に使われていて素敵。\u003C/p>\n\u003Cp>個人的にはextend辛いなとか思ったりしたけどmixinsフォルダ内での責務は確かにいいなと思った。\u003C/p>\n\u003Ch3 id=\"vueobservable-で状態管理\">Vue.observable で状態管理\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/odanado/vue-observable-state-management\">https://speakerdeck.com/odanado/vue-observable-state-management\u003C/a>\u003C/p>\n\u003Cp>存在は知っていたけど使ったことはないので知見が得られた。\u003C/p>\n\u003Cp>\u003Ccode>Vue.config.errorHandler\u003C/code>はプラグインではなくネイティブだったのか。。この辺曖昧だったので勉強し直し。\u003C/p>\n\u003Ch3 id=\"nuxtでssrしている時でもgoogle-optimizeabテストを動かしたい\">NuxtでSSRしている時でもGoogle Optimize(ABテスト)を動かしたい\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/spicez/nuxttessrshi-nigoogleoptimize-abtesutoturu-woshi-itai\">https://speakerdeck.com/spicez/nuxttessrshi-nigoogleoptimize-abtesutoturu-woshi-itai\u003C/a>\u003C/p>\n\u003Cp>面白かった。こういう内部コードを追っていく系は萌えるね。ハイドレーション後のイベントとしてNuxtでは\u003Ccode>onNuxtReady\u003C/code>があるとのことでこれは初耳だった。SSRは結構罠ありそうだなと思った。\u003C/p>\n\u003Ch3 id=\"終わりゆく-vue-2x-時代の状態設計のアンサー---vue-3-の-provider-への期待\">終わりゆく Vue 2.x 時代の状態設計のアンサー - Vue 3 の Provider への期待\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/potato4d/the-last-architecture-of-the-vue-2-dot-x\">https://speakerdeck.com/potato4d/the-last-architecture-of-the-vue-2-dot-x\u003C/a>\u003C/p>\n\u003Cp>これまでの発表内容を違うアプローチで話しつつ、総括するような、まとめるような内容だった。Injectはもちろん知っていたけど使うのは割と抵抗があった。結局Vuexとそこまで違いある？っていう自分がいたが\nその疑問が解決された内容ではあった。その他にモーダルとかで　Vuex管理するなって言っててTeleport使うケースなどなるほどと思った。ただのモーダルの状態を箱として管理するなら確かにありだと思った。\u003C/p>\n\u003Ch2 id=\"まとめ\">まとめ\u003C/h2>\n\u003Cp>状態管理の話が多かった。\nそろそろVue3が出るけど\u003Ca href=\"https://github.com/vuejs/vuex/issues/994\">Vuex4では、型定義ファイルが付いている\u003C/a>ので、状態管理についてもっと幅を効かせた使い方ができるようにはなりそう。一方で結局はアーキテクチャ設計次第ではカオスにもなりうると思ったのでキャッチアップしないと行けないと感じた。\u003C/p>",{"headings":728,"localImagePaths":745,"remoteImagePaths":746,"frontmatter":719,"imagePaths":747},[729,732,735,738,741,744],{"depth":29,"slug":730,"text":731},"native-esm-powered-web-dev-build-tool","Native-ESM powered web dev build tool",{"depth":29,"slug":733,"text":734},"ぼくのかんがえたさいきょうのvueあーきてくちゃ","ぼくのかんがえたさいきょうのVueあーきてくちゃ",{"depth":29,"slug":736,"text":737},"vueobservable-で状態管理","Vue.observable で状態管理",{"depth":29,"slug":739,"text":740},"nuxtでssrしている時でもgoogle-optimizeabテストを動かしたい","NuxtでSSRしている時でもGoogle Optimize(ABテスト)を動かしたい",{"depth":29,"slug":742,"text":743},"終わりゆく-vue-2x-時代の状態設計のアンサー---vue-3-の-provider-への期待","終わりゆく Vue 2.x 時代の状態設計のアンサー - Vue 3 の Provider への期待",{"depth":22,"slug":76,"text":76},[],[],[],"2020/0615.md","2020/0623",{"id":749,"data":751,"body":754,"filePath":755,"digest":756,"rendered":757,"legacyId":773},{"title":752,"publishDate":753},"CSVを簡単に扱えるPapa Parse","2020-06-23","小ネタ。\n\n業務で、jsonをCSVにパースしてダウンロードを行う処理が必要になった。（フロントエンドで）\n\n今まで愚直に以下のような構成でコーディングしていた。\n\n1. jsonをcsv用の文字列に編集（mapとかforEachを使って一個ずつ処理していく）\n2. 変換、拡張子、出力ファイル名などのconfigを作っておく\n3. BLOBに変換する```new Blob([csv], { type: 'text/csv;charset=utf-8;' });```\n4. 隠しaタグを用意してあげてブラウザからダウンロードさせる\n\nこれを書くと結構なコード量になる。\n\nそんな中会社の同僚にPapa Parseというライブラリを教えてもらった。\n\nこれがだいぶ優秀だった。\n\nhttps://www.papaparse.com/\n\nドキュメントが詳しいのとDEMOが分かりやすいので、一度目を通せば何ができるかがすぐ分かる。\n\n### CSV to JSON\n- ローカルファイルの解析（csvアップロード）\n- リモートファイルの解析（url）\n- 文字列解析\n\n### JSON to CSV\n- 解析のオプションが結構ある\n\nしかもこのライブラリ***型定義ファイル***まであった！\n\nhttps://www.npmjs.com/package/@types/papaparse\n\n## Vue.jsでCSVダウンロードする\n\n今回Vue.jsでとりあえずcsvダウンロードはできるものを作った。\n\nまずは、ライブラリを取得する。（型定義必要であれば@typesもインスコ）\n\n```shell\nyarn add papaparse @types/papaparse\n\n```\n\n今回は、itemsというデータの中に入っている情報をcsvにパースした。\n※itemsの中にはfetchしてきたjsonデータなどが入っている想定\n\n```javascript\n\u003Cbutton\n  @click=\"csvExport\"\n>\n  CSV出力\n\u003C/button>\n\n...javascript\n\nimport Papa from 'papaparse'\ndata() {\n  return {\n    items: [\n      {id: 123456, name: \"Ryo\", hoge: \"hoge\"},\n      {id: 000000, name: \"Taro\", hoge: \"hoge\"},\n      {id: 987654, name: \"Jiro\", hoge: \"hoge\"}\n    ]\n  }\n},\n\nmethods: {\n  csvExport(): void {\n    const csv: string = Papa.unparse(this.items)\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const link = document.createElement('a')\n    link.href = window.URL.createObjectURL(blob)\n    link.download = 'Result.csv'\n    link.click()\n  }\n}\n\n```\nボタンクリックするとcsvがダウンロードされる。\n\n```Papa.unparse(this.items)```だけでパースができるので、コード量は短い。unparseメソッドは第2引数で、configを設定できる。もう少し細かい設定も可能。\n\n超強力なライブラリだった。アップロード時の解析も精度を見たかったので、デモ画面で大きめのcsvをアップロードしても\nちゃんと解析されていたしパフォーマンスも悪くなかった。 マルチスレッドには対応していないとのこと。\n\n管理画面とかで、必ずと言っていい程csvをダウンロードしたいというニーズはあると思う。\n本来はサーバー側で、作った方が良さそうではあるが、フロントエンドだけでサクッと作るならこのライブラリはとても良い。","src/content/blog/2020/0623.md","764277a8c7d1859d",{"html":758,"metadata":759},"\u003Cp>小ネタ。\u003C/p>\n\u003Cp>業務で、jsonをCSVにパースしてダウンロードを行う処理が必要になった。（フロントエンドで）\u003C/p>\n\u003Cp>今まで愚直に以下のような構成でコーディングしていた。\u003C/p>\n\u003Col>\n\u003Cli>jsonをcsv用の文字列に編集（mapとかforEachを使って一個ずつ処理していく）\u003C/li>\n\u003Cli>変換、拡張子、出力ファイル名などのconfigを作っておく\u003C/li>\n\u003Cli>BLOBに変換する\u003Ccode>new Blob([csv], { type: 'text/csv;charset=utf-8;' });\u003C/code>\u003C/li>\n\u003Cli>隠しaタグを用意してあげてブラウザからダウンロードさせる\u003C/li>\n\u003C/ol>\n\u003Cp>これを書くと結構なコード量になる。\u003C/p>\n\u003Cp>そんな中会社の同僚にPapa Parseというライブラリを教えてもらった。\u003C/p>\n\u003Cp>これがだいぶ優秀だった。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.papaparse.com/\">https://www.papaparse.com/\u003C/a>\u003C/p>\n\u003Cp>ドキュメントが詳しいのとDEMOが分かりやすいので、一度目を通せば何ができるかがすぐ分かる。\u003C/p>\n\u003Ch3 id=\"csv-to-json\">CSV to JSON\u003C/h3>\n\u003Cul>\n\u003Cli>ローカルファイルの解析（csvアップロード）\u003C/li>\n\u003Cli>リモートファイルの解析（url）\u003C/li>\n\u003Cli>文字列解析\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"json-to-csv\">JSON to CSV\u003C/h3>\n\u003Cul>\n\u003Cli>解析のオプションが結構ある\u003C/li>\n\u003C/ul>\n\u003Cp>しかもこのライブラリ\u003Cem>\u003Cstrong>型定義ファイル\u003C/strong>\u003C/em>まであった！\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.npmjs.com/package/@types/papaparse\">https://www.npmjs.com/package/@types/papaparse\u003C/a>\u003C/p>\n\u003Ch2 id=\"vuejsでcsvダウンロードする\">Vue.jsでCSVダウンロードする\u003C/h2>\n\u003Cp>今回Vue.jsでとりあえずcsvダウンロードはできるものを作った。\u003C/p>\n\u003Cp>まずは、ライブラリを取得する。（型定義必要であれば@typesもインスコ）\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">\u003Cspan class=\"token function\">yarn\u003C/span> \u003Cspan class=\"token function\">add\u003C/span> papaparse @types/papaparse\n\n\u003C/code>\u003C/pre>\n\u003Cp>今回は、itemsというデータの中に入っている情報をcsvにパースした。\n※itemsの中にはfetchしてきたjsonデータなどが入っている想定\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>button\n  @click\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"csvExport\"\u003C/span>\n\u003Cspan class=\"token operator\">>\u003C/span>\n  \u003Cspan class=\"token constant\">CSV\u003C/span>出力\n\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>button\u003Cspan class=\"token operator\">>\u003C/span>\n\n\u003Cspan class=\"token operator\">...\u003C/span>javascript\n\n\u003Cspan class=\"token keyword\">import\u003C/span> Papa \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'papaparse'\u003C/span>\n\u003Cspan class=\"token function\">data\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">items\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n      \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">id\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">123456\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">name\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"Ryo\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">hoge\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"hoge\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">id\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">000000\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">name\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"Taro\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">hoge\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"hoge\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">id\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">987654\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">name\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"Jiro\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">hoge\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"hoge\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token punctuation\">]\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\n\u003Cspan class=\"token literal-property property\">methods\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">csvExport\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token literal-property property\">csv\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> string \u003Cspan class=\"token operator\">=\u003C/span> Papa\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">unparse\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>items\u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> blob \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Blob\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>csv\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">type\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'text/csv'\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> link \u003Cspan class=\"token operator\">=\u003C/span> document\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">createElement\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'a'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n    link\u003Cspan class=\"token punctuation\">.\u003C/span>href \u003Cspan class=\"token operator\">=\u003C/span> window\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token constant\">URL\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">createObjectURL\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>blob\u003Cspan class=\"token punctuation\">)\u003C/span>\n    link\u003Cspan class=\"token punctuation\">.\u003C/span>download \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'Result.csv'\u003C/span>\n    link\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">click\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>ボタンクリックするとcsvがダウンロードされる。\u003C/p>\n\u003Cp>\u003Ccode>Papa.unparse(this.items)\u003C/code>だけでパースができるので、コード量は短い。unparseメソッドは第2引数で、configを設定できる。もう少し細かい設定も可能。\u003C/p>\n\u003Cp>超強力なライブラリだった。アップロード時の解析も精度を見たかったので、デモ画面で大きめのcsvをアップロードしても\nちゃんと解析されていたしパフォーマンスも悪くなかった。 マルチスレッドには対応していないとのこと。\u003C/p>\n\u003Cp>管理画面とかで、必ずと言っていい程csvをダウンロードしたいというニーズはあると思う。\n本来はサーバー側で、作った方が良さそうではあるが、フロントエンドだけでサクッと作るならこのライブラリはとても良い。\u003C/p>",{"headings":760,"localImagePaths":770,"remoteImagePaths":771,"frontmatter":751,"imagePaths":772},[761,764,767],{"depth":29,"slug":762,"text":763},"csv-to-json","CSV to JSON",{"depth":29,"slug":765,"text":766},"json-to-csv","JSON to CSV",{"depth":22,"slug":768,"text":769},"vuejsでcsvダウンロードする","Vue.jsでCSVダウンロードする",[],[],[],"2020/0623.md","2020/0621",{"id":774,"data":776,"body":779,"filePath":780,"digest":781,"rendered":782,"legacyId":819},{"title":777,"publishDate":778},"チャリティカンファレンス沖縄2020 Vol.1 Frontendに参加した","2020-06-21","参加費2,000円で沖縄の返礼品（琉球大学カレーとお菓子）が自宅に届く。コロナの影響で沖縄の観光にも影響が出ており、\n何とかしたいという思いで企画されたオンラインのカンファレンス。 \n\nhttps://charity-conf.okinawa.jp/\n\n[togetter](https://togetter.com/li/1546700)\n\n後で参加者にはアーカイブ動画も公開していただけるとのことだがとりあえず聴いたセッションの感想というかなぐり書きを書いていく\n\nJamstackの話多め。\n\n\n### フロントエンド開発における課題を問い直す\n\nhttps://speakerdeck.com/ug/issues-about-frontend-development\n\nフロントエンドって色々やることあるので、今一度整理してこれからどうやって行くのがよいのかなどの話だった。\nまず大前提として「ユーザーに良いUXを提供すること」それを考える材料として「UXハニカム」があることを発表されていた。\n\n良いUXを提供するためには小さくリリースして、フィードバックを受けて改善するサイクルつまり***アジャイル***をするしかないということ、データドリブンで意思決定を行うことが望ましいとのことであった。\n\nこれらを解決していく手段として「Firebase」が取り上げられていた。「自分たちで作らないことを増やすこと」これがキーワードで後述するエコシステムのセッションにも通じるところがある。\n\nマルチデバイス対応のアプローチとしてはFlutterが挙げられていた。\n\nSPAで作ることが当たり前になってきた中で、Javascriptの責務が増えバグが多くなりやすくなってきたのでTypeScriptを積極的に使っていくこと。\n\n### あなたの知らないGAS（Google Apps Script）の世界\n\nhttps://sites.google.com/view/20200621gas/\n\n途中から聴いたけど、GASって色々な使い方があるのがよく分かった。社内ツールとかSlackの通知botとかでしか使ったことないので色々試したい\n\n### SSR/CSR/SSGの動向2020\n\nhttps://speakerdeck.com/shibe97/ssgfalsedong-xiang-2020\n\nサーバレスSPA、SSG、Jamstackのメリットデメリットのそれぞれ紹介されていた。Jamstackのメリット・デメリットはスライドにもあるがここにもキャプチャして貼っておきたい。\n\n![Jamstackのメリット](/images/jamstack_merit.png)\n\n![Jamstackのデメリット](/images/jamstack_demerit.png)\n\nJamstackはビルド命で、最も大事なこと。ページ生成の時間を以下に削減できるかが鍵\n\nフレームワークのアプローチとして、Nuxt.jsは[payload機能](https://ja.nuxtjs.org/api/configuration-generate/#-code-payload-code-%E3%81%AB%E3%82%88%E3%82%8B%E5%8B%95%E7%9A%84%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E7%94%9F%E6%88%90%E3%81%AE%E9%AB%98%E9%80%9F%E5%8C%96)があって動的ルーティングが高速化できる。\n\nNext.jsには[Incremental Static Regeneration](https://nextjs.org/blog/next-9-4#incremental-static-regeneration-beta)がある。\n\nGatsbyにも、Incremental Buildがある。\n\nヘッドレスCMSの場合下書きプレビューがないので別でSPAで用意する必要がある。Next.jsにはPreview機能がある。まだちゃんと触ったことないので勉強する。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">下書きプレビュー周りよく分かっていない。Next.jsのPreview Mode機能勉強しないと \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&amp;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&amp;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274543765055696896?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n### フロントエンドエンジニアのためのFirebaseサーバーレス開発徹底解説\n\nhttps://speakerdeck.com/takec24/hurontoendoenziniafalsetamefalsefirebasesabaresukai-fa-che-di-jie-shuo\n\n途中子供の世話していたので、端々聴いていた。Firestoreの設計ってやっぱり難しそうという印象。でも出来るようになると色々と出来る幅が増えそう。\nDBとかをフロントで管理できるようになりそうだし。\n\n\n### WordPressサイトをNuxt.js × microCMSのJAMstack構成にリニューアルした話\n\nhttps://speakerdeck.com/kandai/wordpresssaitowonuxt-dot-js-x-microcmsfalsejamstackgou-cheng-niriniyuarusitahua\n\nクラウドワークスのコーポレートサイトの構成を表題の構成にした話。具体的な事例が聴けて参考になった。\n\nここでもやっぱりビルド命な話をしていた。Jamstack構成だと時間ぴったりに公開などの概念がないというかできないので、事前に出来ること、出来ないことを\n握っておくというか確認しておくが重要だなと思った。microCMS本当に応援してるし頑張ってほしい。私も使い倒せるように頑張る！\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">microCMSはサポート対応が神！\u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&amp;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomB?src=hash&amp;ref_src=twsrc%5Etfw\">#roomB\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274553896094978048?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n### Next.js Storybook Driven Development\n\nhttps://www.slideshare.net/takuyatejima1/nextjs-storybook-driven-development\n\nStorybookイイぞおじさんってご本人言ってたw　ここまでしっかりした構成にしているのは凄いと思った。\nStorybook導入のハードルって「ちゃんと運用できんの？」尽きるのかなと思っていてこれで結構頭悩ませた時期も個人的に経験しているので\n純粋に凄いな。イイなと思った。\n\nstoryshots-puppeteerは良さそう。\n\n### フロントエンドのエコシステム\n\nhttps://speakerdeck.com/10shi10ma/frontend-ecosystem\n\nフロントエンドには、様々なエコシステムがあってそれに乗っかることはいいこと。eslintとかwebpackとかbabelとか。。\n本当に様々なプラグインがあり、自分たちで最適化したものを公開できる環境があることは素晴らしいなーと改めて感じた。\nサイボウズもeslintのパッケージ公開してる。\n\nhttps://github.com/cybozu/eslint-config\n\n### AdobeXDで実現するチームにやさしいUIデザイン\n\nhttps://xd.adobe.com/view/3423914a-8b1a-4ebf-ba9b-99044737db37-6170/\n\nスライドもXD！！！　デザイナーさんの作るスライドは本当に好き。\n\nXDが出た時は結構触っていたけど、今は前職、現職ともにFigma駆動なこともあってXDから離れていたんだけど色々と神機能とかアップデート内容\bを知れてよかった。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">デザインツールをサクサク動かす姿カッコいいー \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&amp;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&amp;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274589776272699392?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n### あなたのWordPressサイトをJAMstackにする話\n\nhttps://speakerdeck.com/hideokamoto/charity-okinawa-20200621\n\nJamstack構成の比較対象によく挙げられるWordPressだけどそうではないんだよというお話。\n\nJamstackの「A」だけWordPressにすることは可能。\n全然知らない話で終始頷けながら聴いてしまった。Gatsbyに移行するプラグインなんかもありこれはありかもと思った。特にWordPressは様々な企業で\nとりあえず運用している事例はめちゃくちゃあるだろうしフロントだけ刷新したいなどの提案はできそう。\n\n### Tailwind - what is the utility-first CSS framework\n\n最近何かと流行りというか、目にするTailwindCSS。自分も最近個人の趣味で使っているが確かに使いやすくていい。\nBootstrapとの比較もなるほどと思った。最後の質問時間が良かった。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">tailwindcssは上級者向け \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&amp;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&amp;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274607575598690304?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">Laravelが流行るとtailwindcssは流行るかもらしい。作った人がLaravelコミュニティメンバーだから \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&amp;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&amp;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274608237166264321?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n\n## 全体の感想\nリアルでのカンファレンスってPC持ち歩いて重いし、場所移動とかして結構疲れるしみたいなのがあるが、\nオンラインの長時間カンファレンスは、家でダラダラしながら聴けるし体験としては非常に良かった。","src/content/blog/2020/0621.md","46616c1e28d99f2f",{"html":783,"metadata":784},"\u003Cp>参加費2,000円で沖縄の返礼品（琉球大学カレーとお菓子）が自宅に届く。コロナの影響で沖縄の観光にも影響が出ており、\n何とかしたいという思いで企画されたオンラインのカンファレンス。\u003C/p>\n\u003Cp>\u003Ca href=\"https://charity-conf.okinawa.jp/\">https://charity-conf.okinawa.jp/\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://togetter.com/li/1546700\">togetter\u003C/a>\u003C/p>\n\u003Cp>後で参加者にはアーカイブ動画も公開していただけるとのことだがとりあえず聴いたセッションの感想というかなぐり書きを書いていく\u003C/p>\n\u003Cp>Jamstackの話多め。\u003C/p>\n\u003Ch3 id=\"フロントエンド開発における課題を問い直す\">フロントエンド開発における課題を問い直す\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/ug/issues-about-frontend-development\">https://speakerdeck.com/ug/issues-about-frontend-development\u003C/a>\u003C/p>\n\u003Cp>フロントエンドって色々やることあるので、今一度整理してこれからどうやって行くのがよいのかなどの話だった。\nまず大前提として「ユーザーに良いUXを提供すること」それを考える材料として「UXハニカム」があることを発表されていた。\u003C/p>\n\u003Cp>良いUXを提供するためには小さくリリースして、フィードバックを受けて改善するサイクルつまり\u003Cem>\u003Cstrong>アジャイル\u003C/strong>\u003C/em>をするしかないということ、データドリブンで意思決定を行うことが望ましいとのことであった。\u003C/p>\n\u003Cp>これらを解決していく手段として「Firebase」が取り上げられていた。「自分たちで作らないことを増やすこと」これがキーワードで後述するエコシステムのセッションにも通じるところがある。\u003C/p>\n\u003Cp>マルチデバイス対応のアプローチとしてはFlutterが挙げられていた。\u003C/p>\n\u003Cp>SPAで作ることが当たり前になってきた中で、Javascriptの責務が増えバグが多くなりやすくなってきたのでTypeScriptを積極的に使っていくこと。\u003C/p>\n\u003Ch3 id=\"あなたの知らないgasgoogle-apps-scriptの世界\">あなたの知らないGAS（Google Apps Script）の世界\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sites.google.com/view/20200621gas/\">https://sites.google.com/view/20200621gas/\u003C/a>\u003C/p>\n\u003Cp>途中から聴いたけど、GASって色々な使い方があるのがよく分かった。社内ツールとかSlackの通知botとかでしか使ったことないので色々試したい\u003C/p>\n\u003Ch3 id=\"ssrcsrssgの動向2020\">SSR/CSR/SSGの動向2020\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/shibe97/ssgfalsedong-xiang-2020\">https://speakerdeck.com/shibe97/ssgfalsedong-xiang-2020\u003C/a>\u003C/p>\n\u003Cp>サーバレスSPA、SSG、Jamstackのメリットデメリットのそれぞれ紹介されていた。Jamstackのメリット・デメリットはスライドにもあるがここにもキャプチャして貼っておきたい。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/jamstack_merit.png\" alt=\"Jamstackのメリット\">\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/jamstack_demerit.png\" alt=\"Jamstackのデメリット\">\u003C/p>\n\u003Cp>Jamstackはビルド命で、最も大事なこと。ページ生成の時間を以下に削減できるかが鍵\u003C/p>\n\u003Cp>フレームワークのアプローチとして、Nuxt.jsは\u003Ca href=\"https://ja.nuxtjs.org/api/configuration-generate/#-code-payload-code-%E3%81%AB%E3%82%88%E3%82%8B%E5%8B%95%E7%9A%84%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E7%94%9F%E6%88%90%E3%81%AE%E9%AB%98%E9%80%9F%E5%8C%96\">payload機能\u003C/a>があって動的ルーティングが高速化できる。\u003C/p>\n\u003Cp>Next.jsには\u003Ca href=\"https://nextjs.org/blog/next-9-4#incremental-static-regeneration-beta\">Incremental Static Regeneration\u003C/a>がある。\u003C/p>\n\u003Cp>Gatsbyにも、Incremental Buildがある。\u003C/p>\n\u003Cp>ヘッドレスCMSの場合下書きプレビューがないので別でSPAで用意する必要がある。Next.jsにはPreview機能がある。まだちゃんと触ったことないので勉強する。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">下書きプレビュー周りよく分かっていない。Next.jsのPreview Mode機能勉強しないと \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&#x26;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&#x26;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>— Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274543765055696896?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Ch3 id=\"フロントエンドエンジニアのためのfirebaseサーバーレス開発徹底解説\">フロントエンドエンジニアのためのFirebaseサーバーレス開発徹底解説\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/takec24/hurontoendoenziniafalsetamefalsefirebasesabaresukai-fa-che-di-jie-shuo\">https://speakerdeck.com/takec24/hurontoendoenziniafalsetamefalsefirebasesabaresukai-fa-che-di-jie-shuo\u003C/a>\u003C/p>\n\u003Cp>途中子供の世話していたので、端々聴いていた。Firestoreの設計ってやっぱり難しそうという印象。でも出来るようになると色々と出来る幅が増えそう。\nDBとかをフロントで管理できるようになりそうだし。\u003C/p>\n\u003Ch3 id=\"wordpressサイトをnuxtjs--microcmsのjamstack構成にリニューアルした話\">WordPressサイトをNuxt.js × microCMSのJAMstack構成にリニューアルした話\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/kandai/wordpresssaitowonuxt-dot-js-x-microcmsfalsejamstackgou-cheng-niriniyuarusitahua\">https://speakerdeck.com/kandai/wordpresssaitowonuxt-dot-js-x-microcmsfalsejamstackgou-cheng-niriniyuarusitahua\u003C/a>\u003C/p>\n\u003Cp>クラウドワークスのコーポレートサイトの構成を表題の構成にした話。具体的な事例が聴けて参考になった。\u003C/p>\n\u003Cp>ここでもやっぱりビルド命な話をしていた。Jamstack構成だと時間ぴったりに公開などの概念がないというかできないので、事前に出来ること、出来ないことを\n握っておくというか確認しておくが重要だなと思った。microCMS本当に応援してるし頑張ってほしい。私も使い倒せるように頑張る！\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">microCMSはサポート対応が神！\u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&#x26;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomB?src=hash&#x26;ref_src=twsrc%5Etfw\">#roomB\u003C/a>\u003C/p>— Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274553896094978048?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Ch3 id=\"nextjs-storybook-driven-development\">Next.js Storybook Driven Development\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.slideshare.net/takuyatejima1/nextjs-storybook-driven-development\">https://www.slideshare.net/takuyatejima1/nextjs-storybook-driven-development\u003C/a>\u003C/p>\n\u003Cp>Storybookイイぞおじさんってご本人言ってたw　ここまでしっかりした構成にしているのは凄いと思った。\nStorybook導入のハードルって「ちゃんと運用できんの？」尽きるのかなと思っていてこれで結構頭悩ませた時期も個人的に経験しているので\n純粋に凄いな。イイなと思った。\u003C/p>\n\u003Cp>storyshots-puppeteerは良さそう。\u003C/p>\n\u003Ch3 id=\"フロントエンドのエコシステム\">フロントエンドのエコシステム\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/10shi10ma/frontend-ecosystem\">https://speakerdeck.com/10shi10ma/frontend-ecosystem\u003C/a>\u003C/p>\n\u003Cp>フロントエンドには、様々なエコシステムがあってそれに乗っかることはいいこと。eslintとかwebpackとかbabelとか。。\n本当に様々なプラグインがあり、自分たちで最適化したものを公開できる環境があることは素晴らしいなーと改めて感じた。\nサイボウズもeslintのパッケージ公開してる。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/cybozu/eslint-config\">https://github.com/cybozu/eslint-config\u003C/a>\u003C/p>\n\u003Ch3 id=\"adobexdで実現するチームにやさしいuiデザイン\">AdobeXDで実現するチームにやさしいUIデザイン\u003C/h3>\n\u003Cp>\u003Ca href=\"https://xd.adobe.com/view/3423914a-8b1a-4ebf-ba9b-99044737db37-6170/\">https://xd.adobe.com/view/3423914a-8b1a-4ebf-ba9b-99044737db37-6170/\u003C/a>\u003C/p>\n\u003Cp>スライドもXD！！！　デザイナーさんの作るスライドは本当に好き。\u003C/p>\n\u003Cp>XDが出た時は結構触っていたけど、今は前職、現職ともにFigma駆動なこともあってXDから離れていたんだけど色々と神機能とかアップデート内容\bを知れてよかった。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">デザインツールをサクサク動かす姿カッコいいー \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&#x26;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&#x26;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>— Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274589776272699392?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Ch3 id=\"あなたのwordpressサイトをjamstackにする話\">あなたのWordPressサイトをJAMstackにする話\u003C/h3>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/hideokamoto/charity-okinawa-20200621\">https://speakerdeck.com/hideokamoto/charity-okinawa-20200621\u003C/a>\u003C/p>\n\u003Cp>Jamstack構成の比較対象によく挙げられるWordPressだけどそうではないんだよというお話。\u003C/p>\n\u003Cp>Jamstackの「A」だけWordPressにすることは可能。\n全然知らない話で終始頷けながら聴いてしまった。Gatsbyに移行するプラグインなんかもありこれはありかもと思った。特にWordPressは様々な企業で\nとりあえず運用している事例はめちゃくちゃあるだろうしフロントだけ刷新したいなどの提案はできそう。\u003C/p>\n\u003Ch3 id=\"tailwind---what-is-the-utility-first-css-framework\">Tailwind - what is the utility-first CSS framework\u003C/h3>\n\u003Cp>最近何かと流行りというか、目にするTailwindCSS。自分も最近個人の趣味で使っているが確かに使いやすくていい。\nBootstrapとの比較もなるほどと思った。最後の質問時間が良かった。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">tailwindcssは上級者向け \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&#x26;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&#x26;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>— Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274607575598690304?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">Laravelが流行るとtailwindcssは流行るかもらしい。作った人がLaravelコミュニティメンバーだから \u003Ca href=\"https://twitter.com/hashtag/charitycon_oki?src=hash&#x26;ref_src=twsrc%5Etfw\">#charitycon_oki\u003C/a> \u003Ca href=\"https://twitter.com/hashtag/roomA?src=hash&#x26;ref_src=twsrc%5Etfw\">#roomA\u003C/a>\u003C/p>— Ryo Katsuse (@RyoEnter) \u003Ca href=\"https://twitter.com/RyoEnter/status/1274608237166264321?ref_src=twsrc%5Etfw\">June 21, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Ch2 id=\"全体の感想\">全体の感想\u003C/h2>\n\u003Cp>リアルでのカンファレンスってPC持ち歩いて重いし、場所移動とかして結構疲れるしみたいなのがあるが、\nオンラインの長時間カンファレンスは、家でダラダラしながら聴けるし体験としては非常に良かった。\u003C/p>",{"headings":785,"localImagePaths":816,"remoteImagePaths":817,"frontmatter":776,"imagePaths":818},[786,788,791,794,797,800,803,805,808,811,814],{"depth":29,"slug":787,"text":787},"フロントエンド開発における課題を問い直す",{"depth":29,"slug":789,"text":790},"あなたの知らないgasgoogle-apps-scriptの世界","あなたの知らないGAS（Google Apps Script）の世界",{"depth":29,"slug":792,"text":793},"ssrcsrssgの動向2020","SSR/CSR/SSGの動向2020",{"depth":29,"slug":795,"text":796},"フロントエンドエンジニアのためのfirebaseサーバーレス開発徹底解説","フロントエンドエンジニアのためのFirebaseサーバーレス開発徹底解説",{"depth":29,"slug":798,"text":799},"wordpressサイトをnuxtjs--microcmsのjamstack構成にリニューアルした話","WordPressサイトをNuxt.js × microCMSのJAMstack構成にリニューアルした話",{"depth":29,"slug":801,"text":802},"nextjs-storybook-driven-development","Next.js Storybook Driven Development",{"depth":29,"slug":804,"text":804},"フロントエンドのエコシステム",{"depth":29,"slug":806,"text":807},"adobexdで実現するチームにやさしいuiデザイン","AdobeXDで実現するチームにやさしいUIデザイン",{"depth":29,"slug":809,"text":810},"あなたのwordpressサイトをjamstackにする話","あなたのWordPressサイトをJAMstackにする話",{"depth":29,"slug":812,"text":813},"tailwind---what-is-the-utility-first-css-framework","Tailwind - what is the utility-first CSS framework",{"depth":22,"slug":815,"text":815},"全体の感想",[],[],[],"2020/0621.md","2020/0725",{"id":820,"data":822,"body":825,"filePath":826,"digest":827,"rendered":828,"legacyId":835},{"title":823,"publishDate":824},"ポストロックって今どうなっているんだ？死んだのか？","2020-07-25","音楽のトレンドは、前より追っていないので最近の傾向などは正直分からないけど、ふと「そういえばポストロックっていう単語あんま聴かないなー」と思い、自分なりにポストロックとは何だったのか？今後どうなっていくのか？を考えてみた。\n\nポストロックは、[Wikipedia](https://ja.wikipedia.org/wiki/%E3%83%9D%E3%82%B9%E3%83%88%E3%83%AD%E3%83%83%E3%82%AF)にも記事があるので詳しくはWikipediaを参照いただきたいが僕の解釈だと以下の条件が一つでも存在すればそれはポストロックと呼べると思う。\n\n- ギター・ベース・ドラムそれぞれを本来のロックサウンドとは違う目的で使用する（実験的である）\n- エレクトロニカ（電子音楽）の導入\n- 轟音、ノイズ、その他ヒップホップやジャズなどを取り込んだインスト曲（そして曲の時間が長い）\n\nポストロックの特徴として「曲が長い」「美しい」「静と動がはっきりしている」などがあると思う。\n\nポストロックというものを好んで聴くようになったのは大学生の時。当時バイトしていたスーパーで社員をしていた音楽好きの人からSigur Rósの「Agaetis Byrjun」を借りて聴いたことがきっかけだった。\n\nSigur Rósはポストロックを語る上で欠かせない存在であるのは、間違いない。ポストロックの傾向としては歌がないインストバンドではあるが、Sigur Rósは、ヨンシーの声が非常にノスタルジックな気持ちにさせてくれる。多分100回以上は聴いたと思う。\n\n[Agaetis Byrjun](https://music.youtube.com/playlist?list=OLAK5uy_kS0xK-8stFnvAtN5wIIAidUD2MAXSOxAI)\n\nSigur Rós以外にもモグワイ、Godspeed You! Black Emperor、トータス、アルバム・リーフ、Explosions in the Skyとか色々抑えるバンドはいる。\n\n日本だと\n\n- MONO\n- バンドと呼べるか微妙だがworld's end girlfriend\n- toe\n\nなんかが有名。\n\nポストロック自体は、遡ると既にビートルズの時代から実験的な音楽が存在していてホワイトアルバムの「Revolution 9」という曲はポストロックの原型だと思う。The Velvet Undergroundなどもそうで、特にセカンドアルバムの「Sister Ray」などは原型だ。\n\nこのことからポストロックという言葉が出始める前から既に実験的な音楽を試しているバンドは存在していたことが分かる。\n\nパンクロックが出始めパンクが終息した時に出てきたポスト・パンクというジャンルもあるが、ダブ、ファンクなど本来のジャンルの領域を超えていることから、これもポストロックというジャンルに分類できるのでは？と思う。\n\n後にジーザス＆メリーチェインやMy Bloody Valentineといったシューゲイザーというジャンルが登場する。\n\nこれはポストロックというジャンルではないが、かなり近いジャンルではあることは間違いない。轟音で重厚感のあるギターでボーカルの声が、はっきり聴こえない感じなどはある意味実験的になっている。\n\nMy Bloody Valentineのケビンは日本の裸のラリーズのファンと公言しているが、この裸のラリーズというバンドは、60年代日本のアングラバンドシーンの帝王に君臨していたと思われる伝説的なバンドで、このバンドも凄まじい爆音ギターで客を圧倒していたとか。\n\n全然世代ではないが、裸のラリーズはトップ10には入るほど好きなバンドだ。\n\nRadioheadの「Kid A」「Amnesiac」などはテクノの重鎮オウテカの影響を受けたとトム・ヨークは語っている。\n\nこの2枚のアルバムもジャンルとしては、ポストロックでもありエレクトロニカでもあると思う。このエレクトロニカというジャンルも後にブログ化したい。\n\nポストロックという言葉自体が出てきたのは、90年代らしいがこれまでの歴史を振り返るとポストロックというのは、ビートルズの時代から既にあったというのが分かる。\n\n2010年代は結構流行っていたと思っていてこの時代はモグワイなどを筆頭に色々なインストバンドが登場している。\n\nでは現在はどうなっているのか？確かに言葉は前より聴かなくなったなと思うし、確かに停滞はしている気がする。\n\n理由としては上記で紹介している代表的なバンドが以前より目立って活動していないからだと感じていて、流行っていた当時に聴いていた人々も感じることだと思う。\n\nこれからポストロックに入門しようと言う人は果たしているのだろうか。。かつてのブリットポップが死んだ時のようにもう死んだのか。\n\nポストロックというジャンルは本当に幅広く扱われるので、上記のような重厚感のあるギターで美しく実験的な音楽が分離してそれぞれ違うジャンルが誕生して受け継がれていっているのではと思う。エモだったりハードコアだったり。\n\n今後はアンチポストロックとしてポストロックを否定しつつ、新たに再構築した違うジャンルが生まれていくことを期待している。（既にあるのかも知れないけど）\n\n本来のロックのジャンルというのは常にアンチテーゼをすることで作られていく歴史があることから新たなジャンルとして生まれ変わっていくのではと思っているし、既に今最先端にいるバンドも少なからずポストロックの影響を受けつつ\n自らのバンドサウンドを作り上げていることと思う。\n\n最後にポストロックが今死後だったとしても自分は、このジャンルが好きだし今後も聴き続けていく。","src/content/blog/2020/0725.md","39100709e468c916",{"html":829,"metadata":830},"\u003Cp>音楽のトレンドは、前より追っていないので最近の傾向などは正直分からないけど、ふと「そういえばポストロックっていう単語あんま聴かないなー」と思い、自分なりにポストロックとは何だったのか？今後どうなっていくのか？を考えてみた。\u003C/p>\n\u003Cp>ポストロックは、\u003Ca href=\"https://ja.wikipedia.org/wiki/%E3%83%9D%E3%82%B9%E3%83%88%E3%83%AD%E3%83%83%E3%82%AF\">Wikipedia\u003C/a>にも記事があるので詳しくはWikipediaを参照いただきたいが僕の解釈だと以下の条件が一つでも存在すればそれはポストロックと呼べると思う。\u003C/p>\n\u003Cul>\n\u003Cli>ギター・ベース・ドラムそれぞれを本来のロックサウンドとは違う目的で使用する（実験的である）\u003C/li>\n\u003Cli>エレクトロニカ（電子音楽）の導入\u003C/li>\n\u003Cli>轟音、ノイズ、その他ヒップホップやジャズなどを取り込んだインスト曲（そして曲の時間が長い）\u003C/li>\n\u003C/ul>\n\u003Cp>ポストロックの特徴として「曲が長い」「美しい」「静と動がはっきりしている」などがあると思う。\u003C/p>\n\u003Cp>ポストロックというものを好んで聴くようになったのは大学生の時。当時バイトしていたスーパーで社員をしていた音楽好きの人からSigur Rósの「Agaetis Byrjun」を借りて聴いたことがきっかけだった。\u003C/p>\n\u003Cp>Sigur Rósはポストロックを語る上で欠かせない存在であるのは、間違いない。ポストロックの傾向としては歌がないインストバンドではあるが、Sigur Rósは、ヨンシーの声が非常にノスタルジックな気持ちにさせてくれる。多分100回以上は聴いたと思う。\u003C/p>\n\u003Cp>\u003Ca href=\"https://music.youtube.com/playlist?list=OLAK5uy_kS0xK-8stFnvAtN5wIIAidUD2MAXSOxAI\">Agaetis Byrjun\u003C/a>\u003C/p>\n\u003Cp>Sigur Rós以外にもモグワイ、Godspeed You! Black Emperor、トータス、アルバム・リーフ、Explosions in the Skyとか色々抑えるバンドはいる。\u003C/p>\n\u003Cp>日本だと\u003C/p>\n\u003Cul>\n\u003Cli>MONO\u003C/li>\n\u003Cli>バンドと呼べるか微妙だがworld’s end girlfriend\u003C/li>\n\u003Cli>toe\u003C/li>\n\u003C/ul>\n\u003Cp>なんかが有名。\u003C/p>\n\u003Cp>ポストロック自体は、遡ると既にビートルズの時代から実験的な音楽が存在していてホワイトアルバムの「Revolution 9」という曲はポストロックの原型だと思う。The Velvet Undergroundなどもそうで、特にセカンドアルバムの「Sister Ray」などは原型だ。\u003C/p>\n\u003Cp>このことからポストロックという言葉が出始める前から既に実験的な音楽を試しているバンドは存在していたことが分かる。\u003C/p>\n\u003Cp>パンクロックが出始めパンクが終息した時に出てきたポスト・パンクというジャンルもあるが、ダブ、ファンクなど本来のジャンルの領域を超えていることから、これもポストロックというジャンルに分類できるのでは？と思う。\u003C/p>\n\u003Cp>後にジーザス＆メリーチェインやMy Bloody Valentineといったシューゲイザーというジャンルが登場する。\u003C/p>\n\u003Cp>これはポストロックというジャンルではないが、かなり近いジャンルではあることは間違いない。轟音で重厚感のあるギターでボーカルの声が、はっきり聴こえない感じなどはある意味実験的になっている。\u003C/p>\n\u003Cp>My Bloody Valentineのケビンは日本の裸のラリーズのファンと公言しているが、この裸のラリーズというバンドは、60年代日本のアングラバンドシーンの帝王に君臨していたと思われる伝説的なバンドで、このバンドも凄まじい爆音ギターで客を圧倒していたとか。\u003C/p>\n\u003Cp>全然世代ではないが、裸のラリーズはトップ10には入るほど好きなバンドだ。\u003C/p>\n\u003Cp>Radioheadの「Kid A」「Amnesiac」などはテクノの重鎮オウテカの影響を受けたとトム・ヨークは語っている。\u003C/p>\n\u003Cp>この2枚のアルバムもジャンルとしては、ポストロックでもありエレクトロニカでもあると思う。このエレクトロニカというジャンルも後にブログ化したい。\u003C/p>\n\u003Cp>ポストロックという言葉自体が出てきたのは、90年代らしいがこれまでの歴史を振り返るとポストロックというのは、ビートルズの時代から既にあったというのが分かる。\u003C/p>\n\u003Cp>2010年代は結構流行っていたと思っていてこの時代はモグワイなどを筆頭に色々なインストバンドが登場している。\u003C/p>\n\u003Cp>では現在はどうなっているのか？確かに言葉は前より聴かなくなったなと思うし、確かに停滞はしている気がする。\u003C/p>\n\u003Cp>理由としては上記で紹介している代表的なバンドが以前より目立って活動していないからだと感じていて、流行っていた当時に聴いていた人々も感じることだと思う。\u003C/p>\n\u003Cp>これからポストロックに入門しようと言う人は果たしているのだろうか。。かつてのブリットポップが死んだ時のようにもう死んだのか。\u003C/p>\n\u003Cp>ポストロックというジャンルは本当に幅広く扱われるので、上記のような重厚感のあるギターで美しく実験的な音楽が分離してそれぞれ違うジャンルが誕生して受け継がれていっているのではと思う。エモだったりハードコアだったり。\u003C/p>\n\u003Cp>今後はアンチポストロックとしてポストロックを否定しつつ、新たに再構築した違うジャンルが生まれていくことを期待している。（既にあるのかも知れないけど）\u003C/p>\n\u003Cp>本来のロックのジャンルというのは常にアンチテーゼをすることで作られていく歴史があることから新たなジャンルとして生まれ変わっていくのではと思っているし、既に今最先端にいるバンドも少なからずポストロックの影響を受けつつ\n自らのバンドサウンドを作り上げていることと思う。\u003C/p>\n\u003Cp>最後にポストロックが今死後だったとしても自分は、このジャンルが好きだし今後も聴き続けていく。\u003C/p>",{"headings":831,"localImagePaths":832,"remoteImagePaths":833,"frontmatter":822,"imagePaths":834},[],[],[],[],"2020/0725.md","2020/0801",{"id":836,"data":838,"body":841,"filePath":842,"digest":843,"rendered":844,"legacyId":851},{"title":839,"publishDate":840},"Nuxt(Vue)のtemplateで簡単にnull判定できないからlodashで解決する","2020-08-01","まずはじめに言っておくとlodashなんて本当は使いたくない。けど解決策としてはありかなと思ったので書いた。\n\nAPIの値がちゃんとオブジェクトで返ってきたりオブジェクトではなく、nullやundefinedで返ってきたりするケースに出くわした。\nこういう場合、返ってくる値がnullやundefinedかどうかをチェックする必要がある。\n\nそこで使えるのがOptional Chaining。\n\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Optional_chaining\n\n```obj?.a?.b```のようにオブジェクトチェーンのプロパティを正しいかどうか確認せずに読み込み可能にするもの。\n\nとっても便利。しかしこの構文はVue、Nuxtで使う場合は少々問題にぶち当たる。というのもtemplate内ではこの構文を使うことができないため\n例えば、バインドする箇所でそのままOptional Chainingを使おうとするとエラーになる。\n\n以下が例。\n\n```javascript\n\u003Ctemplate>\n  \u003Cul>\n    \u003Cli\n      v-for=\"item in items\">\n      {{ items?.a?.b }}:\n    \u003C/li>\n  \u003C/ul>\n\u003C/template>\n```\n\n上記の書き方はエラーとなる。\n\nこれを解決するには、computedを使うことで解決することは可能。\n\n```javascript\ncomputed: {\n  formatItem(): string {\n    return (\n      items?.a?.b ?? ''\n    )\n  }\n}\n```\n\n\n参照するプロパティごとにcomputedを使うのはコード量も多くなり大変。\n\n調べてみると、Vueの公式リポジトリで同様の内容で困っているissueがあった。\n\nhttps://github.com/vuejs/vue/issues/4638\n\nこのissueの中で、lodashを使って解決できるとコメントされていた。\n\n```javascript\nimport lodashGet from 'lodash/get'\nVue.prototype.$get = lodashGet\n\n{{ $get(a, 'b.c.d') }}\n``` \n\n- lodashのgetメソッドをimportする。\n- Vue.prototypeを使ってプラグインとして使えるようにする\n- 使いたいtemplateファイルに記述する。\n\nNuxt.jsの場合は、plugin配下にlodashをimportしたファイルを置きnuxt.config.tsのpluginsで読む込むように設定すれば使用可能。\n\n気持ち的にlodashを使いたくないが、こういう地味なオブジェクトの操作には威力を発揮するなと染み染み思う。computedを各プロパティごとに大量に書くとVueファイル内のソースコードも肥大化するので見通しは、lodashの方が良いと思った。\n\nこのissueも参照すると良い。\nhttps://github.com/vuejs/vue/issues/11088\n\nVue3では解消される？？ようなのでlodashを捨てることが出来るかも知れない。。","src/content/blog/2020/0801.md","e3453c84c5946d7d",{"html":845,"metadata":846},"\u003Cp>まずはじめに言っておくとlodashなんて本当は使いたくない。けど解決策としてはありかなと思ったので書いた。\u003C/p>\n\u003Cp>APIの値がちゃんとオブジェクトで返ってきたりオブジェクトではなく、nullやundefinedで返ってきたりするケースに出くわした。\nこういう場合、返ってくる値がnullやundefinedかどうかをチェックする必要がある。\u003C/p>\n\u003Cp>そこで使えるのがOptional Chaining。\u003C/p>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Optional_chaining\u003C/a>\u003C/p>\n\u003Cp>\u003Ccode>obj?.a?.b\u003C/code>のようにオブジェクトチェーンのプロパティを正しいかどうか確認せずに読み込み可能にするもの。\u003C/p>\n\u003Cp>とっても便利。しかしこの構文はVue、Nuxtで使う場合は少々問題にぶち当たる。というのもtemplate内ではこの構文を使うことができないため\n例えば、バインドする箇所でそのままOptional Chainingを使おうとするとエラーになる。\u003C/p>\n\u003Cp>以下が例。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>template\u003Cspan class=\"token operator\">>\u003C/span>\n  \u003Cspan class=\"token operator\">&#x3C;\u003C/span>ul\u003Cspan class=\"token operator\">>\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>li\n      v\u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token keyword\">for\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"item in items\"\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n      \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> items\u003Cspan class=\"token operator\">?.\u003C/span>a\u003Cspan class=\"token operator\">?.\u003C/span>b \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>li\u003Cspan class=\"token operator\">>\u003C/span>\n  \u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>ul\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>template\u003Cspan class=\"token operator\">>\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>上記の書き方はエラーとなる。\u003C/p>\n\u003Cp>これを解決するには、computedを使うことで解決することは可能。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token literal-property property\">computed\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">formatItem\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> string \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n      items\u003Cspan class=\"token operator\">?.\u003C/span>a\u003Cspan class=\"token operator\">?.\u003C/span>b \u003Cspan class=\"token operator\">??\u003C/span> \u003Cspan class=\"token string\">''\u003C/span>\n    \u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>参照するプロパティごとにcomputedを使うのはコード量も多くなり大変。\u003C/p>\n\u003Cp>調べてみると、Vueの公式リポジトリで同様の内容で困っているissueがあった。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/vuejs/vue/issues/4638\">https://github.com/vuejs/vue/issues/4638\u003C/a>\u003C/p>\n\u003Cp>このissueの中で、lodashを使って解決できるとコメントされていた。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> lodashGet \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'lodash/get'\u003C/span>\n\u003Cspan class=\"token class-name\">Vue\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>prototype\u003Cspan class=\"token punctuation\">.\u003C/span>$get \u003Cspan class=\"token operator\">=\u003C/span> lodashGet\n\n\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token function\">$get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'b.c.d'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>lodashのgetメソッドをimportする。\u003C/li>\n\u003Cli>Vue.prototypeを使ってプラグインとして使えるようにする\u003C/li>\n\u003Cli>使いたいtemplateファイルに記述する。\u003C/li>\n\u003C/ul>\n\u003Cp>Nuxt.jsの場合は、plugin配下にlodashをimportしたファイルを置きnuxt.config.tsのpluginsで読む込むように設定すれば使用可能。\u003C/p>\n\u003Cp>気持ち的にlodashを使いたくないが、こういう地味なオブジェクトの操作には威力を発揮するなと染み染み思う。computedを各プロパティごとに大量に書くとVueファイル内のソースコードも肥大化するので見通しは、lodashの方が良いと思った。\u003C/p>\n\u003Cp>このissueも参照すると良い。\n\u003Ca href=\"https://github.com/vuejs/vue/issues/11088\">https://github.com/vuejs/vue/issues/11088\u003C/a>\u003C/p>\n\u003Cp>Vue3では解消される？？ようなのでlodashを捨てることが出来るかも知れない。。\u003C/p>",{"headings":847,"localImagePaths":848,"remoteImagePaths":849,"frontmatter":838,"imagePaths":850},[],[],[],[],"2020/0801.md","2020/0816",{"id":852,"data":854,"body":857,"filePath":858,"digest":859,"rendered":860,"legacyId":880},{"title":855,"publishDate":856},"バスの中でスマホを落としたけど1時間半で回収できた。","2020-08-16","## 事件発覚\n息子とバスに乗って帰り、最寄りのスーパーで買い物リストをスマホで確認しようとしたらスマホがないことに気づく。\n\n## 予測\nおそらくバスに降りる時に、息子を抱き上げた時にポケットから落ちたと予測した。（それ以外なさそう）\n\n## バス案内所へ\n幸い最寄りの駅にバスの案内所があったので事情を説明したところ\n\n\n> バスは何度も同じルートを行き来していて営業所に戻るまでには、何時間かかかるし（最悪終電まで帰らない）運行中は運転手と連絡などもできないので落とし物は、営業所に戻ってから確認になる。\n\n\nなるほどと思いながら同時に営業所の電話番号が、書かれた紙を受け取りとりあえず家に帰ることにした。\n\n## 帰宅後にすぐやったこと\n\n自分のスマホはPixel4を使用している。とりあえず[GPSを使ってスマホ](https://support.google.com/pixelphone/answer/9338680?hl=ja)を探すことにした。\n\n以下の条件が揃っているとスマホの現在地が分かるとのこと。\n- 電源がオンになっている\n- Google アカウントにログインしている\n- モバイルデータまたは Wi-Fi に接続している\n- Google Play での表示がオンになっている\n- 位置情報がオンになっている\n- 「デバイスを探す」がオンになっている\n\n自分のスマホは幸いにも全て有効になっていたので、以下にアクセスしてみる。\n\nhttps://www.google.com/android/find\n\n以下画像のような左のメニューと右側にマップが表示されたUIが表示される。\n\n![デバイスを探す画面](/images/20200816_device_find.png)\n\nとりあえず「デバイスを保護」をしてロック画面に簡易メッセージと、良心のある方が拾った時に連絡してくれる用に妻の携帯番号を表示させておく。\n\n設定した後にマップにスマホの現在地が表示された！表示された位置は、丁度バスの終着駅になっていたのでこれでスマホは、バスの中に置き忘れたことがほぼ確。\n\nこの時点で、営業所に電話してみる。スマホをバスに忘れたこと、現在GPSで位置確認はできていると伝える。すると今終着駅にいるバスが、自分が降りた停留所に到着する予定時刻を教えてくれた。\n\n\n> お近くの停留所で待って運転手に忘れ物の確認をしてみてください。\n\n\nとのこと。\n\n30分ぐらいで到着予定だったのでそれまでGPSを見張っていると、バスのルートと同じようにスマホも移動していることが確認できた。\n\n教えてくれた時間に停留所に行く。GPSは確認したいので妻のスマホを借りた。\n\nバスが停留所に着いた。\n\n```\n自分：「すみません。スマホをこのバスに忘れたかもしれないので探してもいいですか。GPSで確認はできています。」\n運転手：「色を教えてもらっていいですか？」\n自分：「黒です。」\n運転手：「ほらよ！　これでしょ？」\n自分：「！！！？」\n```\n\nという感じのやり取りでPixel4を渡してくれた。乗客の方がスマホを拾って運転手に渡してくれたとのこと。\n\nスマホを無くしたと気づいてから大体1時間半ほどで回収できた。。良かった。。\n\n\n## 振り返り\n今回は、色々と状況が良かった。\n\n- GPS機能が使えた。\n- 帰りのバスだった。（行きのバスだと妻のスマホがなかったり、PCもないので連絡手段がない）\n- 乗客の方に拾っていただき、運転手に渡していた。\n- 自分が帰りに落とした時と同じ運転手がそのままバスを運転していた。\n\n上記の条件1つでも欠けていたら今も回収できていないかもしれないと思うと幸運だった。\n\n## GPS\n更新ボタンを押しても更新されない時が結構あったけど基本的には性能は良かった。\n\n今回はバスということもあり、移動して止まっての繰り返しが多いのも幸運だったと思う。これが電車だと移動速度も速いのでGPSが中々安定しないでいきなり凄い場所に移動しちゃっていることもあると思う。\n\n## まとめ\n- 今回自分が忘れたバスは「西武バス」なので他のバスでは、対応が違うかもしれない。\n- GPSの有効は常にしておくことが大事だなと思った。行く場所がバレるの嫌だ！とかもあるかもしれないけれど。。\n- 子供を抱っこする時は要注意！\n\n\n\n\n\n\u003Cstyle>\n.gatsby-resp-image-wrapper {\n  width: 50%;\n}\n\u003C/style>","src/content/blog/2020/0816.md","382434e349cb5820",{"html":861,"metadata":862},"\u003Ch2 id=\"事件発覚\">事件発覚\u003C/h2>\n\u003Cp>息子とバスに乗って帰り、最寄りのスーパーで買い物リストをスマホで確認しようとしたらスマホがないことに気づく。\u003C/p>\n\u003Ch2 id=\"予測\">予測\u003C/h2>\n\u003Cp>おそらくバスに降りる時に、息子を抱き上げた時にポケットから落ちたと予測した。（それ以外なさそう）\u003C/p>\n\u003Ch2 id=\"バス案内所へ\">バス案内所へ\u003C/h2>\n\u003Cp>幸い最寄りの駅にバスの案内所があったので事情を説明したところ\u003C/p>\n\u003Cblockquote>\n\u003Cp>バスは何度も同じルートを行き来していて営業所に戻るまでには、何時間かかかるし（最悪終電まで帰らない）運行中は運転手と連絡などもできないので落とし物は、営業所に戻ってから確認になる。\u003C/p>\n\u003C/blockquote>\n\u003Cp>なるほどと思いながら同時に営業所の電話番号が、書かれた紙を受け取りとりあえず家に帰ることにした。\u003C/p>\n\u003Ch2 id=\"帰宅後にすぐやったこと\">帰宅後にすぐやったこと\u003C/h2>\n\u003Cp>自分のスマホはPixel4を使用している。とりあえず\u003Ca href=\"https://support.google.com/pixelphone/answer/9338680?hl=ja\">GPSを使ってスマホ\u003C/a>を探すことにした。\u003C/p>\n\u003Cp>以下の条件が揃っているとスマホの現在地が分かるとのこと。\u003C/p>\n\u003Cul>\n\u003Cli>電源がオンになっている\u003C/li>\n\u003Cli>Google アカウントにログインしている\u003C/li>\n\u003Cli>モバイルデータまたは Wi-Fi に接続している\u003C/li>\n\u003Cli>Google Play での表示がオンになっている\u003C/li>\n\u003Cli>位置情報がオンになっている\u003C/li>\n\u003Cli>「デバイスを探す」がオンになっている\u003C/li>\n\u003C/ul>\n\u003Cp>自分のスマホは幸いにも全て有効になっていたので、以下にアクセスしてみる。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.google.com/android/find\">https://www.google.com/android/find\u003C/a>\u003C/p>\n\u003Cp>以下画像のような左のメニューと右側にマップが表示されたUIが表示される。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20200816_device_find.png\" alt=\"デバイスを探す画面\">\u003C/p>\n\u003Cp>とりあえず「デバイスを保護」をしてロック画面に簡易メッセージと、良心のある方が拾った時に連絡してくれる用に妻の携帯番号を表示させておく。\u003C/p>\n\u003Cp>設定した後にマップにスマホの現在地が表示された！表示された位置は、丁度バスの終着駅になっていたのでこれでスマホは、バスの中に置き忘れたことがほぼ確。\u003C/p>\n\u003Cp>この時点で、営業所に電話してみる。スマホをバスに忘れたこと、現在GPSで位置確認はできていると伝える。すると今終着駅にいるバスが、自分が降りた停留所に到着する予定時刻を教えてくれた。\u003C/p>\n\u003Cblockquote>\n\u003Cp>お近くの停留所で待って運転手に忘れ物の確認をしてみてください。\u003C/p>\n\u003C/blockquote>\n\u003Cp>とのこと。\u003C/p>\n\u003Cp>30分ぐらいで到着予定だったのでそれまでGPSを見張っていると、バスのルートと同じようにスマホも移動していることが確認できた。\u003C/p>\n\u003Cp>教えてくれた時間に停留所に行く。GPSは確認したいので妻のスマホを借りた。\u003C/p>\n\u003Cp>バスが停留所に着いた。\u003C/p>\n\u003Cpre class=\"language-plaintext\" data-language=\"plaintext\">\u003Ccode is:raw=\"\" class=\"language-plaintext\">自分：「すみません。スマホをこのバスに忘れたかもしれないので探してもいいですか。GPSで確認はできています。」\n運転手：「色を教えてもらっていいですか？」\n自分：「黒です。」\n運転手：「ほらよ！　これでしょ？」\n自分：「！！！？」\n\u003C/code>\u003C/pre>\n\u003Cp>という感じのやり取りでPixel4を渡してくれた。乗客の方がスマホを拾って運転手に渡してくれたとのこと。\u003C/p>\n\u003Cp>スマホを無くしたと気づいてから大体1時間半ほどで回収できた。。良かった。。\u003C/p>\n\u003Ch2 id=\"振り返り\">振り返り\u003C/h2>\n\u003Cp>今回は、色々と状況が良かった。\u003C/p>\n\u003Cul>\n\u003Cli>GPS機能が使えた。\u003C/li>\n\u003Cli>帰りのバスだった。（行きのバスだと妻のスマホがなかったり、PCもないので連絡手段がない）\u003C/li>\n\u003Cli>乗客の方に拾っていただき、運転手に渡していた。\u003C/li>\n\u003Cli>自分が帰りに落とした時と同じ運転手がそのままバスを運転していた。\u003C/li>\n\u003C/ul>\n\u003Cp>上記の条件1つでも欠けていたら今も回収できていないかもしれないと思うと幸運だった。\u003C/p>\n\u003Ch2 id=\"gps\">GPS\u003C/h2>\n\u003Cp>更新ボタンを押しても更新されない時が結構あったけど基本的には性能は良かった。\u003C/p>\n\u003Cp>今回はバスということもあり、移動して止まっての繰り返しが多いのも幸運だったと思う。これが電車だと移動速度も速いのでGPSが中々安定しないでいきなり凄い場所に移動しちゃっていることもあると思う。\u003C/p>\n\u003Ch2 id=\"まとめ\">まとめ\u003C/h2>\n\u003Cul>\n\u003Cli>今回自分が忘れたバスは「西武バス」なので他のバスでは、対応が違うかもしれない。\u003C/li>\n\u003Cli>GPSの有効は常にしておくことが大事だなと思った。行く場所がバレるの嫌だ！とかもあるかもしれないけれど。。\u003C/li>\n\u003Cli>子供を抱っこする時は要注意！\u003C/li>\n\u003C/ul>\n\u003Cstyle>\n.gatsby-resp-image-wrapper {\n  width: 50%;\n}\n\u003C/style>",{"headings":863,"localImagePaths":877,"remoteImagePaths":878,"frontmatter":854,"imagePaths":879},[864,866,868,870,872,873,876],{"depth":22,"slug":865,"text":865},"事件発覚",{"depth":22,"slug":867,"text":867},"予測",{"depth":22,"slug":869,"text":869},"バス案内所へ",{"depth":22,"slug":871,"text":871},"帰宅後にすぐやったこと",{"depth":22,"slug":52,"text":52},{"depth":22,"slug":874,"text":875},"gps","GPS",{"depth":22,"slug":76,"text":76},[],[],[],"2020/0816.md","2020/0902",{"id":881,"data":883,"body":886,"filePath":887,"digest":888,"rendered":889,"legacyId":907},{"title":884,"publishDate":885},"久しぶりにLPを作ってみて感じたこと","2020-09-02","副業で久しぶりにLPを作る作業を2件行った。\n\n最近はSPA開発がほとんどだったので勝手を忘れてしまいまずどういう環境で作ろうか？などを考えながらやっていたのでその備忘録\n\n## Gatsby、Parcel\n今回は2枚のLPページを作ったのだが、要件的にはこんな感じだったので、技術選定をした。\n\n### 1枚目（Gatsby）\n- SVGを使ったアニメーションが多め\n- 要素が多いけどアニメーション以外のCSSはそこまで難しくない\n- ロジック割と多め\n\n### 2枚目（Parcel）\n- アニメーションがほとんどなくロジックもそこまでない\n- レスポンシブでCSSはまあまあ書く\n\nGatsbyの選定理由は自分が使いやすかったためとアニメーションを生のJavaScriptで書くのが辛いと感じたからだ。またGatsbyのtemplateでデザインに近いものがあって、ほぼそのtemplateを流用できたのも選定の理由。\n\nParcelの選定理由は最初静的なHTML、CSS、JavaScriptで作ろうと思ったのだが、CSSが辛いのでSCSSを使いたいという気持ちとJavaScriptは、そこまで多くないけど処理ごとにファイルは別けたいと思ったこと、更に開発サーバーでホットリロードしながら作業したいということもありParcelにしてみた。\n\nwebpackにするまでもないような時にParcelはオススメ。\n\n## 作成してみて\n割と実装自体はサクサクできたが、レスポンシブのCSSが久しぶりだったのでメディアクエリのSCSSの変数の書き方とか、レスポンシブのレイアウト作る時の注意点などをすっかり忘れていたので最初調べながら作業していた。\n\nSPA開発を長くしているとロジックばかりになりがちなので、こういう突発的なLP作業などをするとCSSのリハビリにもなるので、定期的にやっていくことはいいことだと思った。","src/content/blog/2020/0902.md","45fa6ae41580a8cf",{"html":890,"metadata":891},"\u003Cp>副業で久しぶりにLPを作る作業を2件行った。\u003C/p>\n\u003Cp>最近はSPA開発がほとんどだったので勝手を忘れてしまいまずどういう環境で作ろうか？などを考えながらやっていたのでその備忘録\u003C/p>\n\u003Ch2 id=\"gatsbyparcel\">Gatsby、Parcel\u003C/h2>\n\u003Cp>今回は2枚のLPページを作ったのだが、要件的にはこんな感じだったので、技術選定をした。\u003C/p>\n\u003Ch3 id=\"1枚目gatsby\">1枚目（Gatsby）\u003C/h3>\n\u003Cul>\n\u003Cli>SVGを使ったアニメーションが多め\u003C/li>\n\u003Cli>要素が多いけどアニメーション以外のCSSはそこまで難しくない\u003C/li>\n\u003Cli>ロジック割と多め\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"2枚目parcel\">2枚目（Parcel）\u003C/h3>\n\u003Cul>\n\u003Cli>アニメーションがほとんどなくロジックもそこまでない\u003C/li>\n\u003Cli>レスポンシブでCSSはまあまあ書く\u003C/li>\n\u003C/ul>\n\u003Cp>Gatsbyの選定理由は自分が使いやすかったためとアニメーションを生のJavaScriptで書くのが辛いと感じたからだ。またGatsbyのtemplateでデザインに近いものがあって、ほぼそのtemplateを流用できたのも選定の理由。\u003C/p>\n\u003Cp>Parcelの選定理由は最初静的なHTML、CSS、JavaScriptで作ろうと思ったのだが、CSSが辛いのでSCSSを使いたいという気持ちとJavaScriptは、そこまで多くないけど処理ごとにファイルは別けたいと思ったこと、更に開発サーバーでホットリロードしながら作業したいということもありParcelにしてみた。\u003C/p>\n\u003Cp>webpackにするまでもないような時にParcelはオススメ。\u003C/p>\n\u003Ch2 id=\"作成してみて\">作成してみて\u003C/h2>\n\u003Cp>割と実装自体はサクサクできたが、レスポンシブのCSSが久しぶりだったのでメディアクエリのSCSSの変数の書き方とか、レスポンシブのレイアウト作る時の注意点などをすっかり忘れていたので最初調べながら作業していた。\u003C/p>\n\u003Cp>SPA開発を長くしているとロジックばかりになりがちなので、こういう突発的なLP作業などをするとCSSのリハビリにもなるので、定期的にやっていくことはいいことだと思った。\u003C/p>",{"headings":892,"localImagePaths":904,"remoteImagePaths":905,"frontmatter":883,"imagePaths":906},[893,896,899,902],{"depth":22,"slug":894,"text":895},"gatsbyparcel","Gatsby、Parcel",{"depth":29,"slug":897,"text":898},"1枚目gatsby","1枚目（Gatsby）",{"depth":29,"slug":900,"text":901},"2枚目parcel","2枚目（Parcel）",{"depth":22,"slug":903,"text":903},"作成してみて",[],[],[],"2020/0902.md","2020/0925",{"id":908,"data":910,"body":913,"filePath":914,"digest":915,"rendered":916,"legacyId":954},{"title":911,"publishDate":912},"自分のブログが負債化していたのでリファクタリングした。","2020-09-25","自分のブログにも関わらず色々と負債があったので、リファクタリングと少し機能を追加してみた。数も少ないので2日掛からない程度で完了したのでやったことをまとめる\n\n## 今までのブログ\n\nこのブログを作ったのは、2019年の12月なので約10ヶ月経過しており開設時からブログはちょこちょこ書いているものブログ自体はGatsbyでテンプレートとして[gatsby-starter-blog](https://github.com/gatsbyjs/gatsby-starter-blog)を使用していてほぼそのままの状態だった。\n\nざっくりまとめると以下のような感じ\n\n- tsxファイルがclassベースで書かれている\n- コンポーネント化されていない（ヘッダーとフッターぐらいしかない）\n- anyばっかり\n- cssがグローバルなSCSSのみで管理している\n- ブログに必ずと言っていいタグ機能がない\n- シンタックスハイライトが白黒\n\n上記を何とかしようと思ったので今回リファクタリングを行った。\n\n\n### class構文を辞めてReact.FCにする。\n\n全ファイル対応した。anyも撲滅した。[Gatsby.js を完全TypeScript化する](https://qiita.com/Takepepe/items/144209f860fbe4d5e9bb)の記事を参照に対応してみたが、1点だけgatsby-plugin-graphql-codegenを使ってのGraphQLの型定義だけは、今回は対応していない。理由はこのプラグインを導入して開発していると、ローカル環境が重くなってしまい作業に支障が出てしまった（何故かは調べていないのでこれから調べる予定）のと、全スキーマは使わんやろと判断したため今回は、必要そうな型定義ファイルを自前で用意した。\n\n```TypeScript\n\nexport type Frontmatter = {\n  title: string\n  date: string\n  tags?: string[]\n}\n\n\nexport type MarkdownRemark\u003CFrontmatterKeys extends keyof Frontmatter> = {\n  id: string\n  excerpt: string\n  html: string\n  tableOfContents: string\n  frontmatter: Pick\u003CFrontmatter, FrontmatterKeys>\n  fields: {\n    slug: string\n    filePath: string\n  }\n}\n\n```\n\nこんな感じで用意してコンポーネント側でimportして使用した。\n\n```TypeScript\n\n// 一部抜粋\n\nimport { MarkdownRemark } from \"../types/blog-post\"\n\ntype Props = {\n  data: {\n    markdownRemark: MarkdownRemark\u003C\"title\" | \"tags\">\n  }\n  pageContext: {\n    slug: string\n  }\n}\n\nconst BlogPostTemplate: React.FC\u003CProps> = ({ data, pageContext }) => {\n  const post = data.markdownRemark\n  const { slug } = pageContext\n\n  return (\n    \u003CLayout\n    title={post.frontmatter.title}\n    slug={slug}>\n      \u003CSEO\n        title={post.frontmatter.title}\n        description={post.excerpt}\n      />\n      \u003CPost post={post}/>\n    \u003C/Layout>\n  )\n\n}\n\n```\n\nクエリは以下のような感じで書きます。\n\n\n```TypeScript\nquery BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        tags\n      }\n    }\n  }\n\n```\n\nGraphQLで```published```と```updated```が取れるので記事の更新日とかも取れるのだが今回は対応していない。\n\n### styled-componentsの導入\n\nTailwindcssに置き換えしてしまうか悩んだが、まだ小慣れていないこともありstyled-componentsにした。全部グローバルなSCSSで管理していたがコンポーネントの中にCSSを閉じ込めるだけ閉じ込めた。ただ完全移行はできておらず、そもそもデザインも大規模にリニューアルしたいなと思っているので少し負債が残った。\n\n### コンポーネント化\n\nそこまで大規模なサイトでもないので別にいいかとも思ったが、Reactの思想に反してそうだったのでヘッダー・フッター以外にも記事のリスト部分や、タグの表示、SNSのシェア、ダークモードに切り替えるボタンなどをコンポーネントとして切り出した。\n\n### ダークモード切り替えボタン\n\n今まではお使いのPCのシステムに応じて自動的に切り替えをしていたが、右上のボタンから自由に切り替えができるように追加実装した。単純にデバッグする時にシステム設定で切り替えするのが面倒なのが最大の理由だ。今回は、[gatsby-plugin-dark-mode](https://www.gatsbyjs.com/plugins/gatsby-plugin-dark-mode/)というプラグインで実装した。実際の[プルリク](https://github.com/ryokatsuse/ryokatsuse_web/pull/17/files)を見ると分かりやすい。\n\n```ThemeToggler```というgatsby-plugin-dark-mode内のコンポーネントを呼び出しチェックボックスの状態でbodyにdarkというclassが付与されるので、後はCSSをいい感じにすればサクッと実装できる。次の訪問時に同じ設定にしておくためLocalStorageにフラグを保存している。正直この程度であればロジックはそこまで難しくなさそうだが導入するだけなのですぐ終わった。\n\n### シンタックスハイライト\n\n今まではCSSで白黒で表示していたものをgatsby-starter-blogに標準で入っているprismjsを使った。[VSCodeのようなテーマ](https://github.com/PrismJS/prism-themes/blob/master/themes/prism-vsc-dark-plus.css)を選んだ\n\n### タグ機能の実装\n\n参考になる記事は色々あって適当に拾ってやってみて実装できたのだが、lodashを使っていたりしてちょっと簿妙かなと思ったので、違うやり方を検討した。\n\n調べてみて参考にさせていただいたのが、うひょさんの[uhyo/blog](https://blog.uhy.ooo/)で、技術構成がほぼ同じなので大変参考になった。またsadnessOjisanさんの[Gatsby製のブログにタグ機能を追加するための方法を見直してみよう](https://blog.ojisan.io/gatsby-create-tag)の記事も勉強になった。\n\n## これからやること\n\n結構頑張った（最初からやれよという感じだが。。）ので今回はこのくらいにした。目次機能も実装はしたのだがスマホ時のレイアウトが決まらず今回は見送った。\n\n### デザインの見直し\n\n[dev.to](dev.to)のようなデザインにしたいなーと思うのでデザインを１から見直しするかも\n\n### OGP画像\n\n今はないので適当にアイコンでも表示しようかなとも思ったがやっぱり記事ごとに違うOGP画像を用意したい。\n\n### 記事の更新日も表示するようにする\n\nこれはすぐにできるのでそのうちやる。今は以下のようなクエリになっている。\n\n```javascript\n{\n  allMarkdownRemark(\n    sort: { fields: [frontmatter___date], order: DESC }\n    limit: 1000\n    filter: { fields: { sourceFileType: { eq: \"blog\" } } }\n  ) {\n    edges {\n      node {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n\n```\n\nこの```frontmatter___date```を```frontmatter___published```にして```published```と```updated```の型定義とクエリを追加すればOK\n\n### Aboutページの作成\n\n自分のブログにREADME的なページを用意しておけば自己紹介にもなるので作る。\n\n### 全文検索\n\n実装してみたい。やっぱりAlgoliaとか使う感じなのかまずは調べる作業から。。。\n\n### キャッシュ周り\n\n全然対応していないので、Netlify側の環境変数などもろもろ対応したい。","src/content/blog/2020/0925.md","049d9b770954e120",{"html":917,"metadata":918},"\u003Cp>自分のブログにも関わらず色々と負債があったので、リファクタリングと少し機能を追加してみた。数も少ないので2日掛からない程度で完了したのでやったことをまとめる\u003C/p>\n\u003Ch2 id=\"今までのブログ\">今までのブログ\u003C/h2>\n\u003Cp>このブログを作ったのは、2019年の12月なので約10ヶ月経過しており開設時からブログはちょこちょこ書いているものブログ自体はGatsbyでテンプレートとして\u003Ca href=\"https://github.com/gatsbyjs/gatsby-starter-blog\">gatsby-starter-blog\u003C/a>を使用していてほぼそのままの状態だった。\u003C/p>\n\u003Cp>ざっくりまとめると以下のような感じ\u003C/p>\n\u003Cul>\n\u003Cli>tsxファイルがclassベースで書かれている\u003C/li>\n\u003Cli>コンポーネント化されていない（ヘッダーとフッターぐらいしかない）\u003C/li>\n\u003Cli>anyばっかり\u003C/li>\n\u003Cli>cssがグローバルなSCSSのみで管理している\u003C/li>\n\u003Cli>ブログに必ずと言っていいタグ機能がない\u003C/li>\n\u003Cli>シンタックスハイライトが白黒\u003C/li>\n\u003C/ul>\n\u003Cp>上記を何とかしようと思ったので今回リファクタリングを行った。\u003C/p>\n\u003Ch3 id=\"class構文を辞めてreactfcにする\">class構文を辞めてReact.FCにする。\u003C/h3>\n\u003Cp>全ファイル対応した。anyも撲滅した。\u003Ca href=\"https://qiita.com/Takepepe/items/144209f860fbe4d5e9bb\">Gatsby.js を完全TypeScript化する\u003C/a>の記事を参照に対応してみたが、1点だけgatsby-plugin-graphql-codegenを使ってのGraphQLの型定義だけは、今回は対応していない。理由はこのプラグインを導入して開発していると、ローカル環境が重くなってしまい作業に支障が出てしまった（何故かは調べていないのでこれから調べる予定）のと、全スキーマは使わんやろと判断したため今回は、必要そうな型定義ファイルを自前で用意した。\u003C/p>\n\u003Cpre class=\"language-TypeScript\" data-language=\"TypeScript\">\u003Ccode is:raw=\"\" class=\"language-TypeScript\">\nexport type Frontmatter = {\n  title: string\n  date: string\n  tags?: string[]\n}\n\n\nexport type MarkdownRemark\u003Cfrontmatterkeys extends=\"\" keyof=\"\" frontmatter=\"\"> = {\n  id: string\n  excerpt: string\n  html: string\n  tableOfContents: string\n  frontmatter: Pick\u003Cfrontmatter, frontmatterkeys=\"\">\n  fields: {\n    slug: string\n    filePath: string\n  }\n}\n\n\u003C/frontmatter,>\u003C/frontmatterkeys>\u003C/code>\u003C/pre>\n\u003Cp>こんな感じで用意してコンポーネント側でimportして使用した。\u003C/p>\n\u003Cpre class=\"language-TypeScript\" data-language=\"TypeScript\">\u003Ccode is:raw=\"\" class=\"language-TypeScript\">\n// 一部抜粋\n\nimport { MarkdownRemark } from \"../types/blog-post\"\n\ntype Props = {\n  data: {\n    markdownRemark: MarkdownRemark&#x3C;\"title\" | \"tags\">\n  }\n  pageContext: {\n    slug: string\n  }\n}\n\nconst BlogPostTemplate: React.FC\u003Cprops> = ({ data, pageContext }) => {\n  const post = data.markdownRemark\n  const { slug } = pageContext\n\n  return (\n    \u003Clayout title=\"{post.frontmatter.title}\" slug=\"{slug}\">\n      \u003Cseo title=\"{post.frontmatter.title}\" description=\"{post.excerpt}\">\n      \u003Cpost post=\"{post}/\">\n    \u003C/post>\u003C/seo>\u003C/layout>\n  )\n\n}\n\n\u003C/props>\u003C/code>\u003C/pre>\n\u003Cp>クエリは以下のような感じで書きます。\u003C/p>\n\u003Cpre class=\"language-TypeScript\" data-language=\"TypeScript\">\u003Ccode is:raw=\"\" class=\"language-TypeScript\">query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        tags\n      }\n    }\n  }\n\n\u003C/code>\u003C/pre>\n\u003Cp>GraphQLで\u003Ccode>published\u003C/code>と\u003Ccode>updated\u003C/code>が取れるので記事の更新日とかも取れるのだが今回は対応していない。\u003C/p>\n\u003Ch3 id=\"styled-componentsの導入\">styled-componentsの導入\u003C/h3>\n\u003Cp>Tailwindcssに置き換えしてしまうか悩んだが、まだ小慣れていないこともありstyled-componentsにした。全部グローバルなSCSSで管理していたがコンポーネントの中にCSSを閉じ込めるだけ閉じ込めた。ただ完全移行はできておらず、そもそもデザインも大規模にリニューアルしたいなと思っているので少し負債が残った。\u003C/p>\n\u003Ch3 id=\"コンポーネント化\">コンポーネント化\u003C/h3>\n\u003Cp>そこまで大規模なサイトでもないので別にいいかとも思ったが、Reactの思想に反してそうだったのでヘッダー・フッター以外にも記事のリスト部分や、タグの表示、SNSのシェア、ダークモードに切り替えるボタンなどをコンポーネントとして切り出した。\u003C/p>\n\u003Ch3 id=\"ダークモード切り替えボタン\">ダークモード切り替えボタン\u003C/h3>\n\u003Cp>今まではお使いのPCのシステムに応じて自動的に切り替えをしていたが、右上のボタンから自由に切り替えができるように追加実装した。単純にデバッグする時にシステム設定で切り替えするのが面倒なのが最大の理由だ。今回は、\u003Ca href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-dark-mode/\">gatsby-plugin-dark-mode\u003C/a>というプラグインで実装した。実際の\u003Ca href=\"https://github.com/ryokatsuse/ryokatsuse_web/pull/17/files\">プルリク\u003C/a>を見ると分かりやすい。\u003C/p>\n\u003Cp>\u003Ccode>ThemeToggler\u003C/code>というgatsby-plugin-dark-mode内のコンポーネントを呼び出しチェックボックスの状態でbodyにdarkというclassが付与されるので、後はCSSをいい感じにすればサクッと実装できる。次の訪問時に同じ設定にしておくためLocalStorageにフラグを保存している。正直この程度であればロジックはそこまで難しくなさそうだが導入するだけなのですぐ終わった。\u003C/p>\n\u003Ch3 id=\"シンタックスハイライト\">シンタックスハイライト\u003C/h3>\n\u003Cp>今まではCSSで白黒で表示していたものをgatsby-starter-blogに標準で入っているprismjsを使った。\u003Ca href=\"https://github.com/PrismJS/prism-themes/blob/master/themes/prism-vsc-dark-plus.css\">VSCodeのようなテーマ\u003C/a>を選んだ\u003C/p>\n\u003Ch3 id=\"タグ機能の実装\">タグ機能の実装\u003C/h3>\n\u003Cp>参考になる記事は色々あって適当に拾ってやってみて実装できたのだが、lodashを使っていたりしてちょっと簿妙かなと思ったので、違うやり方を検討した。\u003C/p>\n\u003Cp>調べてみて参考にさせていただいたのが、うひょさんの\u003Ca href=\"https://blog.uhy.ooo/\">uhyo/blog\u003C/a>で、技術構成がほぼ同じなので大変参考になった。またsadnessOjisanさんの\u003Ca href=\"https://blog.ojisan.io/gatsby-create-tag\">Gatsby製のブログにタグ機能を追加するための方法を見直してみよう\u003C/a>の記事も勉強になった。\u003C/p>\n\u003Ch2 id=\"これからやること\">これからやること\u003C/h2>\n\u003Cp>結構頑張った（最初からやれよという感じだが。。）ので今回はこのくらいにした。目次機能も実装はしたのだがスマホ時のレイアウトが決まらず今回は見送った。\u003C/p>\n\u003Ch3 id=\"デザインの見直し\">デザインの見直し\u003C/h3>\n\u003Cp>\u003Ca href=\"dev.to\">dev.to\u003C/a>のようなデザインにしたいなーと思うのでデザインを１から見直しするかも\u003C/p>\n\u003Ch3 id=\"ogp画像\">OGP画像\u003C/h3>\n\u003Cp>今はないので適当にアイコンでも表示しようかなとも思ったがやっぱり記事ごとに違うOGP画像を用意したい。\u003C/p>\n\u003Ch3 id=\"記事の更新日も表示するようにする\">記事の更新日も表示するようにする\u003C/h3>\n\u003Cp>これはすぐにできるのでそのうちやる。今は以下のようなクエリになっている。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">allMarkdownRemark\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token literal-property property\">sort\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">fields\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>frontmatter___date\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">order\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">DESC\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token literal-property property\">limit\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">1000\u003C/span>\n    \u003Cspan class=\"token literal-property property\">filter\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">fields\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">sourceFileType\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token literal-property property\">eq\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"blog\"\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    edges \u003Cspan class=\"token punctuation\">{\u003C/span>\n      node \u003Cspan class=\"token punctuation\">{\u003C/span>\n        fields \u003Cspan class=\"token punctuation\">{\u003C/span>\n          slug\n        \u003Cspan class=\"token punctuation\">}\u003C/span>\n        frontmatter \u003Cspan class=\"token punctuation\">{\u003C/span>\n          title\n        \u003Cspan class=\"token punctuation\">}\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>この\u003Ccode>frontmatter___date\u003C/code>を\u003Ccode>frontmatter___published\u003C/code>にして\u003Ccode>published\u003C/code>と\u003Ccode>updated\u003C/code>の型定義とクエリを追加すればOK\u003C/p>\n\u003Ch3 id=\"aboutページの作成\">Aboutページの作成\u003C/h3>\n\u003Cp>自分のブログにREADME的なページを用意しておけば自己紹介にもなるので作る。\u003C/p>\n\u003Ch3 id=\"全文検索\">全文検索\u003C/h3>\n\u003Cp>実装してみたい。やっぱりAlgoliaとか使う感じなのかまずは調べる作業から。。。\u003C/p>\n\u003Ch3 id=\"キャッシュ周り\">キャッシュ周り\u003C/h3>\n\u003Cp>全然対応していないので、Netlify側の環境変数などもろもろ対応したい。\u003C/p>",{"headings":919,"localImagePaths":951,"remoteImagePaths":952,"frontmatter":910,"imagePaths":953},[920,922,925,927,929,931,933,935,937,939,942,944,947,949],{"depth":22,"slug":921,"text":921},"今までのブログ",{"depth":29,"slug":923,"text":924},"class構文を辞めてreactfcにする","class構文を辞めてReact.FCにする。",{"depth":29,"slug":926,"text":926},"styled-componentsの導入",{"depth":29,"slug":928,"text":928},"コンポーネント化",{"depth":29,"slug":930,"text":930},"ダークモード切り替えボタン",{"depth":29,"slug":932,"text":932},"シンタックスハイライト",{"depth":29,"slug":934,"text":934},"タグ機能の実装",{"depth":22,"slug":936,"text":936},"これからやること",{"depth":29,"slug":938,"text":938},"デザインの見直し",{"depth":29,"slug":940,"text":941},"ogp画像","OGP画像",{"depth":29,"slug":943,"text":943},"記事の更新日も表示するようにする",{"depth":29,"slug":945,"text":946},"aboutページの作成","Aboutページの作成",{"depth":29,"slug":948,"text":948},"全文検索",{"depth":29,"slug":950,"text":950},"キャッシュ周り",[],[],[],"2020/0925.md","2020/0909",{"id":955,"data":957,"body":960,"filePath":961,"digest":962,"rendered":963,"legacyId":983},{"title":958,"publishDate":959},"Next.js＋microCMSで勉強したスパイスを登録していくアプリを作った。","2020-09-09","ヘッドレスCMSを試したかったので、microCMSを使ってアプリケーションを作った。とりあえずベースだけ作ったので今後デザインとかコンテンツは更新予定。\n\n### スパイス図鑑の概要\n\n![スパイス図鑑](/images/spice.png)\n\n- [サイトのURL](https://micro-cms-demo.vercel.app/)\n- [リポジトリ](https://github.com/ryokatsuse/microCMS_DEMO)\n\n一覧と詳細がありそれぞれのデータは[microCMS](https://microcms.io/)で管理している。アプリケーション自体は、Next.js＋TypeScript＋Tailwindcssで構築している。\n\n### 導入方法\nmicroCMSの設定は[こちらを読むと分かりやすい](https://microcms.io/docs/manual/getting-started)\n\n### Next.jsで呼び出す時\n\n今回は、SSGとして公開するため`getStaticProps`と`getStaticPaths`を利用した。\n\n```javascript\nexport const getStaticProps = async () => {\n  const key = {\n    headers: { 'X-API-KEY': process.env.API_KEY as string },\n  }\n\n  const res = await fetch(process.env.ENDPOINT + '/spice_list', key)\n\n  const data = await res.json()\n\n  return {\n    props: {\n      dataList: data.contents,\n    },\n  }\n}\n\n```\nこんな感じで一覧は呼び出しを行っている。\n\nまた、TypeScriptを使用するため[microCMSのデータ](https://github.com/ryokatsuse/microCMS_DEMO/tree/master/src/types)に型をつけた。\n\nAPI呼び出しの部分は共通化できそうなのでTODOとしておく。\n\n## TailWindCSS\nTailWindCSSは、BootStrapのようにUIを構築するCSSを提供してくれるもの。違いは何かというとBootStrapの場合は、既存で用意されたCSSが純粋に使えないから上書きすると言った対応をとりがちだが、TailWindCSSの場合はコンポーネント単位でのcssではなく粒度が小さい単位でcssのユーティリティが沢山用意されているので、別のCSSで上書きするといったことが起きにくい。\n\nまた、粒度が細かいということはカスタマイズ性もあるということ。更にclass名が、`bg-blue-500``text-white``px-4`のように直感的に分かりやすいものになっている。\n\n[vscode](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)の拡張もあるのでオススメ。\n\n\n設定自体は[tailwind.config.js](https://github.com/ryokatsuse/microCMS_DEMO/blob/master/tailwind.config.js)を用意して設定ファイルを書いていく。ここで標準のメインカラーなどを設定していく。\n\npluginsに独自cssも書くことができるので開発中もこのファイルだけを気にすればよい。\n\nNext.jsの場合は_app.tsxにindex.cssをimportすると使用できる。\n\n```javascript\nimport { AppProps } from 'next/app'\nimport '../styles/index.css'\n\nimport React from 'react'\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return \u003CComponent {...pageProps} />\n}\n\nexport default MyApp\n\n```\n\n### microCMS使ってみた感想\n\nヘッドレスCMSはプレビューがないという特長があるので、サービスとして導入した場合は必ずプレビュー画面の作成が必要になるだろうと思った。本当に管理画面に入力していって保存したら即公開になるので。\n\n日本製ということで、ドキュメントや操作性などが充実しており非常に分かりやすい。頻繁にアップデートも行っているので応援したい。","src/content/blog/2020/0909.md","1647241f365f381f",{"html":964,"metadata":965},"\u003Cp>ヘッドレスCMSを試したかったので、microCMSを使ってアプリケーションを作った。とりあえずベースだけ作ったので今後デザインとかコンテンツは更新予定。\u003C/p>\n\u003Ch3 id=\"スパイス図鑑の概要\">スパイス図鑑の概要\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/spice.png\" alt=\"スパイス図鑑\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://micro-cms-demo.vercel.app/\">サイトのURL\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/ryokatsuse/microCMS_DEMO\">リポジトリ\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>一覧と詳細がありそれぞれのデータは\u003Ca href=\"https://microcms.io/\">microCMS\u003C/a>で管理している。アプリケーション自体は、Next.js＋TypeScript＋Tailwindcssで構築している。\u003C/p>\n\u003Ch3 id=\"導入方法\">導入方法\u003C/h3>\n\u003Cp>microCMSの設定は\u003Ca href=\"https://microcms.io/docs/manual/getting-started\">こちらを読むと分かりやすい\u003C/a>\u003C/p>\n\u003Ch3 id=\"nextjsで呼び出す時\">Next.jsで呼び出す時\u003C/h3>\n\u003Cp>今回は、SSGとして公開するため\u003Ccode>getStaticProps\u003C/code>と\u003Ccode>getStaticPaths\u003C/code>を利用した。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">getStaticProps\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">async\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> key \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">headers\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token string-property property\">'X-API-KEY'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> process\u003Cspan class=\"token punctuation\">.\u003C/span>env\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token constant\">API_KEY\u003C/span> \u003Cspan class=\"token keyword\">as\u003C/span> string \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n  \u003Cspan class=\"token keyword\">const\u003C/span> res \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">await\u003C/span> \u003Cspan class=\"token function\">fetch\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>process\u003Cspan class=\"token punctuation\">.\u003C/span>env\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token constant\">ENDPOINT\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token string\">'/spice_list'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> key\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n  \u003Cspan class=\"token keyword\">const\u003C/span> data \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">await\u003C/span> res\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">json\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token literal-property property\">props\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token literal-property property\">dataList\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> data\u003Cspan class=\"token punctuation\">.\u003C/span>contents\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>こんな感じで一覧は呼び出しを行っている。\u003C/p>\n\u003Cp>また、TypeScriptを使用するため\u003Ca href=\"https://github.com/ryokatsuse/microCMS_DEMO/tree/master/src/types\">microCMSのデータ\u003C/a>に型をつけた。\u003C/p>\n\u003Cp>API呼び出しの部分は共通化できそうなのでTODOとしておく。\u003C/p>\n\u003Ch2 id=\"tailwindcss\">TailWindCSS\u003C/h2>\n\u003Cp>TailWindCSSは、BootStrapのようにUIを構築するCSSを提供してくれるもの。違いは何かというとBootStrapの場合は、既存で用意されたCSSが純粋に使えないから上書きすると言った対応をとりがちだが、TailWindCSSの場合はコンポーネント単位でのcssではなく粒度が小さい単位でcssのユーティリティが沢山用意されているので、別のCSSで上書きするといったことが起きにくい。\u003C/p>\n\u003Cp>また、粒度が細かいということはカスタマイズ性もあるということ。更にclass名が、\u003Ccode>bg-blue-500``text-white``px-4\u003C/code>のように直感的に分かりやすいものになっている。\u003C/p>\n\u003Cp>\u003Ca href=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\">vscode\u003C/a>の拡張もあるのでオススメ。\u003C/p>\n\u003Cp>設定自体は\u003Ca href=\"https://github.com/ryokatsuse/microCMS_DEMO/blob/master/tailwind.config.js\">tailwind.config.js\u003C/a>を用意して設定ファイルを書いていく。ここで標準のメインカラーなどを設定していく。\u003C/p>\n\u003Cp>pluginsに独自cssも書くことができるので開発中もこのファイルだけを気にすればよい。\u003C/p>\n\u003Cp>Next.jsの場合は_app.tsxにindex.cssをimportすると使用できる。\u003C/p>\n\u003Cpre class=\"language-javascript\" data-language=\"javascript\">\u003Ccode is:raw=\"\" class=\"language-javascript\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> AppProps \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'next/app'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">'../styles/index.css'\u003C/span>\n\n\u003Cspan class=\"token keyword\">import\u003C/span> React \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'react'\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">MyApp\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token punctuation\">{\u003C/span> Component\u003Cspan class=\"token punctuation\">,\u003C/span> pageProps \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> AppProps\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token operator\">&#x3C;\u003C/span>Component \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>pageProps\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> MyApp\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"microcms使ってみた感想\">microCMS使ってみた感想\u003C/h3>\n\u003Cp>ヘッドレスCMSはプレビューがないという特長があるので、サービスとして導入した場合は必ずプレビュー画面の作成が必要になるだろうと思った。本当に管理画面に入力していって保存したら即公開になるので。\u003C/p>\n\u003Cp>日本製ということで、ドキュメントや操作性などが充実しており非常に分かりやすい。頻繁にアップデートも行っているので応援したい。\u003C/p>",{"headings":966,"localImagePaths":980,"remoteImagePaths":981,"frontmatter":957,"imagePaths":982},[967,969,971,974,977],{"depth":29,"slug":968,"text":968},"スパイス図鑑の概要",{"depth":29,"slug":970,"text":970},"導入方法",{"depth":29,"slug":972,"text":973},"nextjsで呼び出す時","Next.jsで呼び出す時",{"depth":22,"slug":975,"text":976},"tailwindcss","TailWindCSS",{"depth":29,"slug":978,"text":979},"microcms使ってみた感想","microCMS使ってみた感想",[],[],[],"2020/0909.md","2020/0908",{"id":984,"data":986,"body":989,"filePath":990,"digest":991,"rendered":992,"legacyId":1005},{"title":987,"publishDate":988},"Notion-Blogでブログ作った","2020-09-08","[キネマトグラフ](https://kinematograph.vercel.app/)というブログを開設した。\n\nリポジトリはこちら\nhttps://github.com/ryokatsuse/Notion-Blog\n\n### 使っている技術\n\n- [Notion-blog](https://github.com/ijjk/notion-blog)\n- Next.js\n- Vercel\n\nNotion-blogは、Next.jsで作られているNotion非公式のアプリケーションで、SSGになるので静的なサイトとして公開される。\n\n特長としてNotionのpageそのものがCMSになってくれるというスグレモノ。\n\n### 導入方法\n\n[こちらの記事](https://blog.35d.jp/2020-05-23-notion-blog-1)を参考にすればよい。とても分かりやすい。\n\n\n### 実際の記事投稿\n\n![Notion-Blog](/images/notion_blog.png)\n\nページを作成してデプロイが完了するとページの雛形（テーブル）が自動的に作成される。デフォルトでは\n\n- Page: 記事タイトル\n- Slug: ブログ記事 URL\n- Published: 公開フラグ（チェックすると公開される）\n- Date: 記事を書いた日\n- Authors: 記事を書いた人\n\nになっているがここはカスタマイズ可能となっている。テーブル一つ一つの項目がAPIのレスポンスとなっているので、画面側に表示する時も非常に扱いやすい。\n\nデフォルトだと日付がUS時間になっているので[このコミット](https://github.com/ryokatsuse/Notion-Blog/commit/b22d6f47098854c0be55ebb9637c0563b7f4f182)のように修正すると良い。\n\nまた、日付のソートも古いものが上部になる仕様になっているので[こんな感じ](https://github.com/ryokatsuse/Notion-Blog/commit/4e2465893e90772dbae2238f662dad2c2ff8bead)で修正するといいかも。\n\n## TODO\n- OGPの設定\n- GAの導入\n- 検索機能をつけたい","src/content/blog/2020/0908.md","a65c021d14b0e3b4",{"html":993,"metadata":994},"\u003Cp>\u003Ca href=\"https://kinematograph.vercel.app/\">キネマトグラフ\u003C/a>というブログを開設した。\u003C/p>\n\u003Cp>リポジトリはこちら\n\u003Ca href=\"https://github.com/ryokatsuse/Notion-Blog\">https://github.com/ryokatsuse/Notion-Blog\u003C/a>\u003C/p>\n\u003Ch3 id=\"使っている技術\">使っている技術\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/ijjk/notion-blog\">Notion-blog\u003C/a>\u003C/li>\n\u003Cli>Next.js\u003C/li>\n\u003Cli>Vercel\u003C/li>\n\u003C/ul>\n\u003Cp>Notion-blogは、Next.jsで作られているNotion非公式のアプリケーションで、SSGになるので静的なサイトとして公開される。\u003C/p>\n\u003Cp>特長としてNotionのpageそのものがCMSになってくれるというスグレモノ。\u003C/p>\n\u003Ch3 id=\"導入方法\">導入方法\u003C/h3>\n\u003Cp>\u003Ca href=\"https://blog.35d.jp/2020-05-23-notion-blog-1\">こちらの記事\u003C/a>を参考にすればよい。とても分かりやすい。\u003C/p>\n\u003Ch3 id=\"実際の記事投稿\">実際の記事投稿\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/notion_blog.png\" alt=\"Notion-Blog\">\u003C/p>\n\u003Cp>ページを作成してデプロイが完了するとページの雛形（テーブル）が自動的に作成される。デフォルトでは\u003C/p>\n\u003Cul>\n\u003Cli>Page: 記事タイトル\u003C/li>\n\u003Cli>Slug: ブログ記事 URL\u003C/li>\n\u003Cli>Published: 公開フラグ（チェックすると公開される）\u003C/li>\n\u003Cli>Date: 記事を書いた日\u003C/li>\n\u003Cli>Authors: 記事を書いた人\u003C/li>\n\u003C/ul>\n\u003Cp>になっているがここはカスタマイズ可能となっている。テーブル一つ一つの項目がAPIのレスポンスとなっているので、画面側に表示する時も非常に扱いやすい。\u003C/p>\n\u003Cp>デフォルトだと日付がUS時間になっているので\u003Ca href=\"https://github.com/ryokatsuse/Notion-Blog/commit/b22d6f47098854c0be55ebb9637c0563b7f4f182\">このコミット\u003C/a>のように修正すると良い。\u003C/p>\n\u003Cp>また、日付のソートも古いものが上部になる仕様になっているので\u003Ca href=\"https://github.com/ryokatsuse/Notion-Blog/commit/4e2465893e90772dbae2238f662dad2c2ff8bead\">こんな感じ\u003C/a>で修正するといいかも。\u003C/p>\n\u003Ch2 id=\"todo\">TODO\u003C/h2>\n\u003Cul>\n\u003Cli>OGPの設定\u003C/li>\n\u003Cli>GAの導入\u003C/li>\n\u003Cli>検索機能をつけたい\u003C/li>\n\u003C/ul>",{"headings":995,"localImagePaths":1002,"remoteImagePaths":1003,"frontmatter":986,"imagePaths":1004},[996,998,999,1001],{"depth":29,"slug":997,"text":997},"使っている技術",{"depth":29,"slug":970,"text":970},{"depth":29,"slug":1000,"text":1000},"実際の記事投稿",{"depth":22,"slug":216,"text":217},[],[],[],"2020/0908.md","2020/1019",{"id":1006,"data":1008,"body":1011,"filePath":1012,"digest":1013,"rendered":1014,"legacyId":1038},{"title":1009,"publishDate":1010},"ティール組織を読んだ","2020-10-19","少し前に全部読んだので感想。\n\n構成としては以下のような感じ\n\n- 今まで企業がどういう組織形態だったのかを歴史的に振り返る\n- ティール組織の実例を紹介\n- ティール組織の導入方法\n\n## ティール組織 is 何？\n\n上司、部下の関係は存在しない会社の目的のために一人ひとりがルールを決めたり意思決定をしていく組織のこと。従来の組織形態とはかなりかけ離れているので、こんなこと実現できるの？と思うかもしれないが実例は結構ある。\n\n1. 自主経営（セルフマネジメント）\n2. 全体性（ホールネス）\n3. 存在目的\n\n上記3つ構成されている。\n\n自主経営は、誰からの指示を待たず自ら必要なメンバーと一緒にミッションを達成していけること。すべてのメンバーからフィードバックを与え合いお互いに成長できること。\n\n\n全体性は、社員自身の感情をオープンにすること。メンバーが自分の本音を出すことで「心理的安全性」が保証されること。\n\n存在目的は、組織が何のために存在するのかを常に考えること。その目的のために社員は行動するため「当事者意識」が強くなる。\n\n## ティール組織の事例\n\n### ビュートゾルフ\n\nオランダにある「在宅介を支援する企業」で、マネージャーが存在せず850ほどのチームがぞれぞれ予算やルールをチームごとに意思決定しながら業務をしている。人事や経理などのバックオフィスも存在しない。40〜45チームに1人のコーチが存在する。コーチは意思決定権がなくひたすらアドバイスをしていく存在。\n\n### ザ・モーニング・スター・カンパニー\n\n世界最大のトマト加工会社。全社員がマネージャー権限を持つ。給与や報酬などはすべて「社員」が決定することができる。\n\n### パタゴニア\n\n「リーダー層」「マネージャー層」「プレイヤー」の役職が存在するが、リーダーのは取り組む必要のある問題だけを提示して後はチームに委ねている\n\n## ティール組織の導入\n\n既に組織形態が決まっておりかつ企業の規模が大きいと導入するのは困難である。経営者がしっかり音頭を取ってやらないと厳しい。\n\n## ホラクラシー組織との違い\n\nホラクラシー組織はティール組織とは違い、明確なビジネスモデルが存在するのに対して、ティール組織は明確なビジネスモデルが存在しない。\n\n## 感想\n\n自分は現職でこのティール組織に影響を受けている企業に努めているのでこの本を読んだときにこの本の通りなんだな。と感じた。\n\n特徴としては、\n\n- 全員が意思決定権を持っているので、会社を変えていける。\n- 給与、評価は自己決定\n- いわゆる上司、部下の関係はない。\n\n半月ほど働いているが、ティール組織のメリットでもある「働きやすさ」はとても良いし、メンバー全員が会社全体をどうしていくか常に考えて業務を遂行している。ティール組織のデメリットに「各個人が自立している」ことがあるがみんな大人なので今の所デメリットに感じていない。\n\nまた思ったこととして、「心理的安全性」「当事者意識」などの言葉だけ並んで大切にしています。というのは結構危ないと思っていて企業がティール組織でないとそもそも大切にするの難しいなと感じてしまった。会社の理念とか雰囲気って変えるの中々難しいし、例えばあるチームだけはティール組織っぽく意思決定していくんだ！といって導入しても周りからの理解が得られないと簡単に頓挫するだろうなと。スクラムとかも何か近い雰囲気がしている。","src/content/blog/2020/1019.md","6e993c1aaa24908f",{"html":1015,"metadata":1016},"\u003Cp>少し前に全部読んだので感想。\u003C/p>\n\u003Cp>構成としては以下のような感じ\u003C/p>\n\u003Cul>\n\u003Cli>今まで企業がどういう組織形態だったのかを歴史的に振り返る\u003C/li>\n\u003Cli>ティール組織の実例を紹介\u003C/li>\n\u003Cli>ティール組織の導入方法\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"ティール組織-is-何\">ティール組織 is 何？\u003C/h2>\n\u003Cp>上司、部下の関係は存在しない会社の目的のために一人ひとりがルールを決めたり意思決定をしていく組織のこと。従来の組織形態とはかなりかけ離れているので、こんなこと実現できるの？と思うかもしれないが実例は結構ある。\u003C/p>\n\u003Col>\n\u003Cli>自主経営（セルフマネジメント）\u003C/li>\n\u003Cli>全体性（ホールネス）\u003C/li>\n\u003Cli>存在目的\u003C/li>\n\u003C/ol>\n\u003Cp>上記3つ構成されている。\u003C/p>\n\u003Cp>自主経営は、誰からの指示を待たず自ら必要なメンバーと一緒にミッションを達成していけること。すべてのメンバーからフィードバックを与え合いお互いに成長できること。\u003C/p>\n\u003Cp>全体性は、社員自身の感情をオープンにすること。メンバーが自分の本音を出すことで「心理的安全性」が保証されること。\u003C/p>\n\u003Cp>存在目的は、組織が何のために存在するのかを常に考えること。その目的のために社員は行動するため「当事者意識」が強くなる。\u003C/p>\n\u003Ch2 id=\"ティール組織の事例\">ティール組織の事例\u003C/h2>\n\u003Ch3 id=\"ビュートゾルフ\">ビュートゾルフ\u003C/h3>\n\u003Cp>オランダにある「在宅介を支援する企業」で、マネージャーが存在せず850ほどのチームがぞれぞれ予算やルールをチームごとに意思決定しながら業務をしている。人事や経理などのバックオフィスも存在しない。40〜45チームに1人のコーチが存在する。コーチは意思決定権がなくひたすらアドバイスをしていく存在。\u003C/p>\n\u003Ch3 id=\"ザモーニングスターカンパニー\">ザ・モーニング・スター・カンパニー\u003C/h3>\n\u003Cp>世界最大のトマト加工会社。全社員がマネージャー権限を持つ。給与や報酬などはすべて「社員」が決定することができる。\u003C/p>\n\u003Ch3 id=\"パタゴニア\">パタゴニア\u003C/h3>\n\u003Cp>「リーダー層」「マネージャー層」「プレイヤー」の役職が存在するが、リーダーのは取り組む必要のある問題だけを提示して後はチームに委ねている\u003C/p>\n\u003Ch2 id=\"ティール組織の導入\">ティール組織の導入\u003C/h2>\n\u003Cp>既に組織形態が決まっておりかつ企業の規模が大きいと導入するのは困難である。経営者がしっかり音頭を取ってやらないと厳しい。\u003C/p>\n\u003Ch2 id=\"ホラクラシー組織との違い\">ホラクラシー組織との違い\u003C/h2>\n\u003Cp>ホラクラシー組織はティール組織とは違い、明確なビジネスモデルが存在するのに対して、ティール組織は明確なビジネスモデルが存在しない。\u003C/p>\n\u003Ch2 id=\"感想\">感想\u003C/h2>\n\u003Cp>自分は現職でこのティール組織に影響を受けている企業に努めているのでこの本を読んだときにこの本の通りなんだな。と感じた。\u003C/p>\n\u003Cp>特徴としては、\u003C/p>\n\u003Cul>\n\u003Cli>全員が意思決定権を持っているので、会社を変えていける。\u003C/li>\n\u003Cli>給与、評価は自己決定\u003C/li>\n\u003Cli>いわゆる上司、部下の関係はない。\u003C/li>\n\u003C/ul>\n\u003Cp>半月ほど働いているが、ティール組織のメリットでもある「働きやすさ」はとても良いし、メンバー全員が会社全体をどうしていくか常に考えて業務を遂行している。ティール組織のデメリットに「各個人が自立している」ことがあるがみんな大人なので今の所デメリットに感じていない。\u003C/p>\n\u003Cp>また思ったこととして、「心理的安全性」「当事者意識」などの言葉だけ並んで大切にしています。というのは結構危ないと思っていて企業がティール組織でないとそもそも大切にするの難しいなと感じてしまった。会社の理念とか雰囲気って変えるの中々難しいし、例えばあるチームだけはティール組織っぽく意思決定していくんだ！といって導入しても周りからの理解が得られないと簡単に頓挫するだろうなと。スクラムとかも何か近い雰囲気がしている。\u003C/p>",{"headings":1017,"localImagePaths":1035,"remoteImagePaths":1036,"frontmatter":1008,"imagePaths":1037},[1018,1021,1023,1025,1028,1030,1032,1034],{"depth":22,"slug":1019,"text":1020},"ティール組織-is-何","ティール組織 is 何？",{"depth":22,"slug":1022,"text":1022},"ティール組織の事例",{"depth":29,"slug":1024,"text":1024},"ビュートゾルフ",{"depth":29,"slug":1026,"text":1027},"ザモーニングスターカンパニー","ザ・モーニング・スター・カンパニー",{"depth":29,"slug":1029,"text":1029},"パタゴニア",{"depth":22,"slug":1031,"text":1031},"ティール組織の導入",{"depth":22,"slug":1033,"text":1033},"ホラクラシー組織との違い",{"depth":22,"slug":249,"text":249},[],[],[],"2020/1019.md","2020/0926",{"id":1039,"data":1041,"body":1044,"filePath":1045,"digest":1046,"rendered":1047,"legacyId":1066},{"title":1042,"publishDate":1043},"思考の整理学を今改めて読んだ","2020-09-26","![思考の整理学](/images/seirigaku.jpg)\n\n多分大学生の時の一回読んでいるはずなんだけど全く内容覚えていないので再読した。\n\n## 何で再読？\n\n最近色々考えることがあって上手く頭の整理が出来ていない時があったので、整理するヒントないかなと思って探していたら見つけた。\n\n## 思考の整理学とは？\n\n外山 滋比古(とやま しげひこ)先生によるエッセイ集。「東大、京大で一番読まれた本」という触れ込みで有名。\n\n## グライダー\n\n冒頭の「グライダー」という章で「日本の学校教育は自分の力で飛ぶことのできないグライダーな人間ばかりを育ててきた。」と語っている。\nつまり学校の授業（高校まで）は、先生がただ教科書どおりに授業を遂行して生徒は言われた通りにノートを取りテストをして成績が出ると言った受け身なやり方になってしまっていると著者は言っている。\n\nこれはその通りというかよく言われていることなので、特に感想はないが気になったのは「東大、京大で一番読まれた本」となっているがこれ中学や高校の教科書に載せるというか必読書にしてもいいのではと思った。\n今の学校教育はどうなっているか分からないなので少しはマシになっていると思うけど、少なくても自分が学生の時は受け身なことが多かった。「グライダーではなく自力で飛べる飛行機にならなくてはいけない」とこの本で書かれている。\nまさにその通り。　\n\n## どんな内容？\n\nざっくり言うとなにかを勉強したり考えたりする時にどうすれば効率がいいか頭がクリアになるかのテクニックが何個か紹介されている。\n\n- 朝食は食べない。午前中に仕事を片付ける。ブランチを取る\n- 寝ることは大事（物理的にもそうだし、アイデアを寝かせることも大事）\n- 一個に集中しすぎると効率悪いから違うことをやる。\n- インプットするのはいいが興味のないものとかは脳から捨てることも大事\n- とにかく書く\n\n上記が要点になると思う。\n\n朝起きて昼までの間に何も食べないで仕事をすると捗る。ブランチをしっかり食べた後にちゃんと布団で寝て目覚めるともう1回朝起きた時と同じ状態を作ることができるので二度集中できると著者が言っていてなるほど。と思った。\n自分も朝食べないでブランチを取るが、その後軽い昼寝はするけどガッツリ寝ることはしないので新鮮だった。書籍では何時間寝てるとかまでは書いていなかったけどちょっとやってみたさはある。\n\n捨てるというのも共感できる。ダラダラTwitter見るのも辞めようと思った。\n\n\n## 感想\n\n正直古い書籍ということもあり、飛ばし飛ばし読んだ。\n\n何か個人的に新しいことを学んだとは言えないが、改めて意識していこうと言う気持ちにはなった。人間の脳に記憶できることはあまり多くないはないので、積極的に忘れることが重要だなと感じた。\n\n忘れるというのは一時違う場所に情報を退避させる意味なので、ノートなり何かに移しておいていつでも情報を引っ張り出せる状態を作って置くのが大事だなと感じた。自分はNotionで情報を管理しているけど\nたまには物理ノートに書き出してみるのもいいのかもしれない。","src/content/blog/2020/0926.md","e78f5e7a63191a5a",{"html":1048,"metadata":1049},"\u003Cp>\u003Cimg src=\"/images/seirigaku.jpg\" alt=\"思考の整理学\">\u003C/p>\n\u003Cp>多分大学生の時の一回読んでいるはずなんだけど全く内容覚えていないので再読した。\u003C/p>\n\u003Ch2 id=\"何で再読\">何で再読？\u003C/h2>\n\u003Cp>最近色々考えることがあって上手く頭の整理が出来ていない時があったので、整理するヒントないかなと思って探していたら見つけた。\u003C/p>\n\u003Ch2 id=\"思考の整理学とは\">思考の整理学とは？\u003C/h2>\n\u003Cp>外山 滋比古(とやま しげひこ)先生によるエッセイ集。「東大、京大で一番読まれた本」という触れ込みで有名。\u003C/p>\n\u003Ch2 id=\"グライダー\">グライダー\u003C/h2>\n\u003Cp>冒頭の「グライダー」という章で「日本の学校教育は自分の力で飛ぶことのできないグライダーな人間ばかりを育ててきた。」と語っている。\nつまり学校の授業（高校まで）は、先生がただ教科書どおりに授業を遂行して生徒は言われた通りにノートを取りテストをして成績が出ると言った受け身なやり方になってしまっていると著者は言っている。\u003C/p>\n\u003Cp>これはその通りというかよく言われていることなので、特に感想はないが気になったのは「東大、京大で一番読まれた本」となっているがこれ中学や高校の教科書に載せるというか必読書にしてもいいのではと思った。\n今の学校教育はどうなっているか分からないなので少しはマシになっていると思うけど、少なくても自分が学生の時は受け身なことが多かった。「グライダーではなく自力で飛べる飛行機にならなくてはいけない」とこの本で書かれている。\nまさにその通り。　\u003C/p>\n\u003Ch2 id=\"どんな内容\">どんな内容？\u003C/h2>\n\u003Cp>ざっくり言うとなにかを勉強したり考えたりする時にどうすれば効率がいいか頭がクリアになるかのテクニックが何個か紹介されている。\u003C/p>\n\u003Cul>\n\u003Cli>朝食は食べない。午前中に仕事を片付ける。ブランチを取る\u003C/li>\n\u003Cli>寝ることは大事（物理的にもそうだし、アイデアを寝かせることも大事）\u003C/li>\n\u003Cli>一個に集中しすぎると効率悪いから違うことをやる。\u003C/li>\n\u003Cli>インプットするのはいいが興味のないものとかは脳から捨てることも大事\u003C/li>\n\u003Cli>とにかく書く\u003C/li>\n\u003C/ul>\n\u003Cp>上記が要点になると思う。\u003C/p>\n\u003Cp>朝起きて昼までの間に何も食べないで仕事をすると捗る。ブランチをしっかり食べた後にちゃんと布団で寝て目覚めるともう1回朝起きた時と同じ状態を作ることができるので二度集中できると著者が言っていてなるほど。と思った。\n自分も朝食べないでブランチを取るが、その後軽い昼寝はするけどガッツリ寝ることはしないので新鮮だった。書籍では何時間寝てるとかまでは書いていなかったけどちょっとやってみたさはある。\u003C/p>\n\u003Cp>捨てるというのも共感できる。ダラダラTwitter見るのも辞めようと思った。\u003C/p>\n\u003Ch2 id=\"感想\">感想\u003C/h2>\n\u003Cp>正直古い書籍ということもあり、飛ばし飛ばし読んだ。\u003C/p>\n\u003Cp>何か個人的に新しいことを学んだとは言えないが、改めて意識していこうと言う気持ちにはなった。人間の脳に記憶できることはあまり多くないはないので、積極的に忘れることが重要だなと感じた。\u003C/p>\n\u003Cp>忘れるというのは一時違う場所に情報を退避させる意味なので、ノートなり何かに移しておいていつでも情報を引っ張り出せる状態を作って置くのが大事だなと感じた。自分はNotionで情報を管理しているけど\nたまには物理ノートに書き出してみるのもいいのかもしれない。\u003C/p>",{"headings":1050,"localImagePaths":1063,"remoteImagePaths":1064,"frontmatter":1041,"imagePaths":1065},[1051,1054,1057,1059,1062],{"depth":22,"slug":1052,"text":1053},"何で再読","何で再読？",{"depth":22,"slug":1055,"text":1056},"思考の整理学とは","思考の整理学とは？",{"depth":22,"slug":1058,"text":1058},"グライダー",{"depth":22,"slug":1060,"text":1061},"どんな内容","どんな内容？",{"depth":22,"slug":249,"text":249},[],[],[],"2020/0926.md","2020/1126",{"id":1067,"data":1069,"body":1072,"filePath":1073,"digest":1074,"rendered":1075,"legacyId":1094},{"title":1070,"publishDate":1071},"JavaScriptを学ぶのにオススメの書籍","2020-11-26","社内の方で[JavaScriptガチでわからんを脱却するまでの道のり その１](https://note.com/ddden/n/n5f91266aa2a5)というブログを書いている方がいた。とてもよい記事だった。\n\nこの記事を公開したことを社内Slackにポストされた後、スレッドでJavaScriptに関するおすすめ本を幾つか紹介していたのを観測してふと自分も何冊か読んだことあるし、一応参考になった書籍もあったのでこの記事を書くことにした。\n\n少し古い本だけど、今でも通用する内容はあると思ってる。\n\n上記の記事の中で[uhyohyo.net](https://uhyohyo.net/javascript/)を紹介されていて自分もお世話になったので是非一度読んでいただきたい。\n\n## 改訂新版JavaScript本格入門\n\n[改訂新版JavaScript本格入門](https://www.amazon.co.jp/dp/477418411X/ref=cm_sw_r_tw_dp_x_HR5VFb25NEJFC)\n\n自分はいきなりjQueryを現場で使い始めた人間なので、基本的にネットに転がっている情報でなんとか頑張ってた時期があった\bが、さすがにJavaScriptについて知らなすぎたので色々入門書を漁っていたが、どれも挫折してしまった。そんな中この本の評価を見て読み始めた所、非常に分かりやすく解説していて自分にとってはしっかりJavaScriptの基礎を学べた一冊だった。\n\n特に以下の点が分かりやすかった。\n- 基本的な文法\n- ES6の構文\n- オブジェクトとprototypeについて\n- 非同期処理\n\n今までずっと変数に```var```を書いててごめんなさいとなったのを今でも覚えている。基本的には丁寧で解説されているので1回読めばなんとなくわかる。これで自分も脱jQueryができた。\n\n## 開眼! JavaScript ―言語仕様から学ぶJavaScriptの本質\n\n[開眼! JavaScript ―言語仕様から学ぶJavaScriptの本質](https://www.amazon.co.jp/dp/487311621X/ref=cm_sw_r_tw_dp_x_425VFb9JQADDM)\n\n結構前に発売されている本ではあるが、この本は今でも役立つ内容があると思う。（さすがに改定してほしいけど）この本では初心者がつまづくであろう```JavaScriptのthis```について詳しく書かれている。また自分はこの本で、クロージャーを理解できたのでとても価値ある一冊だったし、prototypeについても本格JavaScriptより更に掘り下げて説明されている。なんというかちょっと言語思想なども学べる本でもある。\n\n\n## JavaScript Ninjaの極意 ライブラリ開発のための知識とコーディング\n\n[JavaScript Ninjaの極意 ライブラリ開発のための知識とコーディング ](https://www.amazon.co.jp/dp/487311621X/ref=cm_sw_r_tw_dp_x_425VFb9JQADDM)\n\njQueryの作者John Resigが書いた本。僕はjQueryがあったからコーダーになれてこともありJohn Resigは崇拝しているのでこれを勧めるとなんか宗教っぽいですが、この本は中級者が読むにはとてもいい本だ。\n\nこの本では、割とライブラリでいい感じにしてくれるけど実際何やってんの？みたいな人が読むととても刺さる本だと思う。自分も最初こそ挫折したが、ある程度JavaScriptを書いてまたもう一度読むと非常にためになる内容が多い本だった。\n\n自分は他の言語は全くわからないので、関数型プログラミングもこの本でなんとなく分かったし、特に関数というのがどういった意味があり無名関数やクロージャなどをより深く理解できる。最後の方ではクロスブラウザ開発とか正規表現とか実務で使えそうな内容もあった。\n\nとてもクセのある本なので合わない人もいるかも。\n\n## ハンズオンJavaScript\n\n[ハンズオンJavaScript ](https://www.amazon.co.jp/dp/4873119227/ref=cm_sw_r_tw_dp_x_3f6VFbC982NGD)\n\n最近出た本。正直まだ全部読んでない。（ごめんなさい）\n\nただこの本さらっと読んで見るととても良い本な予感がしている。ページ数が700ページを超えるが内容としてはよくあるサンプルコードを、Chrome DevToolsを使って一つずつ試していくものだ。業務でDevToolsを使うのは必須なので、これは全くの初心者にはとても良い試みだなと思う。\n\nまた基本的な構文やそれぞれのビルトインオブジェクト以外にもWEB APIについてもハンズオンすることが出来てWeb AudioやセンサーAPI更にはPWAやパフォーマンスなどかなり網羅的に学ぶことができるスグレモノ。この一冊でもしかしたらいいのかもしれない。。\n\nとりあえず今回はJavaScriptに関する本を紹介したが、フロントエンドという領域で見るとTypeScriptとかそれこそVue/Reactとかもっといい本があるのでそれはまたいずれ紹介したい。","src/content/blog/2020/1126.md","dcaeddd0c8d15733",{"html":1076,"metadata":1077},"\u003Cp>社内の方で\u003Ca href=\"https://note.com/ddden/n/n5f91266aa2a5\">JavaScriptガチでわからんを脱却するまでの道のり その１\u003C/a>というブログを書いている方がいた。とてもよい記事だった。\u003C/p>\n\u003Cp>この記事を公開したことを社内Slackにポストされた後、スレッドでJavaScriptに関するおすすめ本を幾つか紹介していたのを観測してふと自分も何冊か読んだことあるし、一応参考になった書籍もあったのでこの記事を書くことにした。\u003C/p>\n\u003Cp>少し古い本だけど、今でも通用する内容はあると思ってる。\u003C/p>\n\u003Cp>上記の記事の中で\u003Ca href=\"https://uhyohyo.net/javascript/\">uhyohyo.net\u003C/a>を紹介されていて自分もお世話になったので是非一度読んでいただきたい。\u003C/p>\n\u003Ch2 id=\"改訂新版javascript本格入門\">改訂新版JavaScript本格入門\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/dp/477418411X/ref=cm_sw_r_tw_dp_x_HR5VFb25NEJFC\">改訂新版JavaScript本格入門\u003C/a>\u003C/p>\n\u003Cp>自分はいきなりjQueryを現場で使い始めた人間なので、基本的にネットに転がっている情報でなんとか頑張ってた時期があった\bが、さすがにJavaScriptについて知らなすぎたので色々入門書を漁っていたが、どれも挫折してしまった。そんな中この本の評価を見て読み始めた所、非常に分かりやすく解説していて自分にとってはしっかりJavaScriptの基礎を学べた一冊だった。\u003C/p>\n\u003Cp>特に以下の点が分かりやすかった。\u003C/p>\n\u003Cul>\n\u003Cli>基本的な文法\u003C/li>\n\u003Cli>ES6の構文\u003C/li>\n\u003Cli>オブジェクトとprototypeについて\u003C/li>\n\u003Cli>非同期処理\u003C/li>\n\u003C/ul>\n\u003Cp>今までずっと変数に\u003Ccode>var\u003C/code>を書いててごめんなさいとなったのを今でも覚えている。基本的には丁寧で解説されているので1回読めばなんとなくわかる。これで自分も脱jQueryができた。\u003C/p>\n\u003Ch2 id=\"開眼-javascript-言語仕様から学ぶjavascriptの本質\">開眼! JavaScript ―言語仕様から学ぶJavaScriptの本質\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/dp/487311621X/ref=cm_sw_r_tw_dp_x_425VFb9JQADDM\">開眼! JavaScript ―言語仕様から学ぶJavaScriptの本質\u003C/a>\u003C/p>\n\u003Cp>結構前に発売されている本ではあるが、この本は今でも役立つ内容があると思う。（さすがに改定してほしいけど）この本では初心者がつまづくであろう\u003Ccode>JavaScriptのthis\u003C/code>について詳しく書かれている。また自分はこの本で、クロージャーを理解できたのでとても価値ある一冊だったし、prototypeについても本格JavaScriptより更に掘り下げて説明されている。なんというかちょっと言語思想なども学べる本でもある。\u003C/p>\n\u003Ch2 id=\"javascript-ninjaの極意-ライブラリ開発のための知識とコーディング\">JavaScript Ninjaの極意 ライブラリ開発のための知識とコーディング\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/dp/487311621X/ref=cm_sw_r_tw_dp_x_425VFb9JQADDM\">JavaScript Ninjaの極意 ライブラリ開発のための知識とコーディング \u003C/a>\u003C/p>\n\u003Cp>jQueryの作者John Resigが書いた本。僕はjQueryがあったからコーダーになれてこともありJohn Resigは崇拝しているのでこれを勧めるとなんか宗教っぽいですが、この本は中級者が読むにはとてもいい本だ。\u003C/p>\n\u003Cp>この本では、割とライブラリでいい感じにしてくれるけど実際何やってんの？みたいな人が読むととても刺さる本だと思う。自分も最初こそ挫折したが、ある程度JavaScriptを書いてまたもう一度読むと非常にためになる内容が多い本だった。\u003C/p>\n\u003Cp>自分は他の言語は全くわからないので、関数型プログラミングもこの本でなんとなく分かったし、特に関数というのがどういった意味があり無名関数やクロージャなどをより深く理解できる。最後の方ではクロスブラウザ開発とか正規表現とか実務で使えそうな内容もあった。\u003C/p>\n\u003Cp>とてもクセのある本なので合わない人もいるかも。\u003C/p>\n\u003Ch2 id=\"ハンズオンjavascript\">ハンズオンJavaScript\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/dp/4873119227/ref=cm_sw_r_tw_dp_x_3f6VFbC982NGD\">ハンズオンJavaScript \u003C/a>\u003C/p>\n\u003Cp>最近出た本。正直まだ全部読んでない。（ごめんなさい）\u003C/p>\n\u003Cp>ただこの本さらっと読んで見るととても良い本な予感がしている。ページ数が700ページを超えるが内容としてはよくあるサンプルコードを、Chrome DevToolsを使って一つずつ試していくものだ。業務でDevToolsを使うのは必須なので、これは全くの初心者にはとても良い試みだなと思う。\u003C/p>\n\u003Cp>また基本的な構文やそれぞれのビルトインオブジェクト以外にもWEB APIについてもハンズオンすることが出来てWeb AudioやセンサーAPI更にはPWAやパフォーマンスなどかなり網羅的に学ぶことができるスグレモノ。この一冊でもしかしたらいいのかもしれない。。\u003C/p>\n\u003Cp>とりあえず今回はJavaScriptに関する本を紹介したが、フロントエンドという領域で見るとTypeScriptとかそれこそVue/Reactとかもっといい本があるのでそれはまたいずれ紹介したい。\u003C/p>",{"headings":1078,"localImagePaths":1091,"remoteImagePaths":1092,"frontmatter":1069,"imagePaths":1093},[1079,1082,1085,1088],{"depth":22,"slug":1080,"text":1081},"改訂新版javascript本格入門","改訂新版JavaScript本格入門",{"depth":22,"slug":1083,"text":1084},"開眼-javascript-言語仕様から学ぶjavascriptの本質","開眼! JavaScript ―言語仕様から学ぶJavaScriptの本質",{"depth":22,"slug":1086,"text":1087},"javascript-ninjaの極意-ライブラリ開発のための知識とコーディング","JavaScript Ninjaの極意 ライブラリ開発のための知識とコーディング",{"depth":22,"slug":1089,"text":1090},"ハンズオンjavascript","ハンズオンJavaScript",[],[],[],"2020/1126.md","2020/1128",{"id":1095,"data":1097,"body":1100,"filePath":1101,"digest":1102,"rendered":1103,"legacyId":1117},{"title":1098,"publishDate":1099},"JavaScriptで文字列を置換するときはreplaceAll()を使おうね！","2020-11-29","JavaScriptで文字列の置換をする時は、今まで以下のどちらかの方法で置換していたかなと思います。\n\n## 正規表現\n\n正規表現の```g```を用いてグローバルマッチさせることで置換する。\n\n```js\n'アラサーマークアップエンジニア'.replace(/アラサー/g, 'アラフォー');\n// 'アラフォーマークアップエンジニア'\n\n```\n\n## splitとjoinを駆使する。\n\nsplitで一度文字列を抜き取り、joinを使って該当箇所に置換したい文字を追加する。\n\n```js\n'アラサーマークアップエンジニア'.split('アラサー').join('アラフォー');\n// 'アラフォーマークアップエンジニア'\n```\n\n文字列を置換したいだけなのに、なんでこんな事しないといけないんだ！ということでES2021から、Stringに```replaceall()```というメソッドが使えるようになります！というか現状モダンブラウザでは対応済みになっています。\n\nJavaScriptの標準を決める団体、TC39の[プロポーザル](https://github.com/tc39/proposal-string-replaceall)を確認すると、stage4となっていてES2021に入ります。\n\n## 使い方\nプロポーザルや、[MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll)のページにサンプルがありますが、以下のように使えます。\n\n```js\nconst text = '僕はアラサーマークアップエンジニアです。あっという間にアラサーからアラフォーエンジニアになってしまいますね。';\ntext.replaceAll('アラサー', 'アラフォー');\n// \"僕はアラフォーマークアップエンジニアです。　あっという間にアラフォーからアラフォーエンジニアになってしまいますね。\"\n```\n\n上記の例は日本語なので、大文字小文字の区別がありません。大文字小文字を区別したい場合は、regexを使う必要があります。\n\n```js\nconst text = 'javascript javascript JavaScript';\nconst regex = /javascript/g;\nconst regex2 = /javascript/gi;\n\nconsole.log(text.replaceAll(regex, 'TypeScript'));\n// \"TypeScript TypeScript JavaScript\"\n\nconsole.log(text.replaceAll(regex2, 'TypeScript'));\n// \"TypeScript TypeScript TypeScript\"\n```\n\n今までの実装方法が染み付いてしまっているので、これからは```replaceAll()```を使って老害にならないようにしたいと思います。","src/content/blog/2020/1128.md","4b4f972b6e4a53b7",{"html":1104,"metadata":1105},"\u003Cp>JavaScriptで文字列の置換をする時は、今まで以下のどちらかの方法で置換していたかなと思います。\u003C/p>\n\u003Ch2 id=\"正規表現\">正規表現\u003C/h2>\n\u003Cp>正規表現の\u003Ccode>g\u003C/code>を用いてグローバルマッチさせることで置換する。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token string\">'アラサーマークアップエンジニア'\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">replace\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token regex\">\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-source language-regex\">アラサー\u003C/span>\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-flags\">g\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'アラフォー'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token comment\">// 'アラフォーマークアップエンジニア'\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"splitとjoinを駆使する\">splitとjoinを駆使する。\u003C/h2>\n\u003Cp>splitで一度文字列を抜き取り、joinを使って該当箇所に置換したい文字を追加する。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token string\">'アラサーマークアップエンジニア'\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">split\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'アラサー'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">join\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'アラフォー'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token comment\">// 'アラフォーマークアップエンジニア'\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>文字列を置換したいだけなのに、なんでこんな事しないといけないんだ！ということでES2021から、Stringに\u003Ccode>replaceall()\u003C/code>というメソッドが使えるようになります！というか現状モダンブラウザでは対応済みになっています。\u003C/p>\n\u003Cp>JavaScriptの標準を決める団体、TC39の\u003Ca href=\"https://github.com/tc39/proposal-string-replaceall\">プロポーザル\u003C/a>を確認すると、stage4となっていてES2021に入ります。\u003C/p>\n\u003Ch2 id=\"使い方\">使い方\u003C/h2>\n\u003Cp>プロポーザルや、\u003Ca href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\">MDN\u003C/a>のページにサンプルがありますが、以下のように使えます。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token keyword\">const\u003C/span> text \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'僕はアラサーマークアップエンジニアです。あっという間にアラサーからアラフォーエンジニアになってしまいますね。'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\ntext\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">replaceAll\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'アラサー'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'アラフォー'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token comment\">// \"僕はアラフォーマークアップエンジニアです。　あっという間にアラフォーからアラフォーエンジニアになってしまいますね。\"\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>上記の例は日本語なので、大文字小文字の区別がありません。大文字小文字を区別したい場合は、regexを使う必要があります。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token keyword\">const\u003C/span> text \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'javascript javascript JavaScript'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> regex \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token regex\">\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-source language-regex\">javascript\u003C/span>\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-flags\">g\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> regex2 \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token regex\">\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-source language-regex\">javascript\u003C/span>\u003Cspan class=\"token regex-delimiter\">/\u003C/span>\u003Cspan class=\"token regex-flags\">gi\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\nconsole\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>text\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">replaceAll\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>regex\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'TypeScript'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token comment\">// \"TypeScript TypeScript JavaScript\"\u003C/span>\n\nconsole\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>text\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">replaceAll\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>regex2\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'TypeScript'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token comment\">// \"TypeScript TypeScript TypeScript\"\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>今までの実装方法が染み付いてしまっているので、これからは\u003Ccode>replaceAll()\u003C/code>を使って老害にならないようにしたいと思います。\u003C/p>",{"headings":1106,"localImagePaths":1114,"remoteImagePaths":1115,"frontmatter":1097,"imagePaths":1116},[1107,1109,1112],{"depth":22,"slug":1108,"text":1108},"正規表現",{"depth":22,"slug":1110,"text":1111},"splitとjoinを駆使する","splitとjoinを駆使する。",{"depth":22,"slug":1113,"text":1113},"使い方",[],[],[],"2020/1128.md","2020/1228_02",{"id":1118,"data":1120,"body":1123,"filePath":1124,"digest":1125,"rendered":1126,"legacyId":1166},{"title":1121,"publishDate":1122},"Rust製SSGのZolaでブログを構築する。","2020-12-28","この記事は、[Jamstack Advent Calendar 2020](https://qiita.com/advent-calendar/2020/jamstack)の19日目の記事の転記です。\n元記事は[こちら](https://zenn.dev/ryokatsu/articles/3186fc7166b087)\n\n自分は、普段フロントエンドエンジニアとして実務では主にNuxt.jsを使って開発しており、個人ではNext.jsやGatsby.jsなどで開発しています。今回は、少し前から気になっていたZolaというRust製の静的サイトジェネレーターを実際に試してみて簡易ブログを作成してみました。\n\n作成したものは[Netlifyにデプロイ](https://awesome-mcnulty-2a62ae.netlify.app/)しています。\nリポジトリは[こちら](https://github.com/ryokatsuse/exsample-zola-blog)です。\n\n![](https://storage.googleapis.com/zenn-user-upload/rtwfqxdwragd03t0ilse0jlykf0z)\n\n\n## 前提\n[Zola](https://www.getzola.org/)とは、Rustで作られたSSGになります。JekyllやGoのHugoみたいなものです。Rust製とは言っても実際にRustを触ることはなく[Tera](https://tera.netlify.app/)というテンプレートエンジンを使用して開発していきます。phpのtwigファイルみたいなものです。\n\n## 特徴\nZolaのトップページに記載されている通りですが、\n\n- 依存関係が一切ない\n- ビルドが高速\n- CLIがあり開発ライク\n\nという点が挙げられます。上記の点については、後述します。\n\n## Zolaの導入\n自分はmac環境だったのでHomebrewでインストールしました。\n\n```shell\nbrew install zola\n```\n\n他のOSについては[こちら](https://www.getzola.org/documentation/getting-started/installation/)を確認しましょう。\n\n対話形式でベースとなるURL、SCSSのコンパイルやシンタックスハイライトの有無を聞かれるので、各自で設定していきます。\n\n## 開発サーバー\nZolaをインストールすると`zola`コマンドが使えるようになるので以下コマンドを実行します。\n\n```shell\nzola serve\n```\n\n## ディレクトリ構成\n構成はとてもシンプルで以下のようになっています。\n\n```yml\n├── config.toml ## zolaの設定ファイル\n├── public ## ビルドされたファイル\n├── content ## htmlと紐づくMarkdownファイルなど\n├── sass ## scssファイル\n├── static ## ファビコンなどの静的なコンテンツの置き場\n├── templates ## ページを構成するhtml置き場\n└── themes ## 提供されているサイトのテーマなどを格納する場所\n```\n\n基本的には```templates```フォルダ内のindex.htmlにページのベース情報を記載していきます。\n\n\n## ベースとなるHTML\n\n今回作成したhtmlは以下のようになりました。\n\n```html\n{% extends \"base.html\" %}\n{% import \"blogs.html\" as blogs %}\n\n{% block title %}\n    \u003Ctitle>Exsample Zola Blog\u003C/title>\n    \u003Cmeta name=\"description\" content=\"Exsample Zola Blog\">\n{% endblock title %}\n\n{% block content %}\n    {% for page in paginator.pages %}\n        {{ blogs::article(page=page) }}\n    {% endfor %}\n{% endblock content %}\n````\n\nこれが前提の所で記載したTeraというテンプレートエンジンです。フロントエンドエンジニアからしてみると、少し前にあったejsみたいな構文だなという感想です。一番上で`base.html`を継承して`blogs.html`というmainタグの中身をマークアップしたものをインポートしています。\n\n\n## ブログ部分を構築\n`content`フォルダに階層を用意して`_index.md`という名前でMarkdownを用意します。`_index.md`は、Zola内でどのような振る舞いをするのかを設定できるファイルのようなものです。Markdown内でTOML形式という構文が使用できます。\n\nコンテンツ直下のファイルはこんな感じ\n```TOML\n+++\nsort_by = \"date\"\ntransparent = true\npaginate_by = 10\n+++\n```\nブログを表示する時のソートキーは日付で10記事を超えたらページネーションをつけるなどの設定ができます。\n\n実際のブログを記載するMarkdownは通常の`index.md`を作成して記述することができます。前述したリポジトリを見ると関係性がわかるかなと思います。\n\n## 他ページの作成\n\n今回はListとAboutというページを作りました。htmlを用意するだけでは表示することができず先程の`content`フォルダに同様の階層を作ってあげて`_index.md`を置きます。\n\n```TOML\n+++\ntemplate = \"list.html\"\nsort_by = \"date\"\n+++\n```\n\ntemplateという箇所に表示させたいhtmlを記載すると表示することができます。\n\n## デプロイ\nNetlifyがZolaのビルドに対応しています。[ここ](https://www.getzola.org/documentation/deployment/netlify/)に書いてあるとおり設定ファイルを用意してNetlify側の設定をポチポチすればmainブランチにmergeされたタイミングで自動デプロイすることが出来ます。\n\n## 使ってみての感想\n\n### node_modulesがないからパッケージ管理不要！\n当たり前ではあるのですが、依存関係やバージョン管理が一切不要でブログをサクッと作れるのはかなり楽でした。JavaScriptを普段触っている身としては、package.jsonの`dependencies`と`devDependencies`を綺麗に保ちたいという気持ちが働きますが、そういう事が苦手な方はとても良いと思います。\n\n### CLIがあるので環境構築も不要\nこれも利点です。コマンドを2つ叩けばすぐに開発できるのはデベロッパーにとってありがたい限りです。\n\n### ビルドがめちゃくちゃ速い\n実際にNetlifyにビルドしていますが、mainブランチにmergeしてすぐNetlifyの管理画面からコンソールを見に行くと既にビルドが終わっています！！ \n\n普段自分のブログはGatsby.jsを使っているのですが、それと比べると圧倒的な速さでビビります。[Netlifyのプライシング](https://www.netlify.com/pricing/)を見ると無料プランでビルド時間が月に300分までとなっているのでビルド時間を気にする方にはオススメかもしれません。（まあ個人で運用しているGatsby.jsブログでも300分を超えたことはないのですが。。）\n\n## Teraの構文を学ぶ学習コストが高い\nこれが一番辛かったです。。\n\n初めて触る構文なので、ドキュメントを見ながら使えそうなものを探したり、既にzolaでブログを作られている方のソースコードを見たりしながら開発していました。幸いドキュメントは比較的読みやすいので何とかはなりますがこれを学ぶ学習コストはとても高いなと思いました。\n\n\n## おわりに\nフロントエンドエンジニアでスピード重視を考えるなら、普段から使用しているNext.js/Nuxt.jsなどで開発する方が圧倒的に効率が良かったです。ただTera構文さえ習得してしまえば、構成はZolaの方がシンプルですし、何より高速なのでその点だけでも試して見る価値はあるなと思いました。","src/content/blog/2020/1228_02.md","4d3a85e68100c187",{"html":1127,"metadata":1128},"\u003Cp>この記事は、\u003Ca href=\"https://qiita.com/advent-calendar/2020/jamstack\">Jamstack Advent Calendar 2020\u003C/a>の19日目の記事の転記です。\n元記事は\u003Ca href=\"https://zenn.dev/ryokatsu/articles/3186fc7166b087\">こちら\u003C/a>\u003C/p>\n\u003Cp>自分は、普段フロントエンドエンジニアとして実務では主にNuxt.jsを使って開発しており、個人ではNext.jsやGatsby.jsなどで開発しています。今回は、少し前から気になっていたZolaというRust製の静的サイトジェネレーターを実際に試してみて簡易ブログを作成してみました。\u003C/p>\n\u003Cp>作成したものは\u003Ca href=\"https://awesome-mcnulty-2a62ae.netlify.app/\">Netlifyにデプロイ\u003C/a>しています。\nリポジトリは\u003Ca href=\"https://github.com/ryokatsuse/exsample-zola-blog\">こちら\u003C/a>です。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://storage.googleapis.com/zenn-user-upload/rtwfqxdwragd03t0ilse0jlykf0z\" alt=\"\">\u003C/p>\n\u003Ch2 id=\"前提\">前提\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.getzola.org/\">Zola\u003C/a>とは、Rustで作られたSSGになります。JekyllやGoのHugoみたいなものです。Rust製とは言っても実際にRustを触ることはなく\u003Ca href=\"https://tera.netlify.app/\">Tera\u003C/a>というテンプレートエンジンを使用して開発していきます。phpのtwigファイルみたいなものです。\u003C/p>\n\u003Ch2 id=\"特徴\">特徴\u003C/h2>\n\u003Cp>Zolaのトップページに記載されている通りですが、\u003C/p>\n\u003Cul>\n\u003Cli>依存関係が一切ない\u003C/li>\n\u003Cli>ビルドが高速\u003C/li>\n\u003Cli>CLIがあり開発ライク\u003C/li>\n\u003C/ul>\n\u003Cp>という点が挙げられます。上記の点については、後述します。\u003C/p>\n\u003Ch2 id=\"zolaの導入\">Zolaの導入\u003C/h2>\n\u003Cp>自分はmac環境だったのでHomebrewでインストールしました。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">brew \u003Cspan class=\"token function\">install\u003C/span> zola\n\u003C/code>\u003C/pre>\n\u003Cp>他のOSについては\u003Ca href=\"https://www.getzola.org/documentation/getting-started/installation/\">こちら\u003C/a>を確認しましょう。\u003C/p>\n\u003Cp>対話形式でベースとなるURL、SCSSのコンパイルやシンタックスハイライトの有無を聞かれるので、各自で設定していきます。\u003C/p>\n\u003Ch2 id=\"開発サーバー\">開発サーバー\u003C/h2>\n\u003Cp>Zolaをインストールすると\u003Ccode>zola\u003C/code>コマンドが使えるようになるので以下コマンドを実行します。\u003C/p>\n\u003Cpre class=\"language-shell\" data-language=\"shell\">\u003Ccode is:raw=\"\" class=\"language-shell\">zola serve\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"ディレクトリ構成\">ディレクトリ構成\u003C/h2>\n\u003Cp>構成はとてもシンプルで以下のようになっています。\u003C/p>\n\u003Cpre class=\"language-yml\" data-language=\"yml\">\u003Ccode is:raw=\"\" class=\"language-yml\">├── config.toml \u003Cspan class=\"token comment\">## zolaの設定ファイル\u003C/span>\n├── public \u003Cspan class=\"token comment\">## ビルドされたファイル\u003C/span>\n├── content \u003Cspan class=\"token comment\">## htmlと紐づくMarkdownファイルなど\u003C/span>\n├── sass \u003Cspan class=\"token comment\">## scssファイル\u003C/span>\n├── static \u003Cspan class=\"token comment\">## ファビコンなどの静的なコンテンツの置き場\u003C/span>\n├── templates \u003Cspan class=\"token comment\">## ページを構成するhtml置き場\u003C/span>\n└── themes \u003Cspan class=\"token comment\">## 提供されているサイトのテーマなどを格納する場所\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>基本的には\u003Ccode>templates\u003C/code>フォルダ内のindex.htmlにページのベース情報を記載していきます。\u003C/p>\n\u003Ch2 id=\"ベースとなるhtml\">ベースとなるHTML\u003C/h2>\n\u003Cp>今回作成したhtmlは以下のようになりました。\u003C/p>\n\u003Cpre class=\"language-html\" data-language=\"html\">\u003Ccode is:raw=\"\" class=\"language-html\">{% extends \"base.html\" %}\n{% import \"blogs.html\" as blogs %}\n\n{% block title %}\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>title\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>Exsample Zola Blog\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>title\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>meta\u003C/span> \u003Cspan class=\"token attr-name\">name\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>description\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">content\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>Exsample Zola Blog\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n{% endblock title %}\n\n{% block content %}\n    {% for page in paginator.pages %}\n        {{ blogs::article(page=page) }}\n    {% endfor %}\n{% endblock content %}\n\u003C/code>\u003C/pre>\n\u003Cp>これが前提の所で記載したTeraというテンプレートエンジンです。フロントエンドエンジニアからしてみると、少し前にあったejsみたいな構文だなという感想です。一番上で\u003Ccode>base.html\u003C/code>を継承して\u003Ccode>blogs.html\u003C/code>というmainタグの中身をマークアップしたものをインポートしています。\u003C/p>\n\u003Ch2 id=\"ブログ部分を構築\">ブログ部分を構築\u003C/h2>\n\u003Cp>\u003Ccode>content\u003C/code>フォルダに階層を用意して\u003Ccode>_index.md\u003C/code>という名前でMarkdownを用意します。\u003Ccode>_index.md\u003C/code>は、Zola内でどのような振る舞いをするのかを設定できるファイルのようなものです。Markdown内でTOML形式という構文が使用できます。\u003C/p>\n\u003Cp>コンテンツ直下のファイルはこんな感じ\u003C/p>\n\u003Cpre class=\"language-TOML\" data-language=\"TOML\">\u003Ccode is:raw=\"\" class=\"language-TOML\">+++\nsort_by = \"date\"\ntransparent = true\npaginate_by = 10\n+++\n\u003C/code>\u003C/pre>\n\u003Cp>ブログを表示する時のソートキーは日付で10記事を超えたらページネーションをつけるなどの設定ができます。\u003C/p>\n\u003Cp>実際のブログを記載するMarkdownは通常の\u003Ccode>index.md\u003C/code>を作成して記述することができます。前述したリポジトリを見ると関係性がわかるかなと思います。\u003C/p>\n\u003Ch2 id=\"他ページの作成\">他ページの作成\u003C/h2>\n\u003Cp>今回はListとAboutというページを作りました。htmlを用意するだけでは表示することができず先程の\u003Ccode>content\u003C/code>フォルダに同様の階層を作ってあげて\u003Ccode>_index.md\u003C/code>を置きます。\u003C/p>\n\u003Cpre class=\"language-TOML\" data-language=\"TOML\">\u003Ccode is:raw=\"\" class=\"language-TOML\">+++\ntemplate = \"list.html\"\nsort_by = \"date\"\n+++\n\u003C/code>\u003C/pre>\n\u003Cp>templateという箇所に表示させたいhtmlを記載すると表示することができます。\u003C/p>\n\u003Ch2 id=\"デプロイ\">デプロイ\u003C/h2>\n\u003Cp>NetlifyがZolaのビルドに対応しています。\u003Ca href=\"https://www.getzola.org/documentation/deployment/netlify/\">ここ\u003C/a>に書いてあるとおり設定ファイルを用意してNetlify側の設定をポチポチすればmainブランチにmergeされたタイミングで自動デプロイすることが出来ます。\u003C/p>\n\u003Ch2 id=\"使ってみての感想\">使ってみての感想\u003C/h2>\n\u003Ch3 id=\"node_modulesがないからパッケージ管理不要\">node_modulesがないからパッケージ管理不要！\u003C/h3>\n\u003Cp>当たり前ではあるのですが、依存関係やバージョン管理が一切不要でブログをサクッと作れるのはかなり楽でした。JavaScriptを普段触っている身としては、package.jsonの\u003Ccode>dependencies\u003C/code>と\u003Ccode>devDependencies\u003C/code>を綺麗に保ちたいという気持ちが働きますが、そういう事が苦手な方はとても良いと思います。\u003C/p>\n\u003Ch3 id=\"cliがあるので環境構築も不要\">CLIがあるので環境構築も不要\u003C/h3>\n\u003Cp>これも利点です。コマンドを2つ叩けばすぐに開発できるのはデベロッパーにとってありがたい限りです。\u003C/p>\n\u003Ch3 id=\"ビルドがめちゃくちゃ速い\">ビルドがめちゃくちゃ速い\u003C/h3>\n\u003Cp>実際にNetlifyにビルドしていますが、mainブランチにmergeしてすぐNetlifyの管理画面からコンソールを見に行くと既にビルドが終わっています！！\u003C/p>\n\u003Cp>普段自分のブログはGatsby.jsを使っているのですが、それと比べると圧倒的な速さでビビります。\u003Ca href=\"https://www.netlify.com/pricing/\">Netlifyのプライシング\u003C/a>を見ると無料プランでビルド時間が月に300分までとなっているのでビルド時間を気にする方にはオススメかもしれません。（まあ個人で運用しているGatsby.jsブログでも300分を超えたことはないのですが。。）\u003C/p>\n\u003Ch2 id=\"teraの構文を学ぶ学習コストが高い\">Teraの構文を学ぶ学習コストが高い\u003C/h2>\n\u003Cp>これが一番辛かったです。。\u003C/p>\n\u003Cp>初めて触る構文なので、ドキュメントを見ながら使えそうなものを探したり、既にzolaでブログを作られている方のソースコードを見たりしながら開発していました。幸いドキュメントは比較的読みやすいので何とかはなりますがこれを学ぶ学習コストはとても高いなと思いました。\u003C/p>\n\u003Ch2 id=\"おわりに\">おわりに\u003C/h2>\n\u003Cp>フロントエンドエンジニアでスピード重視を考えるなら、普段から使用しているNext.js/Nuxt.jsなどで開発する方が圧倒的に効率が良かったです。ただTera構文さえ習得してしまえば、構成はZolaの方がシンプルですし、何より高速なのでその点だけでも試して見る価値はあるなと思いました。\u003C/p>",{"headings":1129,"localImagePaths":1163,"remoteImagePaths":1164,"frontmatter":1120,"imagePaths":1165},[1130,1131,1133,1136,1138,1140,1143,1145,1147,1148,1150,1153,1156,1158,1161],{"depth":22,"slug":552,"text":552},{"depth":22,"slug":1132,"text":1132},"特徴",{"depth":22,"slug":1134,"text":1135},"zolaの導入","Zolaの導入",{"depth":22,"slug":1137,"text":1137},"開発サーバー",{"depth":22,"slug":1139,"text":1139},"ディレクトリ構成",{"depth":22,"slug":1141,"text":1142},"ベースとなるhtml","ベースとなるHTML",{"depth":22,"slug":1144,"text":1144},"ブログ部分を構築",{"depth":22,"slug":1146,"text":1146},"他ページの作成",{"depth":22,"slug":314,"text":314},{"depth":22,"slug":1149,"text":1149},"使ってみての感想",{"depth":29,"slug":1151,"text":1152},"node_modulesがないからパッケージ管理不要","node_modulesがないからパッケージ管理不要！",{"depth":29,"slug":1154,"text":1155},"cliがあるので環境構築も不要","CLIがあるので環境構築も不要",{"depth":29,"slug":1157,"text":1157},"ビルドがめちゃくちゃ速い",{"depth":22,"slug":1159,"text":1160},"teraの構文を学ぶ学習コストが高い","Teraの構文を学ぶ学習コストが高い",{"depth":22,"slug":1162,"text":1162},"おわりに",[],[],[],"2020/1228_02.md","2020/1228_03",{"id":1167,"data":1169,"body":1171,"filePath":1172,"digest":1173,"rendered":1174,"legacyId":1189},{"title":1170,"publishDate":1122},"今年の振り返りをする。","2020年お疲れ様でしたということで、ざっくり振り返ってみようと思います。\n\n以下の3つについて振り返ります。\n\n- 仕事の振り返り\n- 技術の振り返り\n- ライフスタイル\n\n## 仕事の振り返り\n\n今年の5月に、3度目の転職をしました。\n\n2019年の12月ぐらいから転職活動を初めて3月には、内定→受諾して転職活動を終えていました。\n\n今回の転職は、Twitterと会社の仲の良い人に事前に「転職するわ」と宣言して転職活動していました。\n\nはじめは、自分でスケジュール調整して面接に望んでいたのですが、結構初期の段階から面倒になってしまいエージェントを使いました。結構色々な企業の求人を応募して選考に進めたのは、6社ぐらいありました。1年ぶりぐらいの転職活動でしたが、状況は変わっていないというか「フロントエンドエンジニアがいない」「フルリニューアルしたいけど設計から関われるフロントエンドのリーダーポジションがいない」みたいな企業さんが結構多かったです。\n\n転職活動中にコロナが流行りだして、途中から面接がリモートになったのは非常に助かりました。わざわざ有給を取って朝から夜まではしごして色々な会社に出向くこともなくなり家から就業中でも時間調整して面接したりしていました。これで結構の数の面接をすることができたのは良かった。\n\n最終的には今の会社に決めて5月から入社しましたが、他に3社程内定が出ており非常に悩みました。決め手は、「給与」「働きやすさ」「エンジニアの技術力が高そう」という点でした。\n\n実際に入社してみてどうだったかはあまり深く書きませんが、フルリモートで働きやすい環境で仕事ができています。\n\n## 技術の振り返り\n\nごめんなさい。今年は何かこれと言って取り込んだことはなかったです。\n\n業務では相変わらずVue/Nuxtを使ってSPA開発をしているので去年とほぼ変わらず。個人ではNext.jsを使って何か作ったり、Goを触ってみたりとはしているが何か大きいアウトプットが出たかと言われるとない。これはいかんと思うので、来年こそは技術に全振りしてアウトプットを増やしていきたいと思っています。\n\n## ライフスタイル\n\nコロナの影響で今年は、ほぼ家で仕事していた。コロナ以前はちゃんと出社して仕事していたので最初こそ慣れなかったが、1ヶ月もすれば慣れて問題なく仕事できていたと思う。家がかなり狭く常に家族が横にいる状況で仕事をしていた。精神的に大丈夫なときもあったが、日によってはストレスに感じる日もあった。そういうこともあってか「引っ越し」という文字は常に頭の中にあってどうしようか考えていたが、やっと来年の2月に3LDKの賃貸マンションに引っ越すことが決定した。家を買うのはもう少し先かな。。\n\n生活リズムは、かなり変わりました。\n\n出社していた時は、通勤時間の関係で帰ると息子は既に寝ているという状態であまり一緒にいる時間がなかったけどフルリモートになってからは、仕事が終わったら息子をお風呂に入れてそのまま寝かしつけができるようになり、一緒にいる時間が多く取れるようになったのはとても良かった。\n\n自分の時間も結構確保できている。寝かしつけと同時に2時間ぐらい寝てしまうことが多く起きると少しが頭がスッキリした状態で、趣味の時間に打ち込むことができている。大体22時〜3時ぐらいに活動していることが多い。完全に夜型の人間だが今の所このライフサイクルがいい感じ。\n\n## 2021年に向けて\n\n- このブログをもっと更新する。\n- 技術的なアウトプットを増やす。","src/content/blog/2020/1228_03.md","b40646bdb2328b91",{"html":1175,"metadata":1176},"\u003Cp>2020年お疲れ様でしたということで、ざっくり振り返ってみようと思います。\u003C/p>\n\u003Cp>以下の3つについて振り返ります。\u003C/p>\n\u003Cul>\n\u003Cli>仕事の振り返り\u003C/li>\n\u003Cli>技術の振り返り\u003C/li>\n\u003Cli>ライフスタイル\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"仕事の振り返り\">仕事の振り返り\u003C/h2>\n\u003Cp>今年の5月に、3度目の転職をしました。\u003C/p>\n\u003Cp>2019年の12月ぐらいから転職活動を初めて3月には、内定→受諾して転職活動を終えていました。\u003C/p>\n\u003Cp>今回の転職は、Twitterと会社の仲の良い人に事前に「転職するわ」と宣言して転職活動していました。\u003C/p>\n\u003Cp>はじめは、自分でスケジュール調整して面接に望んでいたのですが、結構初期の段階から面倒になってしまいエージェントを使いました。結構色々な企業の求人を応募して選考に進めたのは、6社ぐらいありました。1年ぶりぐらいの転職活動でしたが、状況は変わっていないというか「フロントエンドエンジニアがいない」「フルリニューアルしたいけど設計から関われるフロントエンドのリーダーポジションがいない」みたいな企業さんが結構多かったです。\u003C/p>\n\u003Cp>転職活動中にコロナが流行りだして、途中から面接がリモートになったのは非常に助かりました。わざわざ有給を取って朝から夜まではしごして色々な会社に出向くこともなくなり家から就業中でも時間調整して面接したりしていました。これで結構の数の面接をすることができたのは良かった。\u003C/p>\n\u003Cp>最終的には今の会社に決めて5月から入社しましたが、他に3社程内定が出ており非常に悩みました。決め手は、「給与」「働きやすさ」「エンジニアの技術力が高そう」という点でした。\u003C/p>\n\u003Cp>実際に入社してみてどうだったかはあまり深く書きませんが、フルリモートで働きやすい環境で仕事ができています。\u003C/p>\n\u003Ch2 id=\"技術の振り返り\">技術の振り返り\u003C/h2>\n\u003Cp>ごめんなさい。今年は何かこれと言って取り込んだことはなかったです。\u003C/p>\n\u003Cp>業務では相変わらずVue/Nuxtを使ってSPA開発をしているので去年とほぼ変わらず。個人ではNext.jsを使って何か作ったり、Goを触ってみたりとはしているが何か大きいアウトプットが出たかと言われるとない。これはいかんと思うので、来年こそは技術に全振りしてアウトプットを増やしていきたいと思っています。\u003C/p>\n\u003Ch2 id=\"ライフスタイル\">ライフスタイル\u003C/h2>\n\u003Cp>コロナの影響で今年は、ほぼ家で仕事していた。コロナ以前はちゃんと出社して仕事していたので最初こそ慣れなかったが、1ヶ月もすれば慣れて問題なく仕事できていたと思う。家がかなり狭く常に家族が横にいる状況で仕事をしていた。精神的に大丈夫なときもあったが、日によってはストレスに感じる日もあった。そういうこともあってか「引っ越し」という文字は常に頭の中にあってどうしようか考えていたが、やっと来年の2月に3LDKの賃貸マンションに引っ越すことが決定した。家を買うのはもう少し先かな。。\u003C/p>\n\u003Cp>生活リズムは、かなり変わりました。\u003C/p>\n\u003Cp>出社していた時は、通勤時間の関係で帰ると息子は既に寝ているという状態であまり一緒にいる時間がなかったけどフルリモートになってからは、仕事が終わったら息子をお風呂に入れてそのまま寝かしつけができるようになり、一緒にいる時間が多く取れるようになったのはとても良かった。\u003C/p>\n\u003Cp>自分の時間も結構確保できている。寝かしつけと同時に2時間ぐらい寝てしまうことが多く起きると少しが頭がスッキリした状態で、趣味の時間に打ち込むことができている。大体22時〜3時ぐらいに活動していることが多い。完全に夜型の人間だが今の所このライフサイクルがいい感じ。\u003C/p>\n\u003Ch2 id=\"2021年に向けて\">2021年に向けて\u003C/h2>\n\u003Cul>\n\u003Cli>このブログをもっと更新する。\u003C/li>\n\u003Cli>技術的なアウトプットを増やす。\u003C/li>\n\u003C/ul>",{"headings":1177,"localImagePaths":1186,"remoteImagePaths":1187,"frontmatter":1169,"imagePaths":1188},[1178,1180,1182,1184],{"depth":22,"slug":1179,"text":1179},"仕事の振り返り",{"depth":22,"slug":1181,"text":1181},"技術の振り返り",{"depth":22,"slug":1183,"text":1183},"ライフスタイル",{"depth":22,"slug":1185,"text":1185},"2021年に向けて",[],[],[],"2020/1228_03.md","2021/0103",{"id":1190,"data":1192,"body":1195,"filePath":1196,"digest":1197,"rendered":1198,"legacyId":1224},{"title":1193,"publishDate":1194},"React公式のチュートリアルをリファクタする","2021-01-03","Reactの[公式チュートリアル](https://ja.reactjs.org/tutorial/tutorial.html)は、Reactを最初に学ぶときに実際に手を動かしながらコードを書いて理解することができます。\n\n内容としては、三目並べを実装していきます。チュートリアルを順番にやっていき[完成したソースコード](https://codepen.io/gaearon/pen/gWWZgR?editors=0010)のようになり一応アプリケーションとしては完成します。\n\nチュートリアル的にはここまでできれば十分ではあるものの一歩先を考えると、以下の点が気になります。\n\n- クラスコンポーネントで書かれている。\n- 1つのファイルにViewやロジックが入っており見通しが悪い。（ファイル分割されていない）\n- TypeScriptになっていない。\n\nということで上記の点をReactのリハビリも兼ねてリファクタリングしてみました。\n\n完成版は[こちらのリポジトリ](https://github.com/ryokatsuse/react-tutorial)にあります。\n\n一応commitを追っていただければ、それっぽく何をしたか確認いただけると思います。\n\n## まずはチュートリアル通りに\n\n公式のチュートリアル通りにやっていきますが、この時点でコンポーネントだけは分割しました。\n\n## TypeScript対応\n\ncreate-react-appする際に```--template typescript```のオプションを指定していなかったので後追いで必要なパッケージを[追加](https://github.com/ryokatsuse/react-tutorial/commit/e2a7299bfb5c1c0c0dad75f197d3c9f531195e7b)しています。\n\nクラスコンポーネントのままTypeScriptする際は、以下のようにします。\n\n```tsx\n\n// propsの型を設定する\ninterface State {\n  history: History[]; // 別ファイルで指定した型情報\n  stepNumber: number;\n  xIsNext: boolean;\n}\n\n// React.Componetの後にpropsの型と空オブジェクトを設定\nclass Game extends React.Component\u003C{}, State> {\n  constructor(props: {}) {\n    super(props)\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    }\n  }\n```\n\n今回は簡単なアプリケーションなので以下の型情報だけ追加しました。\n\n- SquareTypeは、Union型で、盤面に表示する文字列と空欄の場合にnullにしておく\n- Historyは盤面に表示されている状態を保存しておくためのprops用の型\n\n```typescript\nexport type SquareType = 'X' | 'O' | null\n\nexport interface History {\n  squares: SquareType[]\n}\n\n```\n\n## 関数コンポーネントに書き換える。\n\nクラスコンポーネントでstateを使用していない箇所は、後述するHooksを使用せずとも関数ベースの記述に変更できます。\n例えば、Board.tsxの場合は以下のように変更できます。\n\n※boardNumbersの定数は普通に```{Array\u003Cnumber>(9).fill(0).map()```みたいな感じで書く方がシンプルかも。\n\n```tsx\nimport React from 'react'\nimport Square from './square'\nimport { SquareType } from '../../types/interface'\n\ninterface BoardProps {\n  squares: SquareType[]\n  onClick: (i: number) => void\n}\n\nconst boardNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\nconst Board: React.FC\u003CBoardProps> = ({squares, onClick}) => {\n  return (\n    \u003Cdiv className=\"board-row\">\n      { boardNumbers.map((boardNumber, i) => {\n          return (\n            \u003CSquare\n              key={i}\n              value={squares[i]}\n              onClick={() => onClick(i)}\n              boardNumber={boardNumber} />\n            )\n        })\n      }\n    \u003C/div>\n  )\n}\n\nexport default Board\n\n```\n\n変更ポイントとしては、\n- React.FC型にすることで```node_modules/@types/react/index.d.ts```の型定義を参照できる。（関数コンポーネントだと明確にわかるようになる）\n- thisを書かなくてよくなる。\n- renderを書かなくてよくなる。\n\n## Hooksに置き換える。\n\nstateを管理しているコンポーネントを関数コンポーネントに書き換える際は、Hooksを使う必要があります。\n\n[こちらのcommit](https://github.com/ryokatsuse/react-tutorial/commit/bb7e408441f6393e34280eef59ecf82c4dfd5a77)で確認できます。\n\n```tsx\nimport React, { useState } from \"react\"\nimport Board from \"./board\"\nimport { calculateWinner } from '../../utils/calclateWinner'\nimport { History } from '../../types/interface'\n\nconst Game: React.FC = () => {\n  // Hooks\n  const [history, setHistory] = useState\u003CHistory[]>([{ squares: Array(9).fill(null)}])\n  const [stepNumber, setStepNumber] = useState\u003Cnumber>(0)\n  const [xIsNext, setXIsNext] = useState\u003Cboolean>(true)\n```\n\nHooksには色々なフック関数があるので、詳しくは公式ドキュメントを確認していただければと思いますが、今回は```useState```を使います。\n\n- useStateをreact本体からimportする。\n- stateで定義していたpropsをHooks用に書き換える。\n- useStateは、変数と変数を更新する関数を返すことで引数の値を更新します。\n- 値を更新したい箇所でsetXXXXをすると値が更新されます。\n- constructorで指定してた箇所は不要になるので丸ごと削除。\n\n関数型に慣れている方であれば、Hooksを使用する方が見通しがよいと感じるかもしれないです。\n\n## 細かいロジックの分離\n\n今回チュートリアルで作成したロジックたちは[/utills/common.ts](https://github.com/ryokatsuse/react-tutorial/blob/main/src/utils/common.ts)というファイルにまとめてページ側から分離させました。\n\ncalculateWinner以外に以下の関数を追加。\n- ```hasResultWinner```というゲームの勝者が決まっている時とそうではない時で文言を出し分ける関数\n- ```immutableSquaresData```という盤面をクリックした後に参照している配列がイミュータブルではないコードになっているので、新しい配列を返すようにする関数。\n\n## Recoilで状態管理するようにしてみる。\n\n[Recoil](https://recoiljs.org/)は、ContextAPIで辛かった部分をいい感じに実現した状態管理ライブラリです。なんとなく使ってみたさがあったので今回はじめて触ってみました。\n\nまずは、インストールします。\n```\nyarn add recoil\n```\n\nインストールしたらRecoilで状態管理させたい範囲を```\u003CRecoilRoot>```で囲います。\n\n※App.tsxの例\n```tsx\nimport Game from \"./views/components/game\"\nimport {\n  RecoilRoot\n} from 'recoil'\n\nfunction App() {\n  return (\n    \u003CRecoilRoot>\n      \u003Cdiv className=\"App\">\n        \u003CGame />\n      \u003C/div>\n    \u003C/RecoilRoot>\n  );\n}\n\nexport default App\n\n```\n\n### 使い方\n\nHooksのuseStateは直接のデータを呼び出して扱っていましたが、Recoilでは、Atomと呼ばれるステートオブジェクトを通じてやり取りしていきます。\n今回は以下のようなファイルを作成します。\n\n```typeScript\nimport { atom } from \"recoil\";\n\nexport const historyItems = atom({\n  key: \"historyItems\",\n  default: [{ squares: Array(9).fill(null)}]\n});\n\nexport const stepNumber = atom({\n  key: \"step\",\n  default: 0\n});\n\nexport const xIsNext = atom({\n  key: \"xIsNext\",\n  default: true\n});\n```\nkeyは適当でOKです。defaultにはデフォルト値をいれます。今回の場合ですと、useStateで設定していた値をそのまま入れればOKです。\n\nここまで来たら後は呼び出すだけです。上記のファイルを使用したいコンポーネント（今回はGame.tsx）でインポートした後以下のようにuseStateしていた部分を書き換えます。\n\n```typescript\nconst Game: React.FC = () => {\n  // Recoil\n  const [history, setHistory] = useRecoilState\u003CHistory[]>(historyItems)\n  const [step, setStepNumber] = useRecoilState\u003Cnumber>(stepNumber)\n  const [_xIsNext, setXIsNext] = useRecoilState\u003Cboolean>(xIsNext)\n```\n\n基本的にはHooksと同じような使い方になりますが、ただ値を取得したい場合(setXXXが不要)などは```useRecoilValue```というフックがあります。\n\nさらに読み取りしないで書き込みだけしたい場合には\n```useSetRecoilState```というフックもありReactの場合、値を読み取らない（setだけを行う）= 値が変化したときも再レンダリングされないのでパフォーマンスを考える時によいです。\n\n今回は、使いませんでしたが、Selectorを使うと、Atomの値を加工して取得することもできます。（Vue.jsのcomputedみたいなノリ）更にこのSelectorは非同期処理にも対応しています。\n\n## 最後に\n\nここまでやると大分可読性が高くスッキリしたコードになりました。今回は実施していませんでしたが、CSS in JSでcssを書いてUIをリッチにしてみると尚良さそうだと感じました。\n\nまた今回Recoilを試せたのは良かったです。Hooksは触ったことあったのですが、ほぼ同じようなノリで書けるし、個人的にはかなり好きなライブラリでした。機能もそこまで多くないので1日あれば習得可能なので\n複雑な状態管理ではない場合は使ってみるのはありだと思いました。\n\nデメリットとして、関数内のコードが若干太り気味になります。同時にやっぱりReduxってスゲーなと思いました。実際にプロダクションへの導入は\nまだまだ厳しい印象でした。","src/content/blog/2021/0103.md","b91c237a7b1b3d11",{"html":1199,"metadata":1200},"\u003Cp>Reactの\u003Ca href=\"https://ja.reactjs.org/tutorial/tutorial.html\">公式チュートリアル\u003C/a>は、Reactを最初に学ぶときに実際に手を動かしながらコードを書いて理解することができます。\u003C/p>\n\u003Cp>内容としては、三目並べを実装していきます。チュートリアルを順番にやっていき\u003Ca href=\"https://codepen.io/gaearon/pen/gWWZgR?editors=0010\">完成したソースコード\u003C/a>のようになり一応アプリケーションとしては完成します。\u003C/p>\n\u003Cp>チュートリアル的にはここまでできれば十分ではあるものの一歩先を考えると、以下の点が気になります。\u003C/p>\n\u003Cul>\n\u003Cli>クラスコンポーネントで書かれている。\u003C/li>\n\u003Cli>1つのファイルにViewやロジックが入っており見通しが悪い。（ファイル分割されていない）\u003C/li>\n\u003Cli>TypeScriptになっていない。\u003C/li>\n\u003C/ul>\n\u003Cp>ということで上記の点をReactのリハビリも兼ねてリファクタリングしてみました。\u003C/p>\n\u003Cp>完成版は\u003Ca href=\"https://github.com/ryokatsuse/react-tutorial\">こちらのリポジトリ\u003C/a>にあります。\u003C/p>\n\u003Cp>一応commitを追っていただければ、それっぽく何をしたか確認いただけると思います。\u003C/p>\n\u003Ch2 id=\"まずはチュートリアル通りに\">まずはチュートリアル通りに\u003C/h2>\n\u003Cp>公式のチュートリアル通りにやっていきますが、この時点でコンポーネントだけは分割しました。\u003C/p>\n\u003Ch2 id=\"typescript対応\">TypeScript対応\u003C/h2>\n\u003Cp>create-react-appする際に\u003Ccode>--template typescript\u003C/code>のオプションを指定していなかったので後追いで必要なパッケージを\u003Ca href=\"https://github.com/ryokatsuse/react-tutorial/commit/e2a7299bfb5c1c0c0dad75f197d3c9f531195e7b\">追加\u003C/a>しています。\u003C/p>\n\u003Cp>クラスコンポーネントのままTypeScriptする際は、以下のようにします。\u003C/p>\n\u003Cpre class=\"language-tsx\" data-language=\"tsx\">\u003Ccode is:raw=\"\" class=\"language-tsx\">\n\u003Cspan class=\"token comment\">// propsの型を設定する\u003C/span>\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">State\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  history\u003Cspan class=\"token operator\">:\u003C/span> History\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// 別ファイルで指定した型情報\u003C/span>\n  stepNumber\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  xIsNext\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token comment\">// React.Componetの後にpropsの型と空オブジェクトを設定\u003C/span>\n\u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">Game\u003C/span> \u003Cspan class=\"token keyword\">extends\u003C/span> \u003Cspan class=\"token class-name\">React\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>Component\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> State\u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">constructor\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>props\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">super\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>props\u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>state \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      history\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n        squares\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token function\">Array\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">9\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fill\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">null\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      stepNumber\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      xIsNext\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>今回は簡単なアプリケーションなので以下の型情報だけ追加しました。\u003C/p>\n\u003Cul>\n\u003Cli>SquareTypeは、Union型で、盤面に表示する文字列と空欄の場合にnullにしておく\u003C/li>\n\u003Cli>Historyは盤面に表示されている状態を保存しておくためのprops用の型\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">SquareType\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">'X'\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token string\">'O'\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token keyword\">null\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">History\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  squares\u003Cspan class=\"token operator\">:\u003C/span> SquareType\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch2 id=\"関数コンポーネントに書き換える\">関数コンポーネントに書き換える。\u003C/h2>\n\u003Cp>クラスコンポーネントでstateを使用していない箇所は、後述するHooksを使用せずとも関数ベースの記述に変更できます。\n例えば、Board.tsxの場合は以下のように変更できます。\u003C/p>\n\u003Cp>※boardNumbersの定数は普通に\u003Ccode>{Array&#x3C;number>(9).fill(0).map()\u003C/code>みたいな感じで書く方がシンプルかも。\u003C/p>\n\u003Cpre class=\"language-tsx\" data-language=\"tsx\">\u003Ccode is:raw=\"\" class=\"language-tsx\">\u003Cspan class=\"token keyword\">import\u003C/span> React \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'react'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> Square \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./square'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> SquareType \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'../../types/interface'\u003C/span>\n\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">BoardProps\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  squares\u003Cspan class=\"token operator\">:\u003C/span> SquareType\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n  \u003Cspan class=\"token function-variable function\">onClick\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> boardNumbers \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">6\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">7\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">8\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> Board\u003Cspan class=\"token operator\">:\u003C/span> React\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token constant\">FC\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>BoardProps\u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>squares\u003Cspan class=\"token punctuation\">,\u003C/span> onClick\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">className\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>board-row\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n      \u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> boardNumbers\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>boardNumber\u003Cspan class=\"token punctuation\">,\u003C/span> i\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n          \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n            \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Square\u003C/span>\u003C/span>\n              \u003Cspan class=\"token attr-name\">key\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>i\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span>\n              \u003Cspan class=\"token attr-name\">value\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>squares\u003Cspan class=\"token punctuation\">[\u003C/span>i\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span>\n              \u003Cspan class=\"token attr-name\">onClick\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token function\">onClick\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span>\n              \u003Cspan class=\"token attr-name\">boardNumber\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>boardNumber\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n            \u003Cspan class=\"token punctuation\">)\u003C/span>\n        \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token plain-text\">\n    \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> Board\n\n\u003C/code>\u003C/pre>\n\u003Cp>変更ポイントとしては、\u003C/p>\n\u003Cul>\n\u003Cli>React.FC型にすることで\u003Ccode>node_modules/@types/react/index.d.ts\u003C/code>の型定義を参照できる。（関数コンポーネントだと明確にわかるようになる）\u003C/li>\n\u003Cli>thisを書かなくてよくなる。\u003C/li>\n\u003Cli>renderを書かなくてよくなる。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"hooksに置き換える\">Hooksに置き換える。\u003C/h2>\n\u003Cp>stateを管理しているコンポーネントを関数コンポーネントに書き換える際は、Hooksを使う必要があります。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ryokatsuse/react-tutorial/commit/bb7e408441f6393e34280eef59ecf82c4dfd5a77\">こちらのcommit\u003C/a>で確認できます。\u003C/p>\n\u003Cpre class=\"language-tsx\" data-language=\"tsx\">\u003Ccode is:raw=\"\" class=\"language-tsx\">\u003Cspan class=\"token keyword\">import\u003C/span> React\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> useState \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">\"react\"\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> Board \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">\"./board\"\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> calculateWinner \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'../../utils/calclateWinner'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> History \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'../../types/interface'\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> Game\u003Cspan class=\"token operator\">:\u003C/span> React\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function-variable function\">FC\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token comment\">// Hooks\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>history\u003Cspan class=\"token punctuation\">,\u003C/span> setHistory\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">useState\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>History\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> squares\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token function\">Array\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">9\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fill\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">null\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>stepNumber\u003Cspan class=\"token punctuation\">,\u003C/span> setStepNumber\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">useState\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>xIsNext\u003Cspan class=\"token punctuation\">,\u003C/span> setXIsNext\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">useState\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token builtin\">boolean\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>Hooksには色々なフック関数があるので、詳しくは公式ドキュメントを確認していただければと思いますが、今回は\u003Ccode>useState\u003C/code>を使います。\u003C/p>\n\u003Cul>\n\u003Cli>useStateをreact本体からimportする。\u003C/li>\n\u003Cli>stateで定義していたpropsをHooks用に書き換える。\u003C/li>\n\u003Cli>useStateは、変数と変数を更新する関数を返すことで引数の値を更新します。\u003C/li>\n\u003Cli>値を更新したい箇所でsetXXXXをすると値が更新されます。\u003C/li>\n\u003Cli>constructorで指定してた箇所は不要になるので丸ごと削除。\u003C/li>\n\u003C/ul>\n\u003Cp>関数型に慣れている方であれば、Hooksを使用する方が見通しがよいと感じるかもしれないです。\u003C/p>\n\u003Ch2 id=\"細かいロジックの分離\">細かいロジックの分離\u003C/h2>\n\u003Cp>今回チュートリアルで作成したロジックたちは\u003Ca href=\"https://github.com/ryokatsuse/react-tutorial/blob/main/src/utils/common.ts\">/utills/common.ts\u003C/a>というファイルにまとめてページ側から分離させました。\u003C/p>\n\u003Cp>calculateWinner以外に以下の関数を追加。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>hasResultWinner\u003C/code>というゲームの勝者が決まっている時とそうではない時で文言を出し分ける関数\u003C/li>\n\u003Cli>\u003Ccode>immutableSquaresData\u003C/code>という盤面をクリックした後に参照している配列がイミュータブルではないコードになっているので、新しい配列を返すようにする関数。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"recoilで状態管理するようにしてみる\">Recoilで状態管理するようにしてみる。\u003C/h2>\n\u003Cp>\u003Ca href=\"https://recoiljs.org/\">Recoil\u003C/a>は、ContextAPIで辛かった部分をいい感じに実現した状態管理ライブラリです。なんとなく使ってみたさがあったので今回はじめて触ってみました。\u003C/p>\n\u003Cp>まずは、インストールします。\u003C/p>\n\u003Cpre class=\"language-plaintext\" data-language=\"plaintext\">\u003Ccode is:raw=\"\" class=\"language-plaintext\">yarn add recoil\n\u003C/code>\u003C/pre>\n\u003Cp>インストールしたらRecoilで状態管理させたい範囲を\u003Ccode>&#x3C;RecoilRoot>\u003C/code>で囲います。\u003C/p>\n\u003Cp>※App.tsxの例\u003C/p>\n\u003Cpre class=\"language-tsx\" data-language=\"tsx\">\u003Ccode is:raw=\"\" class=\"language-tsx\">\u003Cspan class=\"token keyword\">import\u003C/span> Game \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">\"./views/components/game\"\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  RecoilRoot\n\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'recoil'\u003C/span>\n\n\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">App\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">RecoilRoot\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n      \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">className\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>App\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n        \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Game\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n      \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n    \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>\u003Cspan class=\"token class-name\">RecoilRoot\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> App\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"使い方\">使い方\u003C/h3>\n\u003Cp>HooksのuseStateは直接のデータを呼び出して扱っていましたが、Recoilでは、Atomと呼ばれるステートオブジェクトを通じてやり取りしていきます。\n今回は以下のようなファイルを作成します。\u003C/p>\n\u003Cpre class=\"language-typeScript\" data-language=\"typeScript\">\u003Ccode is:raw=\"\" class=\"language-typeScript\">import { atom } from \"recoil\";\n\nexport const historyItems = atom({\n  key: \"historyItems\",\n  default: [{ squares: Array(9).fill(null)}]\n});\n\nexport const stepNumber = atom({\n  key: \"step\",\n  default: 0\n});\n\nexport const xIsNext = atom({\n  key: \"xIsNext\",\n  default: true\n});\n\u003C/code>\u003C/pre>\n\u003Cp>keyは適当でOKです。defaultにはデフォルト値をいれます。今回の場合ですと、useStateで設定していた値をそのまま入れればOKです。\u003C/p>\n\u003Cp>ここまで来たら後は呼び出すだけです。上記のファイルを使用したいコンポーネント（今回はGame.tsx）でインポートした後以下のようにuseStateしていた部分を書き換えます。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\u003Cspan class=\"token keyword\">const\u003C/span> Game\u003Cspan class=\"token operator\">:\u003C/span> React\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function-variable function\">FC\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token comment\">// Recoil\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>history\u003Cspan class=\"token punctuation\">,\u003C/span> setHistory\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">useRecoilState\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>History\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>historyItems\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>step\u003Cspan class=\"token punctuation\">,\u003C/span> setStepNumber\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">useRecoilState\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>stepNumber\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>_xIsNext\u003Cspan class=\"token punctuation\">,\u003C/span> setXIsNext\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">useRecoilState\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token builtin\">boolean\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xIsNext\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>基本的にはHooksと同じような使い方になりますが、ただ値を取得したい場合(setXXXが不要)などは\u003Ccode>useRecoilValue\u003C/code>というフックがあります。\u003C/p>\n\u003Cp>さらに読み取りしないで書き込みだけしたい場合には\n\u003Ccode>useSetRecoilState\u003C/code>というフックもありReactの場合、値を読み取らない（setだけを行う）= 値が変化したときも再レンダリングされないのでパフォーマンスを考える時によいです。\u003C/p>\n\u003Cp>今回は、使いませんでしたが、Selectorを使うと、Atomの値を加工して取得することもできます。（Vue.jsのcomputedみたいなノリ）更にこのSelectorは非同期処理にも対応しています。\u003C/p>\n\u003Ch2 id=\"最後に\">最後に\u003C/h2>\n\u003Cp>ここまでやると大分可読性が高くスッキリしたコードになりました。今回は実施していませんでしたが、CSS in JSでcssを書いてUIをリッチにしてみると尚良さそうだと感じました。\u003C/p>\n\u003Cp>また今回Recoilを試せたのは良かったです。Hooksは触ったことあったのですが、ほぼ同じようなノリで書けるし、個人的にはかなり好きなライブラリでした。機能もそこまで多くないので1日あれば習得可能なので\n複雑な状態管理ではない場合は使ってみるのはありだと思いました。\u003C/p>\n\u003Cp>デメリットとして、関数内のコードが若干太り気味になります。同時にやっぱりReduxってスゲーなと思いました。実際にプロダクションへの導入は\nまだまだ厳しい印象でした。\u003C/p>",{"headings":1201,"localImagePaths":1221,"remoteImagePaths":1222,"frontmatter":1192,"imagePaths":1223},[1202,1204,1207,1210,1213,1215,1218,1219],{"depth":22,"slug":1203,"text":1203},"まずはチュートリアル通りに",{"depth":22,"slug":1205,"text":1206},"typescript対応","TypeScript対応",{"depth":22,"slug":1208,"text":1209},"関数コンポーネントに書き換える","関数コンポーネントに書き換える。",{"depth":22,"slug":1211,"text":1212},"hooksに置き換える","Hooksに置き換える。",{"depth":22,"slug":1214,"text":1214},"細かいロジックの分離",{"depth":22,"slug":1216,"text":1217},"recoilで状態管理するようにしてみる","Recoilで状態管理するようにしてみる。",{"depth":29,"slug":1113,"text":1113},{"depth":22,"slug":1220,"text":1220},"最後に",[],[],[],"2021/0103.md","2021/0207",{"id":1225,"data":1227,"body":1230,"filePath":1231,"digest":1232,"rendered":1233,"legacyId":1249},{"title":1228,"publishDate":1229},"引っ越しをした","2021-02-07","東京都練馬区から東京都小平市に引っ越したので、経緯と1週間過ごした感想を書く。\n\n### 引越し前の状況\n\n2LDKのマンションに家族3人（妻、子供）で過ごしていたが、コロナの影響で在宅勤務が続く中自分１人で作業できる環境がなくこれが割とストレスだった。\n作業に集中したい時に子供が同じ空間にいると気になってしまい集中出来ないことがあったり、MTG時も家族の会話が入ってしまうのでPCを持って寝室まで移動したり。。\n\n以上のことから\n\n- 仕事部屋が必要\n- 最低限3LDKは欲しい\n- 家賃はできれば今と同額がぐらいが理想\n- できれば練馬区近辺\n\nという条件で部屋を探すことにした。\n\n以下が作業スペースだったがこの空間には、妻も子供もいて近くでテレビを見たり、おもちゃで遊んだりしていた。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">アーロンチェア最高。床の傷防止を買わないと。 \u003Ca href=\"https://t.co/EaAgoMYoM7\">pic.twitter.com/EaAgoMYoM7\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1281064673496821761?ref_src=twsrc%5Etfw\">July 9, 2020\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n### 物件探し\n\n引越し先は、色々探していたが練馬区近辺で3LDKだと家賃が高く条件に合う物件はほぼなく、あっても築年数が古くてエアコンがなかったりするような感じだった。\n\n23区は諦めて西東京都市、清瀬市などの物件を探してみると条件に合う物件が出てきた。ただ駅から30分以上離れているような所が多く近くにスーパーもなく\nかなり厳しい感じだった。コロナで外出はほとんどしないし、ネットスーパー頼みにすればワンチャンあるかとも思ったが家族と話して「さすがに遠いね」という結論になった。\n\nその後色々あって花小金井にフルリノベーションしたマンションがあり、家賃も安かったので問い合わせしたが申し込みが入っていた。問い合わせした不動産に行ってその場で、紹介された小平市のリノベーションした3LDKのマンションを、内見してところ探していた条件に近かったので、そのままで申し込みして入居することにした。\n\n### 引っ越し業者\n\n引っ越しは[アップル引っ越しセンター](https://apple-hikkoshi.jp/)を使った。この引っ越し業者は、今回含めて3回目だがとにかくスムーズに引っ越しを完了できる。\n\n引っ越し業者の見積もりって他社と比較しながら交渉して安くする事が多いが割とディレクション力が求められるし、面倒だし、コロナで訪問してほしくない。アップル引っ越しセンターは、すべてWEBで完結できるのでユーザー体験がとても良い。荷物を入力する所も冷蔵庫、洗濯機などの大型家電以外は特に個数を記入することなく見積もってくれる。（後でアーロンチェアや割と大きめの棚をいくつか備考欄に記入したが見積もり額に変更はなかった。）\n\n### 引っ越しして\n\n引っ越し自体は順調に終わった。引っ越しした直後はネットが遅くこれじゃ仕事できん！！という状況だったがIPv6で接続できるようになって快適にはなった。ただルーターから作業部屋まで障害物が多かったことで速度があまり出ておらず、急遽メッシュwifiを購入したら改善された。\n\n引越し先の近くの様子はまだ何も撮っていないけどのどかな感じ。練馬区に住んでいた時よりもスーパーの規模が小さく利便性は劣ってしまうが、生活する上では特に不便はない。\n\n小平市はゴミ袋が有料でしかも割と高くゴミの出し方は都内ように気軽に捨てれる感じではなさそう。\n\n\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">引越して仕事部屋の作業環境一旦こんな感じにした。モニターアームが貧弱なせいで、モニターが垂れ下がるのでオライリー本を差し込んで垂れないようにした。 \u003Ca href=\"https://t.co/qjZ9baOi5w\">pic.twitter.com/qjZ9baOi5w\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1357613811990024196?ref_src=twsrc%5Etfw\">February 5, 2021\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n### これから\n\nとりあえず作業部屋が出来たので部屋をいい感じにしていく。","src/content/blog/2021/0207.md","4b9c9300b2bb9971",{"html":1234,"metadata":1235},"\u003Cp>東京都練馬区から東京都小平市に引っ越したので、経緯と1週間過ごした感想を書く。\u003C/p>\n\u003Ch3 id=\"引越し前の状況\">引越し前の状況\u003C/h3>\n\u003Cp>2LDKのマンションに家族3人（妻、子供）で過ごしていたが、コロナの影響で在宅勤務が続く中自分１人で作業できる環境がなくこれが割とストレスだった。\n作業に集中したい時に子供が同じ空間にいると気になってしまい集中出来ないことがあったり、MTG時も家族の会話が入ってしまうのでPCを持って寝室まで移動したり。。\u003C/p>\n\u003Cp>以上のことから\u003C/p>\n\u003Cul>\n\u003Cli>仕事部屋が必要\u003C/li>\n\u003Cli>最低限3LDKは欲しい\u003C/li>\n\u003Cli>家賃はできれば今と同額がぐらいが理想\u003C/li>\n\u003Cli>できれば練馬区近辺\u003C/li>\n\u003C/ul>\n\u003Cp>という条件で部屋を探すことにした。\u003C/p>\n\u003Cp>以下が作業スペースだったがこの空間には、妻も子供もいて近くでテレビを見たり、おもちゃで遊んだりしていた。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">アーロンチェア最高。床の傷防止を買わないと。 \u003Ca href=\"https://t.co/EaAgoMYoM7\">pic.twitter.com/EaAgoMYoM7\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1281064673496821761?ref_src=twsrc%5Etfw\">July 9, 2020\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Ch3 id=\"物件探し\">物件探し\u003C/h3>\n\u003Cp>引越し先は、色々探していたが練馬区近辺で3LDKだと家賃が高く条件に合う物件はほぼなく、あっても築年数が古くてエアコンがなかったりするような感じだった。\u003C/p>\n\u003Cp>23区は諦めて西東京都市、清瀬市などの物件を探してみると条件に合う物件が出てきた。ただ駅から30分以上離れているような所が多く近くにスーパーもなく\nかなり厳しい感じだった。コロナで外出はほとんどしないし、ネットスーパー頼みにすればワンチャンあるかとも思ったが家族と話して「さすがに遠いね」という結論になった。\u003C/p>\n\u003Cp>その後色々あって花小金井にフルリノベーションしたマンションがあり、家賃も安かったので問い合わせしたが申し込みが入っていた。問い合わせした不動産に行ってその場で、紹介された小平市のリノベーションした3LDKのマンションを、内見してところ探していた条件に近かったので、そのままで申し込みして入居することにした。\u003C/p>\n\u003Ch3 id=\"引っ越し業者\">引っ越し業者\u003C/h3>\n\u003Cp>引っ越しは\u003Ca href=\"https://apple-hikkoshi.jp/\">アップル引っ越しセンター\u003C/a>を使った。この引っ越し業者は、今回含めて3回目だがとにかくスムーズに引っ越しを完了できる。\u003C/p>\n\u003Cp>引っ越し業者の見積もりって他社と比較しながら交渉して安くする事が多いが割とディレクション力が求められるし、面倒だし、コロナで訪問してほしくない。アップル引っ越しセンターは、すべてWEBで完結できるのでユーザー体験がとても良い。荷物を入力する所も冷蔵庫、洗濯機などの大型家電以外は特に個数を記入することなく見積もってくれる。（後でアーロンチェアや割と大きめの棚をいくつか備考欄に記入したが見積もり額に変更はなかった。）\u003C/p>\n\u003Ch3 id=\"引っ越しして\">引っ越しして\u003C/h3>\n\u003Cp>引っ越し自体は順調に終わった。引っ越しした直後はネットが遅くこれじゃ仕事できん！！という状況だったがIPv6で接続できるようになって快適にはなった。ただルーターから作業部屋まで障害物が多かったことで速度があまり出ておらず、急遽メッシュwifiを購入したら改善された。\u003C/p>\n\u003Cp>引越し先の近くの様子はまだ何も撮っていないけどのどかな感じ。練馬区に住んでいた時よりもスーパーの規模が小さく利便性は劣ってしまうが、生活する上では特に不便はない。\u003C/p>\n\u003Cp>小平市はゴミ袋が有料でしかも割と高くゴミの出し方は都内ように気軽に捨てれる感じではなさそう。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">引越して仕事部屋の作業環境一旦こんな感じにした。モニターアームが貧弱なせいで、モニターが垂れ下がるのでオライリー本を差し込んで垂れないようにした。 \u003Ca href=\"https://t.co/qjZ9baOi5w\">pic.twitter.com/qjZ9baOi5w\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1357613811990024196?ref_src=twsrc%5Etfw\">February 5, 2021\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Ch3 id=\"これから\">これから\u003C/h3>\n\u003Cp>とりあえず作業部屋が出来たので部屋をいい感じにしていく。\u003C/p>",{"headings":1236,"localImagePaths":1246,"remoteImagePaths":1247,"frontmatter":1227,"imagePaths":1248},[1237,1239,1241,1243,1245],{"depth":29,"slug":1238,"text":1238},"引越し前の状況",{"depth":29,"slug":1240,"text":1240},"物件探し",{"depth":29,"slug":1242,"text":1242},"引っ越し業者",{"depth":29,"slug":1244,"text":1244},"引っ越しして",{"depth":29,"slug":105,"text":105},[],[],[],"2021/0207.md","2021/0214",{"id":1250,"data":1252,"body":1255,"filePath":1256,"digest":1257,"rendered":1258,"legacyId":1289},{"title":1253,"publishDate":1254},"今まで行ったサウナで思い出の場所(ほぼ東京)","2021-02-14","### 豊島園 庭の湯\n\nhttps://sauna-ikitai.com/saunas/1647\n\n- フィンランドサウナの温度はいい感じで中は広め。\n- 水着着用で入れるサウナがあるので家族で楽しめる。\n- かなり前に行ったので今は結構変わっているかも？\n- としまえん閉園したので人減っているってサ道スペシャルで言っていたので心配。近々行きたい\n\n\n### RAKU SPA 1010 神田\n\nhttps://sauna-ikitai.com/saunas/5454\n\n- 昔淡路町で副業していたときに近くにあったのでよく行ってた。\n- サウナはまあまあ暑かった気がする。\n- 水風呂寒い\n- 元々銭湯だったのをスパにしたらしいけど中は結構綺麗。\n- ハンモックがあって風呂上がりはそこで寝てた。\n\n\n### アクア東中野\n\nhttps://sauna-ikitai.com/saunas/1754\n\n- 前職の人とかなりの頻度で行ってた。（今でもたまに行く）\n- サウナは狭いから混んでると入れない\n- 水風呂入れないぐらい寒い\n- 銭湯なのに外にプールがあって気持ちいい\n- 終わった後に近くの居酒屋で串カツを食べるのがルーチン\n\n### タイムズ スパ・レスタ\n\nhttps://sauna-ikitai.com/saunas/1687\n\n- かなり行きつけな場所（定期的に行ってる）\n- かなり綺麗なので女性もおすすめ（女性専用スペースもある）\n- サウナは割と広めなのでゆったりしてる。　暑さは丁度いい感じ。\n- 平日に行くことが多かったがかなり快適（お笑いのロバート秋山に遭遇したことある。）\n- 休憩スペースがめちゃ広いのとwifiが快適でここで仕事すると捗る。\n\n### かるまる 池袋\n\nhttps://sauna-ikitai.com/saunas/6656\n\n- 1回しか行ったことないけどかなり良かった。\n- サウナ4つと水風呂4つあるけどケロサウナがいい。\n- オープンしたばっかりで綺麗\n- からまる特性ビーフカレーがうまい\n- コワーキングスペースがあるのでここで仕事できる。\n\n### オアシスサウナアスティル\n\nhttps://sauna-ikitai.com/saunas/1889\n\n- 2回いったことある。新橋のオアシス\n- とにかくお風呂が広い。サウナも広い。\n- サウナ自体は暑くないから長い時間入れる感じ\n- 休憩スペースは狭いので期待できないけど有料でデラックスシートなる有料エリアに入れてくつろげる\n\n### THE SPA 成城\n\nhttps://sauna-ikitai.com/saunas/1933\n\n- 学生時代にお世話になった場所\n- 狭いけど中は綺麗。\n- 女湯だと塩サウナというのがあってどういう感じなのか気になる。\n\n\n### 湯乃泉 草加健康センター\n\nhttps://sauna-ikitai.com/saunas/1523\n\n- サウナーの知り合いにおすすめされ一緒に行った場所\n- 外観がかなり暗く一瞬廃墟かなと思ってしまう。\n- サウナの聖地と呼ばれている。\n- サウナはかなり良かった。暑め。\n- お食事処が広く開放感がある。ご飯美味しい。\n\n### 行ってみたい場所\n\n- サウナ&カプセルホテル北欧\n- サウナ錦糸町 (カプセルイン錦糸町)\n- テルマー湯\n- 天空のアジト マルシンスパ","src/content/blog/2021/0214.md","0f835ecf7a3da984",{"html":1259,"metadata":1260},"\u003Ch3 id=\"豊島園-庭の湯\">豊島園 庭の湯\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/1647\">https://sauna-ikitai.com/saunas/1647\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>フィンランドサウナの温度はいい感じで中は広め。\u003C/li>\n\u003Cli>水着着用で入れるサウナがあるので家族で楽しめる。\u003C/li>\n\u003Cli>かなり前に行ったので今は結構変わっているかも？\u003C/li>\n\u003Cli>としまえん閉園したので人減っているってサ道スペシャルで言っていたので心配。近々行きたい\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"raku-spa-1010-神田\">RAKU SPA 1010 神田\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/5454\">https://sauna-ikitai.com/saunas/5454\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>昔淡路町で副業していたときに近くにあったのでよく行ってた。\u003C/li>\n\u003Cli>サウナはまあまあ暑かった気がする。\u003C/li>\n\u003Cli>水風呂寒い\u003C/li>\n\u003Cli>元々銭湯だったのをスパにしたらしいけど中は結構綺麗。\u003C/li>\n\u003Cli>ハンモックがあって風呂上がりはそこで寝てた。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"アクア東中野\">アクア東中野\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/1754\">https://sauna-ikitai.com/saunas/1754\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>前職の人とかなりの頻度で行ってた。（今でもたまに行く）\u003C/li>\n\u003Cli>サウナは狭いから混んでると入れない\u003C/li>\n\u003Cli>水風呂入れないぐらい寒い\u003C/li>\n\u003Cli>銭湯なのに外にプールがあって気持ちいい\u003C/li>\n\u003Cli>終わった後に近くの居酒屋で串カツを食べるのがルーチン\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"タイムズ-スパレスタ\">タイムズ スパ・レスタ\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/1687\">https://sauna-ikitai.com/saunas/1687\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>かなり行きつけな場所（定期的に行ってる）\u003C/li>\n\u003Cli>かなり綺麗なので女性もおすすめ（女性専用スペースもある）\u003C/li>\n\u003Cli>サウナは割と広めなのでゆったりしてる。　暑さは丁度いい感じ。\u003C/li>\n\u003Cli>平日に行くことが多かったがかなり快適（お笑いのロバート秋山に遭遇したことある。）\u003C/li>\n\u003Cli>休憩スペースがめちゃ広いのとwifiが快適でここで仕事すると捗る。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"かるまる-池袋\">かるまる 池袋\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/6656\">https://sauna-ikitai.com/saunas/6656\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>1回しか行ったことないけどかなり良かった。\u003C/li>\n\u003Cli>サウナ4つと水風呂4つあるけどケロサウナがいい。\u003C/li>\n\u003Cli>オープンしたばっかりで綺麗\u003C/li>\n\u003Cli>からまる特性ビーフカレーがうまい\u003C/li>\n\u003Cli>コワーキングスペースがあるのでここで仕事できる。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"オアシスサウナアスティル\">オアシスサウナアスティル\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/1889\">https://sauna-ikitai.com/saunas/1889\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>2回いったことある。新橋のオアシス\u003C/li>\n\u003Cli>とにかくお風呂が広い。サウナも広い。\u003C/li>\n\u003Cli>サウナ自体は暑くないから長い時間入れる感じ\u003C/li>\n\u003Cli>休憩スペースは狭いので期待できないけど有料でデラックスシートなる有料エリアに入れてくつろげる\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"the-spa-成城\">THE SPA 成城\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/1933\">https://sauna-ikitai.com/saunas/1933\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>学生時代にお世話になった場所\u003C/li>\n\u003Cli>狭いけど中は綺麗。\u003C/li>\n\u003Cli>女湯だと塩サウナというのがあってどういう感じなのか気になる。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"湯乃泉-草加健康センター\">湯乃泉 草加健康センター\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sauna-ikitai.com/saunas/1523\">https://sauna-ikitai.com/saunas/1523\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>サウナーの知り合いにおすすめされ一緒に行った場所\u003C/li>\n\u003Cli>外観がかなり暗く一瞬廃墟かなと思ってしまう。\u003C/li>\n\u003Cli>サウナの聖地と呼ばれている。\u003C/li>\n\u003Cli>サウナはかなり良かった。暑め。\u003C/li>\n\u003Cli>お食事処が広く開放感がある。ご飯美味しい。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"行ってみたい場所\">行ってみたい場所\u003C/h3>\n\u003Cul>\n\u003Cli>サウナ&#x26;カプセルホテル北欧\u003C/li>\n\u003Cli>サウナ錦糸町 (カプセルイン錦糸町)\u003C/li>\n\u003Cli>テルマー湯\u003C/li>\n\u003Cli>天空のアジト マルシンスパ\u003C/li>\n\u003C/ul>",{"headings":1261,"localImagePaths":1286,"remoteImagePaths":1287,"frontmatter":1252,"imagePaths":1288},[1262,1265,1268,1270,1273,1276,1278,1281,1284],{"depth":29,"slug":1263,"text":1264},"豊島園-庭の湯","豊島園 庭の湯",{"depth":29,"slug":1266,"text":1267},"raku-spa-1010-神田","RAKU SPA 1010 神田",{"depth":29,"slug":1269,"text":1269},"アクア東中野",{"depth":29,"slug":1271,"text":1272},"タイムズ-スパレスタ","タイムズ スパ・レスタ",{"depth":29,"slug":1274,"text":1275},"かるまる-池袋","かるまる 池袋",{"depth":29,"slug":1277,"text":1277},"オアシスサウナアスティル",{"depth":29,"slug":1279,"text":1280},"the-spa-成城","THE SPA 成城",{"depth":29,"slug":1282,"text":1283},"湯乃泉-草加健康センター","湯乃泉 草加健康センター",{"depth":29,"slug":1285,"text":1285},"行ってみたい場所",[],[],[],"2021/0214.md","2021/0208",{"id":1290,"data":1292,"body":1295,"filePath":1296,"digest":1297,"rendered":1298,"legacyId":1311},{"title":1293,"publishDate":1294},"アジャイルサムライを読んだ","2021-02-08","どこかのタイミングで読もうと思ってて読めていなかった名著。\n\n読まなかった理由としては仕事で体系的にスクラムをやっていたことに加えてスクラムマスターから、[アジャイルソフトウェア開発宣言](https://agilemanifesto.org/iso/ja/manifesto.html)と[スクラムガイド](https://www.scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf)だけ読めば十分と言われた事もあって読まなかったのですが、自社サービスから受託会社に転職してスクラムから遠ざかっていたということもあって読んでみました。\n\n\n### エンジニアとしての覚悟というか心構え\n\nこの本を読む前までは、アジャイルな開発手法のプラクティスが詰まった本なのかなと思っていました。確かにそういう部分もあるけど、この本の本当のテーマは、マスターセンセイなる師匠と弟子の会話を通じて***エンジニアとして生きていくための心構えを教えてくれる本***でした。\n\n- スクラムに答えはなくプロジェクトメンバーで全員で決める\n- 決めたことに一人一人が責任を持つなど\n\nなどなど名言が多く書かれていました。\n\n### インセプションデッキ\n\n言葉だけは知っていたけど具体的にプロジェクト初期段階のアジャイルは経験がなかったこともありよく理解できていませんでした。\n\nインセプションデッキは、プロジェクトの全体像がどういったものなのかを端的に伝えるためのドキュメントです。\n\n![インセプションデッキ](/images/20210208_inception_deck.png)\n\n> 参照:アジャイルサムライ 47ページ\n\n\n上記の大項目ごとにプロジェクトメンバー内で議論して指針を決めていきます。この作業でメンバーの共通認識を揃えることができるので、プロジェクト進行中によくありがちな「自分はこう思って開発してたんだけど違うの？」とか「この追加機能は本当にお客さんに必要なのかわからない」みたいなこともインセプションデッキがあると立ち返ることができます。\n\n今回読み終わって改めて、***インセプションデッキって受託開発でも絶対やっておくべき内容***だと思いました。\n\n受託開発あるあるとして、スケジュールがタイトだからとりあえず作り始めて納品前にドキュメントまとめたりとか、本当にお客さんが何を求めるのか分からないままプロジェクトが走り始めてそのまま開発が進んでしまう。みたいなケースがあって、本質が分からないまま進行していくことがただあります。\n\nインセプションデッキを一番最初に作ることで何のために開発するのかなどが見えてくると思います。（要件定義が近いイメージだがもう少し深堀りしたやり方になる。）\n\n自社サービスの場合は、ジョインした時には既に指針があるケースがあって数年単位で見直すことが重要そうと感じました。\n\n\n### アジャイルなプログラミング\n\n他の章は、アジャイル開発の進め方的な話が多くプラクティスが紹介されていますが、特に最後の「アジャイルなプログラミング」の章が、エンジニアとしは肝に銘じておきたい素晴らしい章でした。\n\n内容的には\n- ユニットテスト\n- TDD\n- リファクタリング\n- 継続インテグレーション（CI）\n\nについて解説してます。ざっくりまとめると***リファクタリングとテストはセットで、そのためにテスト駆動で開発していくことが重要で、デプロイは誰でも簡潔にできる仕組み作りにすること***\n\n何か機能を作る時も、まずプログラミングが失敗するテストをすべて書き出すことが重要だとこの本では書いていました。\n\n自分はマークアップからフロントエンドに転身した身なのでしっかりテスト駆動を理解しているか微妙ですが、テスト駆動を日々意識している人のコードと自分のコードは明らかに何かが違うことが分かります。\n自分で実装したプログラミングは絶対にバグを生み出さないコードだなんてありえないので、やはりテストは改めて重要だと感じました。\n\n結構古い書籍ですが、今でも学びが多い本なのでおすすめです。\n\n![アジャイルサムライ](/images/20210208_samurai.png)","src/content/blog/2021/0208.md","157dc36c1192e4df",{"html":1299,"metadata":1300},"\u003Cp>どこかのタイミングで読もうと思ってて読めていなかった名著。\u003C/p>\n\u003Cp>読まなかった理由としては仕事で体系的にスクラムをやっていたことに加えてスクラムマスターから、\u003Ca href=\"https://agilemanifesto.org/iso/ja/manifesto.html\">アジャイルソフトウェア開発宣言\u003C/a>と\u003Ca href=\"https://www.scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Japanese.pdf\">スクラムガイド\u003C/a>だけ読めば十分と言われた事もあって読まなかったのですが、自社サービスから受託会社に転職してスクラムから遠ざかっていたということもあって読んでみました。\u003C/p>\n\u003Ch3 id=\"エンジニアとしての覚悟というか心構え\">エンジニアとしての覚悟というか心構え\u003C/h3>\n\u003Cp>この本を読む前までは、アジャイルな開発手法のプラクティスが詰まった本なのかなと思っていました。確かにそういう部分もあるけど、この本の本当のテーマは、マスターセンセイなる師匠と弟子の会話を通じて\u003Cem>\u003Cstrong>エンジニアとして生きていくための心構えを教えてくれる本\u003C/strong>\u003C/em>でした。\u003C/p>\n\u003Cul>\n\u003Cli>スクラムに答えはなくプロジェクトメンバーで全員で決める\u003C/li>\n\u003Cli>決めたことに一人一人が責任を持つなど\u003C/li>\n\u003C/ul>\n\u003Cp>などなど名言が多く書かれていました。\u003C/p>\n\u003Ch3 id=\"インセプションデッキ\">インセプションデッキ\u003C/h3>\n\u003Cp>言葉だけは知っていたけど具体的にプロジェクト初期段階のアジャイルは経験がなかったこともありよく理解できていませんでした。\u003C/p>\n\u003Cp>インセプションデッキは、プロジェクトの全体像がどういったものなのかを端的に伝えるためのドキュメントです。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20210208_inception_deck.png\" alt=\"インセプションデッキ\">\u003C/p>\n\u003Cblockquote>\n\u003Cp>参照:アジャイルサムライ 47ページ\u003C/p>\n\u003C/blockquote>\n\u003Cp>上記の大項目ごとにプロジェクトメンバー内で議論して指針を決めていきます。この作業でメンバーの共通認識を揃えることができるので、プロジェクト進行中によくありがちな「自分はこう思って開発してたんだけど違うの？」とか「この追加機能は本当にお客さんに必要なのかわからない」みたいなこともインセプションデッキがあると立ち返ることができます。\u003C/p>\n\u003Cp>今回読み終わって改めて、\u003Cem>\u003Cstrong>インセプションデッキって受託開発でも絶対やっておくべき内容\u003C/strong>\u003C/em>だと思いました。\u003C/p>\n\u003Cp>受託開発あるあるとして、スケジュールがタイトだからとりあえず作り始めて納品前にドキュメントまとめたりとか、本当にお客さんが何を求めるのか分からないままプロジェクトが走り始めてそのまま開発が進んでしまう。みたいなケースがあって、本質が分からないまま進行していくことがただあります。\u003C/p>\n\u003Cp>インセプションデッキを一番最初に作ることで何のために開発するのかなどが見えてくると思います。（要件定義が近いイメージだがもう少し深堀りしたやり方になる。）\u003C/p>\n\u003Cp>自社サービスの場合は、ジョインした時には既に指針があるケースがあって数年単位で見直すことが重要そうと感じました。\u003C/p>\n\u003Ch3 id=\"アジャイルなプログラミング\">アジャイルなプログラミング\u003C/h3>\n\u003Cp>他の章は、アジャイル開発の進め方的な話が多くプラクティスが紹介されていますが、特に最後の「アジャイルなプログラミング」の章が、エンジニアとしは肝に銘じておきたい素晴らしい章でした。\u003C/p>\n\u003Cp>内容的には\u003C/p>\n\u003Cul>\n\u003Cli>ユニットテスト\u003C/li>\n\u003Cli>TDD\u003C/li>\n\u003Cli>リファクタリング\u003C/li>\n\u003Cli>継続インテグレーション（CI）\u003C/li>\n\u003C/ul>\n\u003Cp>について解説してます。ざっくりまとめると\u003Cem>\u003Cstrong>リファクタリングとテストはセットで、そのためにテスト駆動で開発していくことが重要で、デプロイは誰でも簡潔にできる仕組み作りにすること\u003C/strong>\u003C/em>\u003C/p>\n\u003Cp>何か機能を作る時も、まずプログラミングが失敗するテストをすべて書き出すことが重要だとこの本では書いていました。\u003C/p>\n\u003Cp>自分はマークアップからフロントエンドに転身した身なのでしっかりテスト駆動を理解しているか微妙ですが、テスト駆動を日々意識している人のコードと自分のコードは明らかに何かが違うことが分かります。\n自分で実装したプログラミングは絶対にバグを生み出さないコードだなんてありえないので、やはりテストは改めて重要だと感じました。\u003C/p>\n\u003Cp>結構古い書籍ですが、今でも学びが多い本なのでおすすめです。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20210208_samurai.png\" alt=\"アジャイルサムライ\">\u003C/p>",{"headings":1301,"localImagePaths":1308,"remoteImagePaths":1309,"frontmatter":1292,"imagePaths":1310},[1302,1304,1306],{"depth":29,"slug":1303,"text":1303},"エンジニアとしての覚悟というか心構え",{"depth":29,"slug":1305,"text":1305},"インセプションデッキ",{"depth":29,"slug":1307,"text":1307},"アジャイルなプログラミング",[],[],[],"2021/0208.md","2021/0224",{"id":1312,"data":1314,"body":1317,"filePath":1318,"digest":1319,"rendered":1320,"legacyId":1335},{"title":1315,"publishDate":1316},"Vue3+Vite環境でTSXを雑に書いてみた。","2021-02-24","雑に書いたコードは以下になります。\n\nhttps://github.com/ryokatsuse/vue3-tsx-sample-with-vite\n\n### TSXのサポート\n\nVue3からTypeScript JSXがサポートされています。Vue2時代では[vue-tsx-support](https://github.com/wonderful-panda/vue-tsx-support)と[babelのプラグイン](https://github.com/vuejs/babel-plugin-transform-vue-jsx)でtsxが使えましたが、Vue3からネイティブでサポートされているのでプラグイン拡張がなくても使えます。\n\n[Vue.jsにおけるjsxk記法のRFC](https://github.com/vuejs/rfcs/blob/master/active-rfcs/0008-render-function-api-change.md)\n\n### 書いてみる\n\nサクッと書きたいだけだったのでVite環境を使用しました。ViteはVue.jsはもちろんですが、ReactはPreactも高速でバンドルできるツールです。\n\nとりあえず以下のコマンドでVue3の環境が手に入り、ローカルホストが起動します。\n\n```bash\n $ yarn create @vitejs/app my-vue-app --template vue\n $ yarn\n $ yarn dev\n\n```\n\nApp.vueをApp.tsxにリネームして以下のように書いて保存してみます。\n\n\n\n```tsx\nimport { defineComponent } from 'vue'\nimport HelloWorld from './components/HelloWorld.vue'\nexport const App = defineComponent({\n  render() {\n    return (\n      \u003C>\n        \u003CHelloWorld />\n      \u003C/>\n    )\n  }\n})\n\n```\n\nしかしこのままだとVite環境でコンパイルできませんでした。[公式サイトによると](https://vitejs.dev/guide/features.html#jsx)Viteに限っては、プラグインが必要らしいので別でインストールする必要があります。\n\n```bash\n$ yarn add @vitejs/plugin-vue-jsx\n\n```\n\n公式通りvite.config.tsを以下のように設定してコンパイルできました。\n\n```ts\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport vueJsx from '@vitejs/plugin-vue-jsx'\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [\n    vue(),\n    vueJsx({\n      // options are passed on to @vue/babel-plugin-jsx\n    })\n  ],\n})\n```\n\n今回は超雑なTODOアプリを作るので、先程のApp.tsxを以下のように書き換えます。\n\n```ts\nimport { defineComponent, reactive } from 'vue';\nimport TodoInput from './TodoInput'; // 子コンポーネントもtsxファイルなので拡張子なしimport\nimport { TodoList } from './TodoList'; // nameを書かずにexport const TodoList ...みたいな感じでimportできる\n\ntype TodoDataList = {\n  title: string;\n  isCompleted: boolean;\n}\n\nexport default defineComponent({\n  name: 'TodoApp',\n  setup() { // Composition APIだとrender()関数が不要\n    const todoDataList = reactive([\n      { title: '歯を磨く', isCompleted: false},\n      { title: '掃除をする', isCompleted: false},\n      { title: '買い物リストを確認する', isCompleted: false},\n    ]);\n\n    const handlePushTodo = (data: TodoDataList) => {\n      todoDataList.push(data);\n      console.table(todoDataList)\n    }\n    return () => ( // SFCでいうtemplate部分\n      \u003Cdiv class=\"wrapper\"> // classNameと書かなくてもよい。\n        \u003CTodoInput submitTodo={handlePushTodo} /> //{{  }}の記法は書けない\n        \u003CTodoList todos={todoDataList} />\n      \u003C/div>\n    );\n  },\n});\n```\n\nコメントをつけましたが、SFCと比べて見通しがだいぶ変わります。またJSXなのでstyleタグが記述できません。\n\ncssの取り扱いは以下のいずれかになりそうです。\n\n- scssファイルを別ファイルにしてimportする（ただしScoped CSSではないので注意）\n- styled-componentsを使う。(Vueだと[vue-styled-components](https://github.com/styled-components/vue-styled-components#readme))\n- CSSフレームワークやTailwindCSSなどを使ってCSSを一切書かないようにする\n\nこの時点で感じたメリットとしては、SFCと違って型チェックが全域に広がったという点でした。特にtemplateタグでは、型のチェックが効かなくてしょんぼりすることがあったのですが、tsxにすることでJavaScriptの世界になるのでエディタ上でエラーを確認できます。（Optional Chainingも当然使えます！！）\n\nまた、JSX記法だとJavaScriptの予約語は使用できないのですが、VueのTSX記法では使用可能なので、```class```や```for```などが普通に記述できます。\n\ntodoリストを繰り返し表示するコンポーネントを見てみましょう。\n\n```ts\n\nimport { defineComponent } from \"vue\";\nimport Todo from \"./Todo\";\n\nexport default defineComponent({\n  name: 'TodoList',\n  props: {\n    todos: {\n      type: Array,\n      required: true\n    }\n  },\n  setup(props) {\n    return () =>\n      \u003Cdiv>{props.todos.map((todo: any, i) => \u003CTodo todo={todo} key={i} />)}\u003C/div>\n  }\n})\n\n```\n\nSFCではVue独自記法の```v-for```や```v-if``` などを使用できますが、JSXなので使えません。map関数などを使って書いていきます。また今回は型を誤魔化していますが、props自体に型も付けれます。\n\n### まとめ\n\n- Vueっぽさがなくなるがファイルが肥大化しにくく小さい単位でコンポーネントを作れる\n- CSSフレームワークなどを使っている場合は変にコンポーネントに混ぜることもないので、安全に使用できる。\n- 逆にCSSをしっかり書きたい場合は厳密なルール化が必要。\n- 型チェックがいい感じ。\n- default exportsしかSFCの場合はできないがTSXだと名前空間のexportができる\n\n\n### 参照\n\npotato4dさんの以下のスライドとブログ記事が分かりやすいので参照としてリンクします。\n\nhttps://speakerdeck.com/potato4d/vue-dot-js-with-tsx-from-vue-2-dot-x-to-vue-3-number-v-tokyo11\nhttps://d.potato4d.me/entry/20200830-tsx-in-vue/","src/content/blog/2021/0224.md","c09d01de9daf7c19",{"html":1321,"metadata":1322},"\u003Cp>雑に書いたコードは以下になります。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ryokatsuse/vue3-tsx-sample-with-vite\">https://github.com/ryokatsuse/vue3-tsx-sample-with-vite\u003C/a>\u003C/p>\n\u003Ch3 id=\"tsxのサポート\">TSXのサポート\u003C/h3>\n\u003Cp>Vue3からTypeScript JSXがサポートされています。Vue2時代では\u003Ca href=\"https://github.com/wonderful-panda/vue-tsx-support\">vue-tsx-support\u003C/a>と\u003Ca href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">babelのプラグイン\u003C/a>でtsxが使えましたが、Vue3からネイティブでサポートされているのでプラグイン拡張がなくても使えます。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0008-render-function-api-change.md\">Vue.jsにおけるjsxk記法のRFC\u003C/a>\u003C/p>\n\u003Ch3 id=\"書いてみる\">書いてみる\u003C/h3>\n\u003Cp>サクッと書きたいだけだったのでVite環境を使用しました。ViteはVue.jsはもちろんですが、ReactはPreactも高速でバンドルできるツールです。\u003C/p>\n\u003Cp>とりあえず以下のコマンドでVue3の環境が手に入り、ローカルホストが起動します。\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\"> $ \u003Cspan class=\"token function\">yarn\u003C/span> create @vitejs/app my-vue-app \u003Cspan class=\"token parameter variable\">--template\u003C/span> vue\n $ \u003Cspan class=\"token function\">yarn\u003C/span>\n $ \u003Cspan class=\"token function\">yarn\u003C/span> dev\n\n\u003C/code>\u003C/pre>\n\u003Cp>App.vueをApp.tsxにリネームして以下のように書いて保存してみます。\u003C/p>\n\u003Cpre class=\"language-tsx\" data-language=\"tsx\">\u003Ccode is:raw=\"\" class=\"language-tsx\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> defineComponent \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'vue'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> HelloWorld \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./components/HelloWorld.vue'\u003C/span>\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> App \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">defineComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token function\">render\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n      \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n        \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">HelloWorld\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n      \u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n    \u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>しかしこのままだとVite環境でコンパイルできませんでした。\u003Ca href=\"https://vitejs.dev/guide/features.html#jsx\">公式サイトによると\u003C/a>Viteに限っては、プラグインが必要らしいので別でインストールする必要があります。\u003C/p>\n\u003Cpre class=\"language-bash\" data-language=\"bash\">\u003Ccode is:raw=\"\" class=\"language-bash\">$ \u003Cspan class=\"token function\">yarn\u003C/span> \u003Cspan class=\"token function\">add\u003C/span> @vitejs/plugin-vue-jsx\n\n\u003C/code>\u003C/pre>\n\u003Cp>公式通りvite.config.tsを以下のように設定してコンパイルできました。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> defineConfig \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'vite'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> vue \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'@vitejs/plugin-vue'\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> vueJsx \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'@vitejs/plugin-vue-jsx'\u003C/span>\n\n\u003Cspan class=\"token comment\">// https://vitejs.dev/config/\u003C/span>\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> \u003Cspan class=\"token function\">defineConfig\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  plugins\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n    \u003Cspan class=\"token function\">vue\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token function\">vueJsx\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token comment\">// options are passed on to @vue/babel-plugin-jsx\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n  \u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>今回は超雑なTODOアプリを作るので、先程のApp.tsxを以下のように書き換えます。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> defineComponent\u003Cspan class=\"token punctuation\">,\u003C/span> reactive \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'vue'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> TodoInput \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./TodoInput'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// 子コンポーネントもtsxファイルなので拡張子なしimport\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> TodoList \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./TodoList'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// nameを書かずにexport const TodoList ...みたいな感じでimportできる\u003C/span>\n\n\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">TodoDataList\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  title\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  isCompleted\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">boolean\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> \u003Cspan class=\"token function\">defineComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'TodoApp'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token function\">setup\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token comment\">// Composition APIだとrender()関数が不要\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> todoDataList \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">reactive\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\n      \u003Cspan class=\"token punctuation\">{\u003C/span> title\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'歯を磨く'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> isCompleted\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token punctuation\">{\u003C/span> title\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'掃除をする'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> isCompleted\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token punctuation\">{\u003C/span> title\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'買い物リストを確認する'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> isCompleted\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">handlePushTodo\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token operator\">:\u003C/span> TodoDataList\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      todoDataList\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token builtin\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">table\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>todoDataList\u003Cspan class=\"token punctuation\">)\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span> \u003Cspan class=\"token comment\">// SFCでいうtemplate部分\u003C/span>\n      \u003Cspan class=\"token operator\">&#x3C;\u003C/span>div \u003Cspan class=\"token keyword\">class\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"wrapper\"\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token comment\">// classNameと書かなくてもよい。\u003C/span>\n        \u003Cspan class=\"token operator\">&#x3C;\u003C/span>TodoInput submitTodo\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>handlePushTodo\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token comment\">//{{  }}の記法は書けない\u003C/span>\n        \u003Cspan class=\"token operator\">&#x3C;\u003C/span>TodoList todos\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>todoDataList\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n      \u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>div\u003Cspan class=\"token operator\">>\u003C/span>\n    \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>コメントをつけましたが、SFCと比べて見通しがだいぶ変わります。またJSXなのでstyleタグが記述できません。\u003C/p>\n\u003Cp>cssの取り扱いは以下のいずれかになりそうです。\u003C/p>\n\u003Cul>\n\u003Cli>scssファイルを別ファイルにしてimportする（ただしScoped CSSではないので注意）\u003C/li>\n\u003Cli>styled-componentsを使う。(Vueだと\u003Ca href=\"https://github.com/styled-components/vue-styled-components#readme\">vue-styled-components\u003C/a>)\u003C/li>\n\u003Cli>CSSフレームワークやTailwindCSSなどを使ってCSSを一切書かないようにする\u003C/li>\n\u003C/ul>\n\u003Cp>この時点で感じたメリットとしては、SFCと違って型チェックが全域に広がったという点でした。特にtemplateタグでは、型のチェックが効かなくてしょんぼりすることがあったのですが、tsxにすることでJavaScriptの世界になるのでエディタ上でエラーを確認できます。（Optional Chainingも当然使えます！！）\u003C/p>\n\u003Cp>また、JSX記法だとJavaScriptの予約語は使用できないのですが、VueのTSX記法では使用可能なので、\u003Ccode>class\u003C/code>や\u003Ccode>for\u003C/code>などが普通に記述できます。\u003C/p>\n\u003Cp>todoリストを繰り返し表示するコンポーネントを見てみましょう。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> defineComponent \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">\"vue\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> Todo \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">\"./Todo\"\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> \u003Cspan class=\"token function\">defineComponent\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n  name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'TodoList'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  props\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    todos\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      type\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">Array\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      required\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token function\">setup\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>props\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span>\n      \u003Cspan class=\"token operator\">&#x3C;\u003C/span>div\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>props\u003Cspan class=\"token punctuation\">.\u003C/span>todos\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>todo\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">any\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> i\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token operator\">&#x3C;\u003C/span>Todo todo\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>todo\u003Cspan class=\"token punctuation\">}\u003C/span> key\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>i\u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>div\u003Cspan class=\"token operator\">>\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>SFCではVue独自記法の\u003Ccode>v-for\u003C/code>や\u003Ccode>v-if\u003C/code> などを使用できますが、JSXなので使えません。map関数などを使って書いていきます。また今回は型を誤魔化していますが、props自体に型も付けれます。\u003C/p>\n\u003Ch3 id=\"まとめ\">まとめ\u003C/h3>\n\u003Cul>\n\u003Cli>Vueっぽさがなくなるがファイルが肥大化しにくく小さい単位でコンポーネントを作れる\u003C/li>\n\u003Cli>CSSフレームワークなどを使っている場合は変にコンポーネントに混ぜることもないので、安全に使用できる。\u003C/li>\n\u003Cli>逆にCSSをしっかり書きたい場合は厳密なルール化が必要。\u003C/li>\n\u003Cli>型チェックがいい感じ。\u003C/li>\n\u003Cli>default exportsしかSFCの場合はできないがTSXだと名前空間のexportができる\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"参照\">参照\u003C/h3>\n\u003Cp>potato4dさんの以下のスライドとブログ記事が分かりやすいので参照としてリンクします。\u003C/p>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/potato4d/vue-dot-js-with-tsx-from-vue-2-dot-x-to-vue-3-number-v-tokyo11\">https://speakerdeck.com/potato4d/vue-dot-js-with-tsx-from-vue-2-dot-x-to-vue-3-number-v-tokyo11\u003C/a>\n\u003Ca href=\"https://d.potato4d.me/entry/20200830-tsx-in-vue/\">https://d.potato4d.me/entry/20200830-tsx-in-vue/\u003C/a>\u003C/p>",{"headings":1323,"localImagePaths":1332,"remoteImagePaths":1333,"frontmatter":1314,"imagePaths":1334},[1324,1327,1329,1330],{"depth":29,"slug":1325,"text":1326},"tsxのサポート","TSXのサポート",{"depth":29,"slug":1328,"text":1328},"書いてみる",{"depth":29,"slug":76,"text":76},{"depth":29,"slug":1331,"text":1331},"参照",[],[],[],"2021/0224.md","2021/0210",{"id":1336,"data":1338,"body":1341,"filePath":1342,"digest":1343,"rendered":1344,"legacyId":1362},{"title":1339,"publishDate":1340},"Lighthouse CIをGitHub Actionsで試した。","2021-02-10","ふと思い立って自分のブログに[Lighthouse CI](https://github.com/GoogleChrome/lighthouse-ci)を導入してみた。\n\n### Lighthouse CIとは\n\nLighthouseの実行をCIツールでビルドされたものに対して実行できる。GitHub Actions以外のTravis CIや、Circle CIとかでもできる。\n\n### 導入手順\n\n基本的にはLighthouse CIのリポジトリにあるドキュメント通りに行えば設定はできる。\n\n- GitHub上で[lighthouse-ciアプリ](https://github.com/apps/lighthouse-ci)をインストールしてAPIキーを取得する。\n- Github上に、APIKeyの登録\n- GitHub Actionsの定義ファイル（yml）を記述する。\n- Lighthouse CIの各種設定を定義する。\n\n\n### GitHub Actions定義ファイルを書く\n\nドキュメントを参照に以下のような定義ファイルを書いた。\n\n```yml\n\nname: CI\n\non:\n  pull_request:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [12.x]\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: npm install, build\n        run: |\n          npm install\n          npm run build\n      - name: build\n        run: npm run build\n      - name: run Lighthouse CI\n        run: |\n          npm install -g @lhci/cli@0.7.x\n          lhci autorun --config=./lighthouse/lighthouserc.json\n        env:\n          LHCI_GITHUB_APP_TOKEN: ${{ secrets.登録したAPIキー名 }}\n```\n\n```on```に設定しているトリガーは、プルリクエストが作られたときにそのブランチのソースベースでLighthouseを実行させる。\n\n```jobs```内は以下の内容になっている。\n\n```env```に先程取得したAPIキーの名前をいれる。\n\n以下のようなJOBを走らせている。\n\n- 最新のソースコードを取得\n- Node.js（今回はv12）を取得\n- Node.jsのインストール\n- Lighthouse-ciのインストール\n- ビルド\n- Lighthouse-ciの実行\n\n![CIのJOB画面](/images/20210210_ci.png)\n\n### Lighthouseの設定\n\n先程のJOB内で```lhci autorun --config=./lighthouse/lighthouserc.json```の部分で別ファイルで作成した以下のようなjsonファイルを読み込んでいる。\n\n```json\n{\n  \"ci\": {\n    \"collect\": {\n      \"numberOfRuns\": 1,\n      \"startServerCommand\": \"npm run start\",\n      \"url\": [\n        \"http://localhost:8000/\"\n      ]\n    },\n    \"upload\": {\n      \"target\": \"temporary-public-storage\"\n    }\n  }\n}\n\n```\n\n今回は最低限の設定だが、[Lighthouseで設定可能な範囲](https://github.com/GoogleChrome/lighthouse/blob/v5.5.0/lighthouse-core/config/default-config.js)でアサーションを追加できる。\n\n設定方法は[ドキュメント](https://github.com/GoogleChrome/lighthouse-ci/blob/master/docs/configuration.md#assert)を見るとわかりやすい。\n\n以上で完了なので実際にPRを出してみるとCIが動き出し成功すると以下のような感じで実行できているのが確認できる。\n\n![CIのJOB画面2](/images/20210210_ci2.png)\n\n久しぶり図ってみたらCode splittingをしろ！という警告が出ていたので時間があったら最適化する。","src/content/blog/2021/0210.md","4141ba6949f4a584",{"html":1345,"metadata":1346},"\u003Cp>ふと思い立って自分のブログに\u003Ca href=\"https://github.com/GoogleChrome/lighthouse-ci\">Lighthouse CI\u003C/a>を導入してみた。\u003C/p>\n\u003Ch3 id=\"lighthouse-ciとは\">Lighthouse CIとは\u003C/h3>\n\u003Cp>Lighthouseの実行をCIツールでビルドされたものに対して実行できる。GitHub Actions以外のTravis CIや、Circle CIとかでもできる。\u003C/p>\n\u003Ch3 id=\"導入手順\">導入手順\u003C/h3>\n\u003Cp>基本的にはLighthouse CIのリポジトリにあるドキュメント通りに行えば設定はできる。\u003C/p>\n\u003Cul>\n\u003Cli>GitHub上で\u003Ca href=\"https://github.com/apps/lighthouse-ci\">lighthouse-ciアプリ\u003C/a>をインストールしてAPIキーを取得する。\u003C/li>\n\u003Cli>Github上に、APIKeyの登録\u003C/li>\n\u003Cli>GitHub Actionsの定義ファイル（yml）を記述する。\u003C/li>\n\u003Cli>Lighthouse CIの各種設定を定義する。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"github-actions定義ファイルを書く\">GitHub Actions定義ファイルを書く\u003C/h3>\n\u003Cp>ドキュメントを参照に以下のような定義ファイルを書いた。\u003C/p>\n\u003Cpre class=\"language-yml\" data-language=\"yml\">\u003Ccode is:raw=\"\" class=\"language-yml\">\n\u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> CI\n\n\u003Cspan class=\"token key atrule\">on\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">pull_request\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">branches\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> master\n\n\u003Cspan class=\"token key atrule\">jobs\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n  \u003Cspan class=\"token key atrule\">build\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token key atrule\">runs-on\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> ubuntu\u003Cspan class=\"token punctuation\">-\u003C/span>latest\n    \u003Cspan class=\"token key atrule\">strategy\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token key atrule\">matrix\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n        \u003Cspan class=\"token key atrule\">node-version\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>12.x\u003Cspan class=\"token punctuation\">]\u003C/span>\n\n    \u003Cspan class=\"token key atrule\">steps\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">uses\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> actions/checkout@v2\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> Use Node.js $\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> matrix.node\u003Cspan class=\"token punctuation\">-\u003C/span>version \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n        \u003Cspan class=\"token key atrule\">uses\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> actions/setup\u003Cspan class=\"token punctuation\">-\u003C/span>node@v1\n        \u003Cspan class=\"token key atrule\">with\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n          \u003Cspan class=\"token key atrule\">node-version\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> $\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> matrix.node\u003Cspan class=\"token punctuation\">-\u003C/span>version \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> npm install\u003Cspan class=\"token punctuation\">,\u003C/span> build\n        \u003Cspan class=\"token key atrule\">run\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">|\u003C/span>\u003Cspan class=\"token scalar string\">\n          npm install\n          npm run build\u003C/span>\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> build\n        \u003Cspan class=\"token key atrule\">run\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> npm run build\n      \u003Cspan class=\"token punctuation\">-\u003C/span> \u003Cspan class=\"token key atrule\">name\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> run Lighthouse CI\n        \u003Cspan class=\"token key atrule\">run\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">|\u003C/span>\u003Cspan class=\"token scalar string\">\n          npm install -g @lhci/cli@0.7.x\n          lhci autorun --config=./lighthouse/lighthouserc.json\u003C/span>\n        \u003Cspan class=\"token key atrule\">env\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n          \u003Cspan class=\"token key atrule\">LHCI_GITHUB_APP_TOKEN\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> $\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> secrets.登録したAPIキー名 \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>on\u003C/code>に設定しているトリガーは、プルリクエストが作られたときにそのブランチのソースベースでLighthouseを実行させる。\u003C/p>\n\u003Cp>\u003Ccode>jobs\u003C/code>内は以下の内容になっている。\u003C/p>\n\u003Cp>\u003Ccode>env\u003C/code>に先程取得したAPIキーの名前をいれる。\u003C/p>\n\u003Cp>以下のようなJOBを走らせている。\u003C/p>\n\u003Cul>\n\u003Cli>最新のソースコードを取得\u003C/li>\n\u003Cli>Node.js（今回はv12）を取得\u003C/li>\n\u003Cli>Node.jsのインストール\u003C/li>\n\u003Cli>Lighthouse-ciのインストール\u003C/li>\n\u003Cli>ビルド\u003C/li>\n\u003Cli>Lighthouse-ciの実行\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"/images/20210210_ci.png\" alt=\"CIのJOB画面\">\u003C/p>\n\u003Ch3 id=\"lighthouseの設定\">Lighthouseの設定\u003C/h3>\n\u003Cp>先程のJOB内で\u003Ccode>lhci autorun --config=./lighthouse/lighthouserc.json\u003C/code>の部分で別ファイルで作成した以下のようなjsonファイルを読み込んでいる。\u003C/p>\n\u003Cpre class=\"language-json\" data-language=\"json\">\u003Ccode is:raw=\"\" class=\"language-json\">\u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token property\">\"ci\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token property\">\"collect\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token property\">\"numberOfRuns\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token property\">\"startServerCommand\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"npm run start\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      \u003Cspan class=\"token property\">\"url\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\n        \u003Cspan class=\"token string\">\"http://localhost:8000/\"\u003C/span>\n      \u003Cspan class=\"token punctuation\">]\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"upload\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token property\">\"target\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"temporary-public-storage\"\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>今回は最低限の設定だが、\u003Ca href=\"https://github.com/GoogleChrome/lighthouse/blob/v5.5.0/lighthouse-core/config/default-config.js\">Lighthouseで設定可能な範囲\u003C/a>でアサーションを追加できる。\u003C/p>\n\u003Cp>設定方法は\u003Ca href=\"https://github.com/GoogleChrome/lighthouse-ci/blob/master/docs/configuration.md#assert\">ドキュメント\u003C/a>を見るとわかりやすい。\u003C/p>\n\u003Cp>以上で完了なので実際にPRを出してみるとCIが動き出し成功すると以下のような感じで実行できているのが確認できる。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20210210_ci2.png\" alt=\"CIのJOB画面2\">\u003C/p>\n\u003Cp>久しぶり図ってみたらCode splittingをしろ！という警告が出ていたので時間があったら最適化する。\u003C/p>",{"headings":1347,"localImagePaths":1359,"remoteImagePaths":1360,"frontmatter":1338,"imagePaths":1361},[1348,1351,1353,1356],{"depth":29,"slug":1349,"text":1350},"lighthouse-ciとは","Lighthouse CIとは",{"depth":29,"slug":1352,"text":1352},"導入手順",{"depth":29,"slug":1354,"text":1355},"github-actions定義ファイルを書く","GitHub Actions定義ファイルを書く",{"depth":29,"slug":1357,"text":1358},"lighthouseの設定","Lighthouseの設定",[],[],[],"2021/0210.md","2021/0430",{"id":1363,"data":1365,"body":1368,"filePath":1369,"digest":1370,"rendered":1371,"legacyId":1402},{"title":1366,"publishDate":1367},"自分なりのNotionの使い方をまとめる","2021-05-01","2年ぐらい使っているツールですが、最近ようやく管理方法が落ち着いてきたのでまとめようと思います。\nとは言えほぼほぼ以下のスライドの内容を参考に作りました。\n\n[Atomic Scrum 個人の生産性を最大化する方法](https://speakerdeck.com/raykataoka/atomic-scrum-ge-ren-falsesheng-chan-xing-wozui-da-hua-surufang-fa)\n\nこれを見た時に「求めていたのはこれだ！」と思いました。近い運用をしていたのですが、データベースの使い方が匠だなと思ったので、そこを真似した形で運用を始めた所自分でも納得のいく感じになりました。\n\n### ダッシュボード\n\n![ダッシュボードの画像](/images/dashboard_0430.png)\n\n（焚き火の動画は心が落ち着くのでよく作業BGMとして流しています。。）\n\n基本的にこのページを常に表示させています。中身の項目を常に表示させておくと情報量が多いので基本的には「今週の目標」と「Today」のトグルだけ表示させています。\n上部に出ている時計ウィジェットは[Indify](https://indify.co/)というサービスを使うことで利用できます。\n\n※ただし、このウィジェットを使う時にアニメーション設定などを行うとCPUを使ってファンが回り出すので可能性があるので注意！（M1Macとかだと大丈夫かも）\n\nダッシュボードにある各種情報のほとんどが「Create Linked Database」の機能を使って各種のデータベースを呼び出しています。データベースを呼び出した後はフィルター機能を使っています。例えば「Tomorrow」のトグルの中には明日着手予定のタスク一覧だけ表示されています。\n\n### Inbox\n\nGTDのワークフローで日々のタスクを運用しているためInboxに仕事、プライベート関係なくひたすら入力していきます。1日の終わりにInboxを見直す時間を取っていて、GTDのワークフローに沿って整理していきます。\n\n※GTDについては、[全面改訂版 はじめてのGTD ストレスフリーの整理術](https://www.amazon.co.jp/%E5%85%A8%E9%9D%A2%E6%94%B9%E8%A8%82%E7%89%88-%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEGTD-%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%95%E3%83%AA%E3%83%BC%E3%81%AE%E6%95%B4%E7%90%86%E8%A1%93-%E3%83%87%E3%83%93%E3%83%83%E3%83%89%E3%83%BB%E3%82%A2%E3%83%AC%E3%83%B3/dp/4576151878)という本がおすすめなので是非読んでください。\n\nInboxページもPCで作業している際は、常に開いた状態にしていますが、外出時は近くにPCがない場合もありInboxに入れようと思ってもその場で入れることが難しい状況があります。GTDにおいてInboxへのタスクの追加のしやすさは一番重要で、ここで追加しにくいユーザー体験になってしまうと途端にGTDのワークフローが破綻してしまいます。（Notionのスマホアプリは起動が重く割とストレスです。。。）\n\n自分は、[Fast Notion](https://www.notion.so/Fast-Notion-74dd4501d5824de7997a143baba1098f)というアプリを使用していてます。これが神アプリで起動してすぐ入力するUIが出てきてそのままPOSTすると、指定したNotionのページにデータが反映されるスグレモノです！「あれやんなきゃ」と思ってもその場で、入力するまでの時間に「何だっけ」と忘れることがあったりするのですが、このアプリのおかげで忘れず入力することができています。\n\nInboxに入力する際に、タスクの粒度は適当です。明確にやらなくてはいけないタスクべースのものから、いくつかに小分けしないと消化できないタスクまで様々あり、寝る前にInboxを必ず確認してなるべくInboxを空の状態にしています。\n\n\n### 習慣トラッカー\nマスターは以下のようになっています。\n\n![習慣トラッカー](/images/trucker.png)\n\nこの運用にするまではダッシュボードの上部に習慣化したい事柄のチェックボックスをおいて毎日チェックする→翌日チェックを外すという運用していたのですが、一週間でどれぐらいやったか可視化したくてこの形にしました。\n\n毎日ダッシュボードに、今日の日付のデータを作成して運用しているので、マスターを見ることはほぼありません。Weeklyの振り返り時に使うテンプレートにも1週間の間でソートして表示するようにしています。\n\n習慣化自体は1ヶ月周期で結構頻繁に変えています。これは自分が単純に飽き性だからです。。\n\n\n### Fun/Done/Learn\n毎日仕事が終わった時や寝る前に、「良かったこと」「学んだこと」「失敗したこと」を記述します。\n一週間の振り返り時に深堀りしたいことなどがあれば「Weekly」にチェックをしておきます。1ヶ月に振り返り時に更に深堀りたいなどがあれば1週間の振り返り時に「Monthly」にチェックを入れておきます。\n\n![fun/done/learn](/images/fundonelearn.png)\n\n### Weekly/Monthly\n\n毎週日曜日と、月末に振り返りをしています。（25分）以下のようなテンプレートを用意していて1週間でフィルターしてあるデータベースを確認しながらどんな感じだったかを振り返ります。\n\n![fun/done/learn](/images/weekly_and_Monthly.png)\n\n### Read later\n\n「Notion Web Clipper」かAndroidの共有機能を使って後で読む記事を全部溜め込みます。時間が空いた時と1週間の中で2時間程度記事を消化する時間を設けているのでその時間を使って消化していきます。読んだものをチェックをしてTagにカテゴリをつけておきます。気に入った記事にも別でチェックをつけておきます。\n\n![fun/done/learn](/images/read.png)\n\n### 技術ナレッジ\n\n何か技術的に学びがあった時や自分の言葉で説明したいことなどを溜めておくページです。昔はここにコードスニペットなども入れていたのですが、運用が面倒なこと。Googleで検索して近いコードを探すのと、Notion上で検索して探すコストがそこまで変わらないので、途中から管理するのを辞めました。本当によく使うソースコードなどはVS Code上にスニペット機能があるのでそちらを使ったりしています。\n\n![技術ナレッジ](/images/knowledge.png)\n\n### メモ/Books/ノートまとめ\n\nこのあたり表題どおりで簡易メモと読んだ本のメモと何かアイデアとかをまとめたい時のノート置き場になっています。\n\n### ポモドーロ\n\n自分はポモドーロで作業することがほとんどです。なので、Inboxのタスクも25分を基本としてタスクの重みをつけています。例えば1日掛かりそうな実装があったとして、プルリク単位でタスク化するのではなくコミットごと、1機能ごとに25分ベースでタスク化しています。ただ見積もりなんてブレるのが当たり前なので、そこまで厳密にしていません。ざっくりタスク化している部分もあります。\n\n### まとめ\n\nNotionは最初こそ取っ付きにくいですが、自分の好きなようにカスタマイズできるので、自分の欲しい管理ツールを手に入れることができます。キーボードを自作するのと一緒だと思います。この記事では自分が普段どんな感じで使っているの簡単に紹介しましたが、GTDとの相性がかなりいいのでGTDのフローで普段仕事されている方はおすすめします。","src/content/blog/2021/0430.md","cfe20d722121465b",{"html":1372,"metadata":1373},"\u003Cp>2年ぐらい使っているツールですが、最近ようやく管理方法が落ち着いてきたのでまとめようと思います。\nとは言えほぼほぼ以下のスライドの内容を参考に作りました。\u003C/p>\n\u003Cp>\u003Ca href=\"https://speakerdeck.com/raykataoka/atomic-scrum-ge-ren-falsesheng-chan-xing-wozui-da-hua-surufang-fa\">Atomic Scrum 個人の生産性を最大化する方法\u003C/a>\u003C/p>\n\u003Cp>これを見た時に「求めていたのはこれだ！」と思いました。近い運用をしていたのですが、データベースの使い方が匠だなと思ったので、そこを真似した形で運用を始めた所自分でも納得のいく感じになりました。\u003C/p>\n\u003Ch3 id=\"ダッシュボード\">ダッシュボード\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/dashboard_0430.png\" alt=\"ダッシュボードの画像\">\u003C/p>\n\u003Cp>（焚き火の動画は心が落ち着くのでよく作業BGMとして流しています。。）\u003C/p>\n\u003Cp>基本的にこのページを常に表示させています。中身の項目を常に表示させておくと情報量が多いので基本的には「今週の目標」と「Today」のトグルだけ表示させています。\n上部に出ている時計ウィジェットは\u003Ca href=\"https://indify.co/\">Indify\u003C/a>というサービスを使うことで利用できます。\u003C/p>\n\u003Cp>※ただし、このウィジェットを使う時にアニメーション設定などを行うとCPUを使ってファンが回り出すので可能性があるので注意！（M1Macとかだと大丈夫かも）\u003C/p>\n\u003Cp>ダッシュボードにある各種情報のほとんどが「Create Linked Database」の機能を使って各種のデータベースを呼び出しています。データベースを呼び出した後はフィルター機能を使っています。例えば「Tomorrow」のトグルの中には明日着手予定のタスク一覧だけ表示されています。\u003C/p>\n\u003Ch3 id=\"inbox\">Inbox\u003C/h3>\n\u003Cp>GTDのワークフローで日々のタスクを運用しているためInboxに仕事、プライベート関係なくひたすら入力していきます。1日の終わりにInboxを見直す時間を取っていて、GTDのワークフローに沿って整理していきます。\u003C/p>\n\u003Cp>※GTDについては、\u003Ca href=\"https://www.amazon.co.jp/%E5%85%A8%E9%9D%A2%E6%94%B9%E8%A8%82%E7%89%88-%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEGTD-%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%95%E3%83%AA%E3%83%BC%E3%81%AE%E6%95%B4%E7%90%86%E8%A1%93-%E3%83%87%E3%83%93%E3%83%83%E3%83%89%E3%83%BB%E3%82%A2%E3%83%AC%E3%83%B3/dp/4576151878\">全面改訂版 はじめてのGTD ストレスフリーの整理術\u003C/a>という本がおすすめなので是非読んでください。\u003C/p>\n\u003Cp>InboxページもPCで作業している際は、常に開いた状態にしていますが、外出時は近くにPCがない場合もありInboxに入れようと思ってもその場で入れることが難しい状況があります。GTDにおいてInboxへのタスクの追加のしやすさは一番重要で、ここで追加しにくいユーザー体験になってしまうと途端にGTDのワークフローが破綻してしまいます。（Notionのスマホアプリは起動が重く割とストレスです。。。）\u003C/p>\n\u003Cp>自分は、\u003Ca href=\"https://www.notion.so/Fast-Notion-74dd4501d5824de7997a143baba1098f\">Fast Notion\u003C/a>というアプリを使用していてます。これが神アプリで起動してすぐ入力するUIが出てきてそのままPOSTすると、指定したNotionのページにデータが反映されるスグレモノです！「あれやんなきゃ」と思ってもその場で、入力するまでの時間に「何だっけ」と忘れることがあったりするのですが、このアプリのおかげで忘れず入力することができています。\u003C/p>\n\u003Cp>Inboxに入力する際に、タスクの粒度は適当です。明確にやらなくてはいけないタスクべースのものから、いくつかに小分けしないと消化できないタスクまで様々あり、寝る前にInboxを必ず確認してなるべくInboxを空の状態にしています。\u003C/p>\n\u003Ch3 id=\"習慣トラッカー\">習慣トラッカー\u003C/h3>\n\u003Cp>マスターは以下のようになっています。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/trucker.png\" alt=\"習慣トラッカー\">\u003C/p>\n\u003Cp>この運用にするまではダッシュボードの上部に習慣化したい事柄のチェックボックスをおいて毎日チェックする→翌日チェックを外すという運用していたのですが、一週間でどれぐらいやったか可視化したくてこの形にしました。\u003C/p>\n\u003Cp>毎日ダッシュボードに、今日の日付のデータを作成して運用しているので、マスターを見ることはほぼありません。Weeklyの振り返り時に使うテンプレートにも1週間の間でソートして表示するようにしています。\u003C/p>\n\u003Cp>習慣化自体は1ヶ月周期で結構頻繁に変えています。これは自分が単純に飽き性だからです。。\u003C/p>\n\u003Ch3 id=\"fundonelearn\">Fun/Done/Learn\u003C/h3>\n\u003Cp>毎日仕事が終わった時や寝る前に、「良かったこと」「学んだこと」「失敗したこと」を記述します。\n一週間の振り返り時に深堀りしたいことなどがあれば「Weekly」にチェックをしておきます。1ヶ月に振り返り時に更に深堀りたいなどがあれば1週間の振り返り時に「Monthly」にチェックを入れておきます。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/fundonelearn.png\" alt=\"fun/done/learn\">\u003C/p>\n\u003Ch3 id=\"weeklymonthly\">Weekly/Monthly\u003C/h3>\n\u003Cp>毎週日曜日と、月末に振り返りをしています。（25分）以下のようなテンプレートを用意していて1週間でフィルターしてあるデータベースを確認しながらどんな感じだったかを振り返ります。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/weekly_and_Monthly.png\" alt=\"fun/done/learn\">\u003C/p>\n\u003Ch3 id=\"read-later\">Read later\u003C/h3>\n\u003Cp>「Notion Web Clipper」かAndroidの共有機能を使って後で読む記事を全部溜め込みます。時間が空いた時と1週間の中で2時間程度記事を消化する時間を設けているのでその時間を使って消化していきます。読んだものをチェックをしてTagにカテゴリをつけておきます。気に入った記事にも別でチェックをつけておきます。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/read.png\" alt=\"fun/done/learn\">\u003C/p>\n\u003Ch3 id=\"技術ナレッジ\">技術ナレッジ\u003C/h3>\n\u003Cp>何か技術的に学びがあった時や自分の言葉で説明したいことなどを溜めておくページです。昔はここにコードスニペットなども入れていたのですが、運用が面倒なこと。Googleで検索して近いコードを探すのと、Notion上で検索して探すコストがそこまで変わらないので、途中から管理するのを辞めました。本当によく使うソースコードなどはVS Code上にスニペット機能があるのでそちらを使ったりしています。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/knowledge.png\" alt=\"技術ナレッジ\">\u003C/p>\n\u003Ch3 id=\"メモbooksノートまとめ\">メモ/Books/ノートまとめ\u003C/h3>\n\u003Cp>このあたり表題どおりで簡易メモと読んだ本のメモと何かアイデアとかをまとめたい時のノート置き場になっています。\u003C/p>\n\u003Ch3 id=\"ポモドーロ\">ポモドーロ\u003C/h3>\n\u003Cp>自分はポモドーロで作業することがほとんどです。なので、Inboxのタスクも25分を基本としてタスクの重みをつけています。例えば1日掛かりそうな実装があったとして、プルリク単位でタスク化するのではなくコミットごと、1機能ごとに25分ベースでタスク化しています。ただ見積もりなんてブレるのが当たり前なので、そこまで厳密にしていません。ざっくりタスク化している部分もあります。\u003C/p>\n\u003Ch3 id=\"まとめ\">まとめ\u003C/h3>\n\u003Cp>Notionは最初こそ取っ付きにくいですが、自分の好きなようにカスタマイズできるので、自分の欲しい管理ツールを手に入れることができます。キーボードを自作するのと一緒だと思います。この記事では自分が普段どんな感じで使っているの簡単に紹介しましたが、GTDとの相性がかなりいいのでGTDのフローで普段仕事されている方はおすすめします。\u003C/p>",{"headings":1374,"localImagePaths":1399,"remoteImagePaths":1400,"frontmatter":1365,"imagePaths":1401},[1375,1377,1380,1382,1385,1388,1391,1393,1396,1398],{"depth":29,"slug":1376,"text":1376},"ダッシュボード",{"depth":29,"slug":1378,"text":1379},"inbox","Inbox",{"depth":29,"slug":1381,"text":1381},"習慣トラッカー",{"depth":29,"slug":1383,"text":1384},"fundonelearn","Fun/Done/Learn",{"depth":29,"slug":1386,"text":1387},"weeklymonthly","Weekly/Monthly",{"depth":29,"slug":1389,"text":1390},"read-later","Read later",{"depth":29,"slug":1392,"text":1392},"技術ナレッジ",{"depth":29,"slug":1394,"text":1395},"メモbooksノートまとめ","メモ/Books/ノートまとめ",{"depth":29,"slug":1397,"text":1397},"ポモドーロ",{"depth":29,"slug":76,"text":76},[],[],[],"2021/0430.md","2021/0619",{"id":1403,"data":1405,"body":1408,"filePath":1409,"digest":1410,"rendered":1411,"legacyId":1432},{"title":1406,"publishDate":1407},"Slidevを使ってスライドを作成した。","2021-06-19","先日、技育CAMP勉強会というイベントでLTをさせていただきました。発表資料は以下です。\n\n[さよならIE　〜IEがない世界線で使えるCSSの紹介〜](https://good-bye-ie.vercel.app/)\n\n上記のスライドを今回は、[Slidev](https://sli.dev/)というツールで作成したので紹介しようと思います。\n\n### Slidevとは\n\nトップページを見るとどういったものか理解できますが、マークダウンで書いたものをスライドにしてくれるツールです。技術スタックとしてはVite+Vue3+WindiCSSとなっておりコードハイライトなども付いています。\n\n### レイアウトをCSSで調整できる\n\n他のツールでは、レイアウトがある程度決まってしまうものがほとんどです。しかしSlidevではなんとCSSでスライドのレイアウトを調整できます！具体的にはマークダウンの中にHTMLタグを書いてWindiCSSのプロパティを記述すればOKです！（もちろん`\u003Cstyle>\u003C/style>`で囲ってもOK）\n\n\n```html\n\u003Cdiv v-click class=\"absolute top-12 left-30 text-3xl\">つらい\u003C/div>\n\u003Cdiv v-click class=\"absolute top-17 right-12 text-3xl\">なんか分かんないけど崩れてる\u003C/div>\n\u003Cdiv v-click class=\"absolute top-30 left-80 text-3xl\">やりたくない\u003C/div>\n\u003Cdiv v-click class=\"absolute top-50 right-20 text-3xl\">大量のBabelポリフィル\u003C/div>\n\u003Cdiv v-click class=\"absolute top-60 left-50 text-3xl\">レガシー\u003C/div>\n\u003Cdiv v-click class=\"absolute bottom-12 right-30 text-3xl\">動作確認したくない\u003C/div>\n\u003Cdiv v-click class=\"absolute bottom-30 left-20 text-3xl\">Chromeだと崩れてないのに何故。。。\u003C/div>\n\u003Ch1 v-click class=\"text-8xl\">😵\u003C/h1>\n\n```\n\n`v-click`を指定すると上から順番に要素を表示してくれます。他のスライドツールだとアニメーションのような機能です。classにWindiCSSのプロパティを指定することで独自のレイアウトを実現できます。結果以下のようなスライドが出来上がりました。\n\n![スライド](/images/20210619.png)\n\n### コードブロック\n\n他のツールで結構大変なのは、コードの表現だと思います。シンタックスハイライトはもちろん、フォントの等幅を揃えたりするのも割と面倒だったりします。Slidevは、標準でシンタックスハイライトが導入されておりマークダウンで普通に記述すれば表現が可能です。また[monaco-editor](https://microsoft.github.io/monaco-editor/)をサポートしているのでスライド内の文字をその場で編集することも可能なので表現の幅が更に広がります！\n\n[コードハイライトのサンプル](https://demo.sli.dev/starter/4?clicks=1)\n\n### Vueのコンポーネントをスライド内に埋め込める！\n\nこれはちょっとびっくりしたのですが、Vueのコンポーネントを作成してスライド内に埋め込むことができます。[サンプル](https://demo.sli.dev/starter/5)を見ていただくと分かりますが、カウンターコンポーネントがスライド内に埋め込まれているのが分かります。マークダウンを以下のように書くと呼び出しできます！\n\n\n```md\n\u003C!-- ./components/Counter.vue -->\n\u003CCounter :count=\"10\" m=\"t-4\" />\n```\n\n埋め込みはTwitterや、YouTubeの動画も可能です。また当然ながらVideoタグや、audioタグをマークダウンに記述して専用の動画や、音声を再生することも可能です。\n\n### その他の機能\n\n他にも色々な便利機能があります！\n\n- スライドの出力がSPA、PDF、PNGのいずれかに対応している。\n- スライドをダークモードに切り替えできる\n- スライド一覧を表示できる。\n- インカメラ機能\n- テーマ機能のサポート\n\n今回は、テーマ機能として[slidev-theme-geist](https://github.com/nico-bachner/slidev-theme-geist)というVercelのデザインシステムを、ベースにしたものを利用しました。この他にも[沢山あるので](https://sli.dev/themes/gallery.html)お好きなものを選ぶと良いと思います。\n\n### 使ってみての感想\n\nマークダウンを書いてそのままスライドになってくれるのは、非常に便利でした。技術者であれば、普段マークダウンを書くことが多いと思うので、特に苦戦することなくスライドを作成できると思います。またViteを使っていることもあり、ビルドが一瞬で終わりストレスなく作業できます。\n\n一方で、CSSに凝りだすと作成に時間が、掛かってしまうかなと思いました。レイアウト変更ぐらいであればテーマ機能やなどでできますが、細かいレイアウトに凝りだすとCSSを普通に書くことになるので、その辺は時間に余裕がないと厳しいかなと思いました。\n\n今回はSPAでデプロイしましたが、そのままホスティングしてもOGPが生成されないので、og-imageとかを使う必要があるかなと思いました。\n\n\u003Cblockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\">\u003Cp lang=\"ja\" dir=\"ltr\">この後登壇するLTの資料はこちらです！（OGPなくてすみません！）\u003Ca href=\"https://t.co/RIYqwmQJ9H\">https://t.co/RIYqwmQJ9H\u003C/a>\u003Cbr> \u003Ca href=\"https://twitter.com/hashtag/%E6%8A%80%E8%82%B2CAMP?src=hash&amp;ref_src=twsrc%5Etfw\">#技育CAMP\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1405105899622998016?ref_src=twsrc%5Etfw\">June 16, 2021\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>","src/content/blog/2021/0619.md","0ad432fe9a87f9fa",{"html":1412,"metadata":1413},"\u003Cp>先日、技育CAMP勉強会というイベントでLTをさせていただきました。発表資料は以下です。\u003C/p>\n\u003Cp>\u003Ca href=\"https://good-bye-ie.vercel.app/\">さよならIE　〜IEがない世界線で使えるCSSの紹介〜\u003C/a>\u003C/p>\n\u003Cp>上記のスライドを今回は、\u003Ca href=\"https://sli.dev/\">Slidev\u003C/a>というツールで作成したので紹介しようと思います。\u003C/p>\n\u003Ch3 id=\"slidevとは\">Slidevとは\u003C/h3>\n\u003Cp>トップページを見るとどういったものか理解できますが、マークダウンで書いたものをスライドにしてくれるツールです。技術スタックとしてはVite+Vue3+WindiCSSとなっておりコードハイライトなども付いています。\u003C/p>\n\u003Ch3 id=\"レイアウトをcssで調整できる\">レイアウトをCSSで調整できる\u003C/h3>\n\u003Cp>他のツールでは、レイアウトがある程度決まってしまうものがほとんどです。しかしSlidevではなんとCSSでスライドのレイアウトを調整できます！具体的にはマークダウンの中にHTMLタグを書いてWindiCSSのプロパティを記述すればOKです！（もちろん\u003Ccode>&#x3C;style>&#x3C;/style>\u003C/code>で囲ってもOK）\u003C/p>\n\u003Cpre class=\"language-html\" data-language=\"html\">\u003Ccode is:raw=\"\" class=\"language-html\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>absolute top-12 left-30 text-3xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>つらい\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>absolute top-17 right-12 text-3xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>なんか分かんないけど崩れてる\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>absolute top-30 left-80 text-3xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>やりたくない\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>absolute top-50 right-20 text-3xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>大量のBabelポリフィル\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>absolute top-60 left-50 text-3xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>レガシー\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>absolute bottom-12 right-30 text-3xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>動作確認したくない\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>absolute bottom-30 left-20 text-3xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>Chromeだと崩れてないのに何故。。。\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>h1\u003C/span> \u003Cspan class=\"token attr-name\">v-click\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>text-8xl\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>😵\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>h1\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>v-click\u003C/code>を指定すると上から順番に要素を表示してくれます。他のスライドツールだとアニメーションのような機能です。classにWindiCSSのプロパティを指定することで独自のレイアウトを実現できます。結果以下のようなスライドが出来上がりました。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20210619.png\" alt=\"スライド\">\u003C/p>\n\u003Ch3 id=\"コードブロック\">コードブロック\u003C/h3>\n\u003Cp>他のツールで結構大変なのは、コードの表現だと思います。シンタックスハイライトはもちろん、フォントの等幅を揃えたりするのも割と面倒だったりします。Slidevは、標準でシンタックスハイライトが導入されておりマークダウンで普通に記述すれば表現が可能です。また\u003Ca href=\"https://microsoft.github.io/monaco-editor/\">monaco-editor\u003C/a>をサポートしているのでスライド内の文字をその場で編集することも可能なので表現の幅が更に広がります！\u003C/p>\n\u003Cp>\u003Ca href=\"https://demo.sli.dev/starter/4?clicks=1\">コードハイライトのサンプル\u003C/a>\u003C/p>\n\u003Ch3 id=\"vueのコンポーネントをスライド内に埋め込める\">Vueのコンポーネントをスライド内に埋め込める！\u003C/h3>\n\u003Cp>これはちょっとびっくりしたのですが、Vueのコンポーネントを作成してスライド内に埋め込むことができます。\u003Ca href=\"https://demo.sli.dev/starter/5\">サンプル\u003C/a>を見ていただくと分かりますが、カウンターコンポーネントがスライド内に埋め込まれているのが分かります。マークダウンを以下のように書くと呼び出しできます！\u003C/p>\n\u003Cpre class=\"language-md\" data-language=\"md\">\u003Ccode is:raw=\"\" class=\"language-md\">\u003Cspan class=\"token comment\">&#x3C;!-- ./components/Counter.vue -->\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>Counter\u003C/span> \u003Cspan class=\"token attr-name\">:count\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>10\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">m\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>t-4\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>埋め込みはTwitterや、YouTubeの動画も可能です。また当然ながらVideoタグや、audioタグをマークダウンに記述して専用の動画や、音声を再生することも可能です。\u003C/p>\n\u003Ch3 id=\"その他の機能\">その他の機能\u003C/h3>\n\u003Cp>他にも色々な便利機能があります！\u003C/p>\n\u003Cul>\n\u003Cli>スライドの出力がSPA、PDF、PNGのいずれかに対応している。\u003C/li>\n\u003Cli>スライドをダークモードに切り替えできる\u003C/li>\n\u003Cli>スライド一覧を表示できる。\u003C/li>\n\u003Cli>インカメラ機能\u003C/li>\n\u003Cli>テーマ機能のサポート\u003C/li>\n\u003C/ul>\n\u003Cp>今回は、テーマ機能として\u003Ca href=\"https://github.com/nico-bachner/slidev-theme-geist\">slidev-theme-geist\u003C/a>というVercelのデザインシステムを、ベースにしたものを利用しました。この他にも\u003Ca href=\"https://sli.dev/themes/gallery.html\">沢山あるので\u003C/a>お好きなものを選ぶと良いと思います。\u003C/p>\n\u003Ch3 id=\"使ってみての感想\">使ってみての感想\u003C/h3>\n\u003Cp>マークダウンを書いてそのままスライドになってくれるのは、非常に便利でした。技術者であれば、普段マークダウンを書くことが多いと思うので、特に苦戦することなくスライドを作成できると思います。またViteを使っていることもあり、ビルドが一瞬で終わりストレスなく作業できます。\u003C/p>\n\u003Cp>一方で、CSSに凝りだすと作成に時間が、掛かってしまうかなと思いました。レイアウト変更ぐらいであればテーマ機能やなどでできますが、細かいレイアウトに凝りだすとCSSを普通に書くことになるので、その辺は時間に余裕がないと厳しいかなと思いました。\u003C/p>\n\u003Cp>今回はSPAでデプロイしましたが、そのままホスティングしてもOGPが生成されないので、og-imageとかを使う必要があるかなと思いました。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\">\u003Cp lang=\"ja\" dir=\"ltr\">この後登壇するLTの資料はこちらです！（OGPなくてすみません！）\u003Ca href=\"https://t.co/RIYqwmQJ9H\">https://t.co/RIYqwmQJ9H\u003C/a>\u003Cbr> \u003Ca href=\"https://twitter.com/hashtag/%E6%8A%80%E8%82%B2CAMP?src=hash&#x26;ref_src=twsrc%5Etfw\">#技育CAMP\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1405105899622998016?ref_src=twsrc%5Etfw\">June 16, 2021\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>",{"headings":1414,"localImagePaths":1429,"remoteImagePaths":1430,"frontmatter":1405,"imagePaths":1431},[1415,1418,1421,1423,1426,1428],{"depth":29,"slug":1416,"text":1417},"slidevとは","Slidevとは",{"depth":29,"slug":1419,"text":1420},"レイアウトをcssで調整できる","レイアウトをCSSで調整できる",{"depth":29,"slug":1422,"text":1422},"コードブロック",{"depth":29,"slug":1424,"text":1425},"vueのコンポーネントをスライド内に埋め込める","Vueのコンポーネントをスライド内に埋め込める！",{"depth":29,"slug":1427,"text":1427},"その他の機能",{"depth":29,"slug":1149,"text":1149},[],[],[],"2021/0619.md","2021/0701",{"id":1433,"data":1435,"body":1438,"filePath":1439,"digest":1440,"rendered":1441,"legacyId":1467},{"title":1436,"publishDate":1437},"連結リストを学んだ","2021-07-01","自分は、エンジニアを名乗りながらもアルゴリズムをほとんど知らずに生きてきました。もちろん文系の大学卒というのもひとつの理由だと思いますが、さすがにそろそろ真面目に勉強しようと思ったので、今回は基礎中の基礎である連結リストについて学びコードも書いたので記事にしました。\n\n### アルゴリズム図鑑\n\nその前に自分は「[アルゴリズム図鑑 絵で見てわかる26のアルゴリズム](https://www.amazon.co.jp/dp/4798149772/ref=cm_sw_r_tw_dp_TKQT0F2P9H14FZ50T43R)」という本でざっとどういうアルゴリズムがあるのか一通り把握しました。これは前編カラーで絵が分かりやすくてかなりオススメ！\n\n### 連結リスト（リンクリスト）\n\n別名***リンクリスト***、***リンクトリスト***などと呼ばれます。前後の要素にリンクを持つデータ構造のことであり、要素の値とリンクがセットになったものを`Node`と呼びます。連結リストの一番最初のNodeへのリンクのことを`head`と呼び、一番最後のNodeのことを`tail`と呼びます。よく似た構造に配列があり比較対称となります。\n\n### 配列とリンクリストの違い\n\n以下に特に大きな違いをまとめました。\n\n- サイズ\n  - ***配列***：宣言する際に指定する\n  - ***連結リスト***：宣言時に指定はしないので制限することなく実行している最中に変更できる\n\n- 要素へのアクセス\n  - ***配列***：インデックス（添字）があり直接、ランダムにアクセスすることが可能\n  - ***連結リスト***：最初の要素から順番にアクセスしていきます。ランダムなアクセスが苦手\n\n- 要素の挿入、削除、検索\n  - ***配列***：シフトが必要。遅い\n  - ***連結リスト***：順番に処理する関係上簡単に素早くできる。\n\n要は、用途によって使い分けてね。ということだとは思いますが、自分が今まで連結リストを実務で扱ったケースはありませんでした。。そんな連結リストには主に3つの種類があります。\n\n### 単方向リスト\n\n各要素が一つ後ろにリンクを持っているリストのこと。リンクはリスト上の次のNodeを指していて最後尾は`Null`になる。\n\n![単方向リスト](/images/singly-linked-list.png)\n\n### 双方向リスト\n\n各要素が一つ後と前の要素へのリンクをもっているリストのこと。この場合は最初と最後のデータがNullとなる。\n\n![双方向リスト](/images/doubly-linked-list.png)\n\n### 循環リスト\n\n各要素が一つ後のリンクを持っており、最後の要素は、最初の要素へのリンクをもっている\n\n![循環リスト](/images/circularly-linked-list.png)\n\n\n### 実際に書いてみる\n\n[こちら](https://github.com/ryokatsuse/algorithm-sandbox/blob/main/linkd-list/index.ts)に実際に書いたコードがあります。今回は、以下のような機能を追加しました。\n\n- 要素の追加\n- 要素の削除\n- リストを逆にする\n- 配列 ⇔ リスト変換\n- 配列内での検索\n\n最初に初期値を設定します。今回はクラスです。\n\n```ts\nexport class LinkedListNode\u003CT> {\n  value: T;\n  nextNode: LinkedListNode\u003CT> | null;\n\n  constructor(value: T, next = null) {\n    this.value = value;\n    this.nextNode = next;\n  }\n}\n\n```\n\n追加については特に難しいことはなく先程作ったクラスのインスタンスを生成後にheadとtailの値を確認してから次のリストに1つ移ります。その後引数を代入します。\n\n```ts\n\n /**\n   * 要素を追加\n   *\n   * @param {T} value\n   * @return {*}\n   * @memberof LinkedList\n   */\n  push(value: T) {\n    const newNode = new LinkedListNode\u003CT>(value);\n\n    if (!this.head || !this.tail) {\n      this.head = newNode;\n      this.tail = newNode;\n    } else {\n      this.tail.nextNode = newNode;\n      this.tail = newNode;\n    }\n    this.length += 1;\n\n    return newNode;\n  }\n\n```\n\n削除が少し頭を使いますが、まずリストに要素があるか確認する関数を作成して、要素がある場合は、現在のheadが新しいheadに移動しつつリスト自体のlengthを1つ減らします。\nその後削除したい要素までwhile文を回して削除したい要素が見つかったらlengthを1つ減らします。\n\n```ts\n/**\n   *  値を削除する\n   *\n   * @param {T} value\n   * @return {*} \n   * @memberof LinkedList\n   */\n  deleteValue(value: T) {\n    if (this.head?.value === value)\n      return this.removeHead();\n\n    let currentNode = this.head?.nextNode;\n    let previousNode = this.head;\n\n    while (currentNode) {\n      if (currentNode.value === value) break;\n\n      previousNode = currentNode;\n      currentNode = currentNode.nextNode;\n    }\n\n    if (currentNode) {\n      if (!previousNode) return\n      previousNode.nextNode = currentNode?.nextNode;\n      this.length--;\n    }\n  }\n\n```\n\n### やってみて\n\n他にも、リストの途中に要素を追加する、リストの中の要素検索などの機能も追加していきたいが、追加と削除を実装したことだけで連結リストがどういうものかはなんとなく理解できた。フロントエンドをやっていると連結リストを作ることってほとんどない（JavaScriptには配列があり便利すぎるから）ので実務で実装することはないと思うが、概念だけでも覚えておくと良いと思った。\n\n### 次回\n次は、キュー・スタックを手を動かしながら学ぶ予定です。","src/content/blog/2021/0701.md","4431b5ee4ade7ea2",{"html":1442,"metadata":1443},"\u003Cp>自分は、エンジニアを名乗りながらもアルゴリズムをほとんど知らずに生きてきました。もちろん文系の大学卒というのもひとつの理由だと思いますが、さすがにそろそろ真面目に勉強しようと思ったので、今回は基礎中の基礎である連結リストについて学びコードも書いたので記事にしました。\u003C/p>\n\u003Ch3 id=\"アルゴリズム図鑑\">アルゴリズム図鑑\u003C/h3>\n\u003Cp>その前に自分は「\u003Ca href=\"https://www.amazon.co.jp/dp/4798149772/ref=cm_sw_r_tw_dp_TKQT0F2P9H14FZ50T43R\">アルゴリズム図鑑 絵で見てわかる26のアルゴリズム\u003C/a>」という本でざっとどういうアルゴリズムがあるのか一通り把握しました。これは前編カラーで絵が分かりやすくてかなりオススメ！\u003C/p>\n\u003Ch3 id=\"連結リストリンクリスト\">連結リスト（リンクリスト）\u003C/h3>\n\u003Cp>別名\u003Cem>\u003Cstrong>リンクリスト\u003C/strong>\u003C/em>、\u003Cem>\u003Cstrong>リンクトリスト\u003C/strong>\u003C/em>などと呼ばれます。前後の要素にリンクを持つデータ構造のことであり、要素の値とリンクがセットになったものを\u003Ccode>Node\u003C/code>と呼びます。連結リストの一番最初のNodeへのリンクのことを\u003Ccode>head\u003C/code>と呼び、一番最後のNodeのことを\u003Ccode>tail\u003C/code>と呼びます。よく似た構造に配列があり比較対称となります。\u003C/p>\n\u003Ch3 id=\"配列とリンクリストの違い\">配列とリンクリストの違い\u003C/h3>\n\u003Cp>以下に特に大きな違いをまとめました。\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>サイズ\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cem>\u003Cstrong>配列\u003C/strong>\u003C/em>：宣言する際に指定する\u003C/li>\n\u003Cli>\u003Cem>\u003Cstrong>連結リスト\u003C/strong>\u003C/em>：宣言時に指定はしないので制限することなく実行している最中に変更できる\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>要素へのアクセス\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cem>\u003Cstrong>配列\u003C/strong>\u003C/em>：インデックス（添字）があり直接、ランダムにアクセスすることが可能\u003C/li>\n\u003Cli>\u003Cem>\u003Cstrong>連結リスト\u003C/strong>\u003C/em>：最初の要素から順番にアクセスしていきます。ランダムなアクセスが苦手\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>要素の挿入、削除、検索\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cem>\u003Cstrong>配列\u003C/strong>\u003C/em>：シフトが必要。遅い\u003C/li>\n\u003Cli>\u003Cem>\u003Cstrong>連結リスト\u003C/strong>\u003C/em>：順番に処理する関係上簡単に素早くできる。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>要は、用途によって使い分けてね。ということだとは思いますが、自分が今まで連結リストを実務で扱ったケースはありませんでした。。そんな連結リストには主に3つの種類があります。\u003C/p>\n\u003Ch3 id=\"単方向リスト\">単方向リスト\u003C/h3>\n\u003Cp>各要素が一つ後ろにリンクを持っているリストのこと。リンクはリスト上の次のNodeを指していて最後尾は\u003Ccode>Null\u003C/code>になる。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/singly-linked-list.png\" alt=\"単方向リスト\">\u003C/p>\n\u003Ch3 id=\"双方向リスト\">双方向リスト\u003C/h3>\n\u003Cp>各要素が一つ後と前の要素へのリンクをもっているリストのこと。この場合は最初と最後のデータがNullとなる。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/doubly-linked-list.png\" alt=\"双方向リスト\">\u003C/p>\n\u003Ch3 id=\"循環リスト\">循環リスト\u003C/h3>\n\u003Cp>各要素が一つ後のリンクを持っており、最後の要素は、最初の要素へのリンクをもっている\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/circularly-linked-list.png\" alt=\"循環リスト\">\u003C/p>\n\u003Ch3 id=\"実際に書いてみる\">実際に書いてみる\u003C/h3>\n\u003Cp>\u003Ca href=\"https://github.com/ryokatsuse/algorithm-sandbox/blob/main/linkd-list/index.ts\">こちら\u003C/a>に実際に書いたコードがあります。今回は、以下のような機能を追加しました。\u003C/p>\n\u003Cul>\n\u003Cli>要素の追加\u003C/li>\n\u003Cli>要素の削除\u003C/li>\n\u003Cli>リストを逆にする\u003C/li>\n\u003Cli>配列 ⇔ リスト変換\u003C/li>\n\u003Cli>配列内での検索\u003C/li>\n\u003C/ul>\n\u003Cp>最初に初期値を設定します。今回はクラスです。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">class\u003C/span> \u003Cspan class=\"token class-name\">LinkedListNode\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  value\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  nextNode\u003Cspan class=\"token operator\">:\u003C/span> LinkedListNode\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token keyword\">null\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token function\">constructor\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> next \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">null\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>value \u003Cspan class=\"token operator\">=\u003C/span> value\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>nextNode \u003Cspan class=\"token operator\">=\u003C/span> next\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>追加については特に難しいことはなく先程作ったクラスのインスタンスを生成後にheadとtailの値を確認してから次のリストに1つ移ります。その後引数を代入します。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\n \u003Cspan class=\"token comment\">/**\n   * 要素を追加\n   *\n   * @param {T} value\n   * @return {*}\n   * @memberof LinkedList\n   */\u003C/span>\n  \u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> newNode \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">LinkedListNode\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">!\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head \u003Cspan class=\"token operator\">||\u003C/span> \u003Cspan class=\"token operator\">!\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>tail\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head \u003Cspan class=\"token operator\">=\u003C/span> newNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>tail \u003Cspan class=\"token operator\">=\u003C/span> newNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">else\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>tail\u003Cspan class=\"token punctuation\">.\u003C/span>nextNode \u003Cspan class=\"token operator\">=\u003C/span> newNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>tail \u003Cspan class=\"token operator\">=\u003C/span> newNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>length \u003Cspan class=\"token operator\">+=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token keyword\">return\u003C/span> newNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>削除が少し頭を使いますが、まずリストに要素があるか確認する関数を作成して、要素がある場合は、現在のheadが新しいheadに移動しつつリスト自体のlengthを1つ減らします。\nその後削除したい要素までwhile文を回して削除したい要素が見つかったらlengthを1つ減らします。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token comment\">/**\n   *  値を削除する\n   *\n   * @param {T} value\n   * @return {*} \n   * @memberof LinkedList\n   */\u003C/span>\n  \u003Cspan class=\"token function\">deleteValue\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head\u003Cspan class=\"token operator\">?.\u003C/span>value \u003Cspan class=\"token operator\">===\u003C/span> value\u003Cspan class=\"token punctuation\">)\u003C/span>\n      \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">removeHead\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token keyword\">let\u003C/span> currentNode \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head\u003Cspan class=\"token operator\">?.\u003C/span>nextNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token keyword\">let\u003C/span> previousNode \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n    \u003Cspan class=\"token keyword\">while\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>currentNode\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>currentNode\u003Cspan class=\"token punctuation\">.\u003C/span>value \u003Cspan class=\"token operator\">===\u003C/span> value\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">break\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n      previousNode \u003Cspan class=\"token operator\">=\u003C/span> currentNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n      currentNode \u003Cspan class=\"token operator\">=\u003C/span> currentNode\u003Cspan class=\"token punctuation\">.\u003C/span>nextNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>currentNode\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">!\u003C/span>previousNode\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token keyword\">return\u003C/span>\n      previousNode\u003Cspan class=\"token punctuation\">.\u003C/span>nextNode \u003Cspan class=\"token operator\">=\u003C/span> currentNode\u003Cspan class=\"token operator\">?.\u003C/span>nextNode\u003Cspan class=\"token punctuation\">;\u003C/span>\n      \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>length\u003Cspan class=\"token operator\">--\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"やってみて\">やってみて\u003C/h3>\n\u003Cp>他にも、リストの途中に要素を追加する、リストの中の要素検索などの機能も追加していきたいが、追加と削除を実装したことだけで連結リストがどういうものかはなんとなく理解できた。フロントエンドをやっていると連結リストを作ることってほとんどない（JavaScriptには配列があり便利すぎるから）ので実務で実装することはないと思うが、概念だけでも覚えておくと良いと思った。\u003C/p>\n\u003Ch3 id=\"次回\">次回\u003C/h3>\n\u003Cp>次は、キュー・スタックを手を動かしながら学ぶ予定です。\u003C/p>",{"headings":1444,"localImagePaths":1464,"remoteImagePaths":1465,"frontmatter":1435,"imagePaths":1466},[1445,1447,1450,1452,1454,1456,1458,1460,1462],{"depth":29,"slug":1446,"text":1446},"アルゴリズム図鑑",{"depth":29,"slug":1448,"text":1449},"連結リストリンクリスト","連結リスト（リンクリスト）",{"depth":29,"slug":1451,"text":1451},"配列とリンクリストの違い",{"depth":29,"slug":1453,"text":1453},"単方向リスト",{"depth":29,"slug":1455,"text":1455},"双方向リスト",{"depth":29,"slug":1457,"text":1457},"循環リスト",{"depth":29,"slug":1459,"text":1459},"実際に書いてみる",{"depth":29,"slug":1461,"text":1461},"やってみて",{"depth":29,"slug":1463,"text":1463},"次回",[],[],[],"2021/0701.md","2021/0710",{"id":1468,"data":1470,"body":1473,"filePath":1474,"digest":1475,"rendered":1476,"legacyId":1483},{"title":1471,"publishDate":1472},"三日坊主でいいじゃん","2021-07-10","自分は、昔から飽きっぽい性格で何かを習慣化するということが苦手だ。ふと何でだろうなと考え思い返してみる。\n\n具体的には、「あれやりたい」とか「ここまでにやることがあるから毎日ちょっとずつやろう」みたいな計画を立てることは、非常に好きでモチベーションも高いと自分では思うのだが、3日以上経つと急激にやる気がなくなることが多い。もちろん継続できる時もあったりするのが経験上かなり少ない。\n\n「あれやりたい」については、結構自分では多趣味だと思っているのだが、裏を返すと飽きやすい性格でどれも浅い趣味になっていることがほとんどである。初日、2日目とかは異常なくらいのめり込むけど、なんとなく分かった所で、満足してしまうのかディープな所まで入り込まないことが多いかもしれない。エンジニア的に言うとReactのチュートリアルやったら満足みたいなのに近いかもしれない。\n\n「ここまでにやることがあるから毎日ちょっとずつやろう」については、昔から夏休みの宿題は最終日に全部やるみたいなタイプなので、締め切りは守るけどやる気がない時は、やらないみたいなタイプかも知れない。本当は良くないことは分かっているが、そうなってしまう経験がいくつかある。\n\n飽きっぽい性格の特徴として、すぐ後悔するという側面もあると思っている。「何でちゃんとやんなかったんだろう」とか「何で途中で諦めたんだろう」のように反省して「今度続きやってみよう」とか「一回諦めたんだから忘れよう」みたいな感じで次のステップに進むことがある。\n\nじゃあそもそも何で飽きっぽくなるかというと、外的要因があるとかなり過剰に反応してしまっていることが原因だと思っている。外的要因というのは、会社のこと、家族のこと、社会のことがほとんどだ。意識的にシャットアウトしているつもりでも何か1つでも気になりだすと今やっていることがどうでもよくなる事が経験上多いなーと思う。\n\nここまで書いてみると、マイペースだなとか思われるかもしれないが、実際そういう気質はあると自覚している。この自覚しているというのが非常に大事で、自覚がないと「俺はダメだ」みたいな気持ちになり鬱っぽくなってしまうと思っている。\n\n体調や気分の話を書き出すと話がそれそうなので、この辺にしておくが自覚はしてるし、習慣化出来ていることもあるので「飽きたら飽きたでいいじゃん」「三日坊主でいいじゃん」と考えるようにしている。\n\n最近はNotionで、習慣トラッカーを作成していて毎日「朝起きて水飲んだら必ずラジオ体操」「フィットボクシングを最低5分やる」みたいなちっぽけな習慣を、少しずつ習慣化するものを変えながら、まとめていて一日の終わりに振り返りもしている。この行為をしているのとしていないのでは大違いだなと思っているので継続していかないといけない。\n\n[※Notionの話は記事にしています](/blog/2021/0430/)\n\n日によっては、全く達成できない日もあるが達成できなかったとしても、気にせずやっている。気にせずできるのは、毎日振り返りをしているからだ。\n\n自分の仕事でやっているコードを書くというのは、継続できているわけだし「えらい！」と褒めることで、自分の中のモヤモヤは取れていると感じることがある。\n\n長々書いたが、別に***三日坊主でもまた期間を置いて再開したり、きっぱり忘れて諦める***みたいなことができているうちはまだマシなんだろうと思う。","src/content/blog/2021/0710.md","27cb12cf20c2960e",{"html":1477,"metadata":1478},"\u003Cp>自分は、昔から飽きっぽい性格で何かを習慣化するということが苦手だ。ふと何でだろうなと考え思い返してみる。\u003C/p>\n\u003Cp>具体的には、「あれやりたい」とか「ここまでにやることがあるから毎日ちょっとずつやろう」みたいな計画を立てることは、非常に好きでモチベーションも高いと自分では思うのだが、3日以上経つと急激にやる気がなくなることが多い。もちろん継続できる時もあったりするのが経験上かなり少ない。\u003C/p>\n\u003Cp>「あれやりたい」については、結構自分では多趣味だと思っているのだが、裏を返すと飽きやすい性格でどれも浅い趣味になっていることがほとんどである。初日、2日目とかは異常なくらいのめり込むけど、なんとなく分かった所で、満足してしまうのかディープな所まで入り込まないことが多いかもしれない。エンジニア的に言うとReactのチュートリアルやったら満足みたいなのに近いかもしれない。\u003C/p>\n\u003Cp>「ここまでにやることがあるから毎日ちょっとずつやろう」については、昔から夏休みの宿題は最終日に全部やるみたいなタイプなので、締め切りは守るけどやる気がない時は、やらないみたいなタイプかも知れない。本当は良くないことは分かっているが、そうなってしまう経験がいくつかある。\u003C/p>\n\u003Cp>飽きっぽい性格の特徴として、すぐ後悔するという側面もあると思っている。「何でちゃんとやんなかったんだろう」とか「何で途中で諦めたんだろう」のように反省して「今度続きやってみよう」とか「一回諦めたんだから忘れよう」みたいな感じで次のステップに進むことがある。\u003C/p>\n\u003Cp>じゃあそもそも何で飽きっぽくなるかというと、外的要因があるとかなり過剰に反応してしまっていることが原因だと思っている。外的要因というのは、会社のこと、家族のこと、社会のことがほとんどだ。意識的にシャットアウトしているつもりでも何か1つでも気になりだすと今やっていることがどうでもよくなる事が経験上多いなーと思う。\u003C/p>\n\u003Cp>ここまで書いてみると、マイペースだなとか思われるかもしれないが、実際そういう気質はあると自覚している。この自覚しているというのが非常に大事で、自覚がないと「俺はダメだ」みたいな気持ちになり鬱っぽくなってしまうと思っている。\u003C/p>\n\u003Cp>体調や気分の話を書き出すと話がそれそうなので、この辺にしておくが自覚はしてるし、習慣化出来ていることもあるので「飽きたら飽きたでいいじゃん」「三日坊主でいいじゃん」と考えるようにしている。\u003C/p>\n\u003Cp>最近はNotionで、習慣トラッカーを作成していて毎日「朝起きて水飲んだら必ずラジオ体操」「フィットボクシングを最低5分やる」みたいなちっぽけな習慣を、少しずつ習慣化するものを変えながら、まとめていて一日の終わりに振り返りもしている。この行為をしているのとしていないのでは大違いだなと思っているので継続していかないといけない。\u003C/p>\n\u003Cp>\u003Ca href=\"/blog/2021/0430/\">※Notionの話は記事にしています\u003C/a>\u003C/p>\n\u003Cp>日によっては、全く達成できない日もあるが達成できなかったとしても、気にせずやっている。気にせずできるのは、毎日振り返りをしているからだ。\u003C/p>\n\u003Cp>自分の仕事でやっているコードを書くというのは、継続できているわけだし「えらい！」と褒めることで、自分の中のモヤモヤは取れていると感じることがある。\u003C/p>\n\u003Cp>長々書いたが、別に\u003Cem>\u003Cstrong>三日坊主でもまた期間を置いて再開したり、きっぱり忘れて諦める\u003C/strong>\u003C/em>みたいなことができているうちはまだマシなんだろうと思う。\u003C/p>",{"headings":1479,"localImagePaths":1480,"remoteImagePaths":1481,"frontmatter":1470,"imagePaths":1482},[],[],[],[],"2021/0710.md","2021/0703",{"id":1484,"data":1486,"body":1489,"filePath":1490,"digest":1491,"rendered":1492,"legacyId":1513},{"title":1487,"publishDate":1488},"スタック・キューについて学んだ","2021-07-03","アルゴリズム学んだシリーズ。今回はスタックとキューについて学びました。というか既に概念自体は知っていたのでおさらいになります。\n\n### ソースコード\n\n以下にあります。\n\n- [スタック](https://github.com/ryokatsuse/algorithm-sandbox/blob/main/stack/index.ts)\n- [キュー](https://github.com/ryokatsuse/algorithm-sandbox/blob/main/queue/index.ts)\n\n### スタックとは\n\n日常でもスタックするとか言いますが、そのまんまの意味です。縦にどんどん山積みにしてあるデータ構造で、最後に追加した要素を取り出す仕組みのことです。\n\n例えば\n- 丸亀製麺でうどんを食べるときに、最初にトレーとお皿を上から取っていく（一番下から取ることない）\n- 積ん読してある本の一番上のものから読む\n- 洗濯かごに入ってある洗濯物を洗濯するときに、上から洗濯機に入れる（下からわざわざ入れない）\n\nのようなものはすべてスタックです。後入れ先出しなので***LIFO（Last In Farst Out）***なんて呼ばれます。\n\n- 追加する：プッシュ\n- 取り出す：ポップ\n\n### キュー\n\nキューもそのまんまの意味です。英語で順番待ちなどの意味なので\n\n- 区役所で整理券を、もらって書いてある受付番号の順番に呼ばれる\n- レジに並ぶ\n- 飛行機に搭乗するとき\n\nのようなものはすべてキューです。先入れ先出しなので***FIFO（Farst In Farst Out）***と呼びます。\n\n- 追加する：エンキュー\n- 取り出す：デキュー\n\n### プログラミングでの用途を考える\n\n普段配列を使っていれば、すぐにスタックとキューを実装できそうなことが分かります。スタックであればpush()とpop()を使えばOKです。\n\n\n```js\nconst array = [];\narray.push(0);\narray.push(1);\narray.push(2);\narray.push(3);\narray.pop() // 3が削除される\n```\n\nキューは最初の要素を取り除くのでshift()を使います。\n\n```js\nconst array = [];\narray.push(0);\narray.push(1);\narray.push(2);\narray.push(3);\narray.shift() // 0が削除される\n\n```\n\n※ shift()は破壊的な変更なので、配列を一度別変数で展開して使いましょう！\n\n他にも再帰関数の呼び出しはスタック、非同期通信はキューになるかなと思います。\n\n### 実装\n\n以前に[連結リストを学んだ](http://localhost:8000/blog/2021/0701/)でLinkedListクラスを実装していました。実はこの機能をほとんど使えそうです。スタックの方は、ゼロから作りましたがキューの方は、LinkedListのクラスをimportして実装しました。\n\nスタックはpush()とpop()があればいいので作るのは簡単です。push関数内で生成しているインスタンスは扱うNodeの初期値になります。（連結リストで実装したものと同じ）\n\n```ts\n/**\n   * 追加\n   *\n   * @param {T} value\n   * @return {*} \n   * @memberof Stack\n   */\n  push(value: T) {\n    const newNode = new StackNode(value)\n    newNode.nextNode = this.head\n    this.head = newNode\n    this.length + - 1\n\n    return newNode\n  }\n\n  /**\n   *\n   * 削除\n   * @return {*} \n   * @memberof Stack\n   */\n  pop() {\n    const deletedNode = this.head\n    if (this.head) {\n      this.head = this.head.nextNode\n      this.length -= 1\n    }\n    return deletedNode\n  }\n\n\n```\n\nキューの方は、[ソースコード](https://github.com/ryokatsuse/algorithm-sandbox/blob/main/queue/index.ts)を見て頂ければと思いますが、LinkedListをimportしています。\nスタックとの違いであるshiftについては、deleteHead()という関数で最初のheadを削除しています。\n\n### リングバッファ\n\nキューで「エンキュー」「デキュー」を繰り返すと、要素が右側に移動してしまいデータのサイズがどんどん膨れ上がっていきます。このようなことにならないような仕組みとして[リングバッファ](https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%90%E3%83%83%E3%83%95%E3%82%A1)というものがあります。\n\nこれはデータのメモリが輪っか状になっているように見えるもので実態は、***最後の要素に移動すると最初に戻る***、***最初の要素の前に移動すると最後の要素に移動する***という意味になります。データの一時的な保管場所ですね。\n\n\n### やってみて\n\n正直、普段からよく使う言葉ではあるのでそこまで難しく考える必要はないかもしれませんが、何かソースコードを読んでいるときに「これはスタックしてそう」とか「ここでキューが溜まりそう」などを意識することって大事なことだなと改めて思いました。\n\n### 次回\n\n次は、ハッシュテーブルをやってみます。","src/content/blog/2021/0703.md","f979579b87808e13",{"html":1493,"metadata":1494},"\u003Cp>アルゴリズム学んだシリーズ。今回はスタックとキューについて学びました。というか既に概念自体は知っていたのでおさらいになります。\u003C/p>\n\u003Ch3 id=\"ソースコード\">ソースコード\u003C/h3>\n\u003Cp>以下にあります。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/ryokatsuse/algorithm-sandbox/blob/main/stack/index.ts\">スタック\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/ryokatsuse/algorithm-sandbox/blob/main/queue/index.ts\">キュー\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"スタックとは\">スタックとは\u003C/h3>\n\u003Cp>日常でもスタックするとか言いますが、そのまんまの意味です。縦にどんどん山積みにしてあるデータ構造で、最後に追加した要素を取り出す仕組みのことです。\u003C/p>\n\u003Cp>例えば\u003C/p>\n\u003Cul>\n\u003Cli>丸亀製麺でうどんを食べるときに、最初にトレーとお皿を上から取っていく（一番下から取ることない）\u003C/li>\n\u003Cli>積ん読してある本の一番上のものから読む\u003C/li>\n\u003Cli>洗濯かごに入ってある洗濯物を洗濯するときに、上から洗濯機に入れる（下からわざわざ入れない）\u003C/li>\n\u003C/ul>\n\u003Cp>のようなものはすべてスタックです。後入れ先出しなので***LIFO（Last In Farst Out）***なんて呼ばれます。\u003C/p>\n\u003Cul>\n\u003Cli>追加する：プッシュ\u003C/li>\n\u003Cli>取り出す：ポップ\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"キュー\">キュー\u003C/h3>\n\u003Cp>キューもそのまんまの意味です。英語で順番待ちなどの意味なので\u003C/p>\n\u003Cul>\n\u003Cli>区役所で整理券を、もらって書いてある受付番号の順番に呼ばれる\u003C/li>\n\u003Cli>レジに並ぶ\u003C/li>\n\u003Cli>飛行機に搭乗するとき\u003C/li>\n\u003C/ul>\n\u003Cp>のようなものはすべてキューです。先入れ先出しなので***FIFO（Farst In Farst Out）***と呼びます。\u003C/p>\n\u003Cul>\n\u003Cli>追加する：エンキュー\u003C/li>\n\u003Cli>取り出す：デキュー\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"プログラミングでの用途を考える\">プログラミングでの用途を考える\u003C/h3>\n\u003Cp>普段配列を使っていれば、すぐにスタックとキューを実装できそうなことが分かります。スタックであればpush()とpop()を使えばOKです。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token keyword\">const\u003C/span> array \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">pop\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// 3が削除される\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>キューは最初の要素を取り除くのでshift()を使います。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token keyword\">const\u003C/span> array \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\narray\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">shift\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// 0が削除される\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>※ shift()は破壊的な変更なので、配列を一度別変数で展開して使いましょう！\u003C/p>\n\u003Cp>他にも再帰関数の呼び出しはスタック、非同期通信はキューになるかなと思います。\u003C/p>\n\u003Ch3 id=\"実装\">実装\u003C/h3>\n\u003Cp>以前に\u003Ca href=\"http://localhost:8000/blog/2021/0701/\">連結リストを学んだ\u003C/a>でLinkedListクラスを実装していました。実はこの機能をほとんど使えそうです。スタックの方は、ゼロから作りましたがキューの方は、LinkedListのクラスをimportして実装しました。\u003C/p>\n\u003Cp>スタックはpush()とpop()があればいいので作るのは簡単です。push関数内で生成しているインスタンスは扱うNodeの初期値になります。（連結リストで実装したものと同じ）\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token comment\">/**\n   * 追加\n   *\n   * @param {T} value\n   * @return {*} \n   * @memberof Stack\n   */\u003C/span>\n  \u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> newNode \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">StackNode\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>value\u003Cspan class=\"token punctuation\">)\u003C/span>\n    newNode\u003Cspan class=\"token punctuation\">.\u003C/span>nextNode \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head \u003Cspan class=\"token operator\">=\u003C/span> newNode\n    \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>length \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token operator\">-\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\n\n    \u003Cspan class=\"token keyword\">return\u003C/span> newNode\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n  \u003Cspan class=\"token comment\">/**\n   *\n   * 削除\n   * @return {*} \n   * @memberof Stack\n   */\u003C/span>\n  \u003Cspan class=\"token function\">pop\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> deletedNode \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head\n    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>head\u003Cspan class=\"token punctuation\">.\u003C/span>nextNode\n      \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>length \u003Cspan class=\"token operator\">-=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> deletedNode\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\n\u003C/code>\u003C/pre>\n\u003Cp>キューの方は、\u003Ca href=\"https://github.com/ryokatsuse/algorithm-sandbox/blob/main/queue/index.ts\">ソースコード\u003C/a>を見て頂ければと思いますが、LinkedListをimportしています。\nスタックとの違いであるshiftについては、deleteHead()という関数で最初のheadを削除しています。\u003C/p>\n\u003Ch3 id=\"リングバッファ\">リングバッファ\u003C/h3>\n\u003Cp>キューで「エンキュー」「デキュー」を繰り返すと、要素が右側に移動してしまいデータのサイズがどんどん膨れ上がっていきます。このようなことにならないような仕組みとして\u003Ca href=\"https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%90%E3%83%83%E3%83%95%E3%82%A1\">リングバッファ\u003C/a>というものがあります。\u003C/p>\n\u003Cp>これはデータのメモリが輪っか状になっているように見えるもので実態は、\u003Cem>\u003Cstrong>最後の要素に移動すると最初に戻る\u003C/strong>\u003C/em>、\u003Cem>\u003Cstrong>最初の要素の前に移動すると最後の要素に移動する\u003C/strong>\u003C/em>という意味になります。データの一時的な保管場所ですね。\u003C/p>\n\u003Ch3 id=\"やってみて\">やってみて\u003C/h3>\n\u003Cp>正直、普段からよく使う言葉ではあるのでそこまで難しく考える必要はないかもしれませんが、何かソースコードを読んでいるときに「これはスタックしてそう」とか「ここでキューが溜まりそう」などを意識することって大事なことだなと改めて思いました。\u003C/p>\n\u003Ch3 id=\"次回\">次回\u003C/h3>\n\u003Cp>次は、ハッシュテーブルをやってみます。\u003C/p>",{"headings":1495,"localImagePaths":1510,"remoteImagePaths":1511,"frontmatter":1486,"imagePaths":1512},[1496,1498,1500,1502,1504,1506,1508,1509],{"depth":29,"slug":1497,"text":1497},"ソースコード",{"depth":29,"slug":1499,"text":1499},"スタックとは",{"depth":29,"slug":1501,"text":1501},"キュー",{"depth":29,"slug":1503,"text":1503},"プログラミングでの用途を考える",{"depth":29,"slug":1505,"text":1505},"実装",{"depth":29,"slug":1507,"text":1507},"リングバッファ",{"depth":29,"slug":1461,"text":1461},{"depth":29,"slug":1463,"text":1463},[],[],[],"2021/0703.md","2021/1201",{"id":1514,"data":1516,"body":1519,"filePath":1520,"digest":1521,"rendered":1522,"legacyId":1535},{"title":1517,"publishDate":1518},"1人Advent Calendar","2021-12-01","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の1日目の記事ですが、めちゃくちゃサボっていて年末に書いています。\n\n\n## これ何？\n\n毎日記事を書くの面白いなと思って、何かやってみたくなり、作ったのは良いものの仕事や育児に忙しくサボりまくって今まとめて書いています。\n\n\n## どんなことを書くの？\n\n1年の振り返りが主になると思います。（多分）今年は自分にとって色々と考えさせられる年になったので書こうと思います。","src/content/blog/2021/1201.md","3de1c2d3c63fc464",{"html":1523,"metadata":1524},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の1日目の記事ですが、めちゃくちゃサボっていて年末に書いています。\u003C/p>\n\u003Ch2 id=\"これ何\">これ何？\u003C/h2>\n\u003Cp>毎日記事を書くの面白いなと思って、何かやってみたくなり、作ったのは良いものの仕事や育児に忙しくサボりまくって今まとめて書いています。\u003C/p>\n\u003Ch2 id=\"どんなことを書くの\">どんなことを書くの？\u003C/h2>\n\u003Cp>1年の振り返りが主になると思います。（多分）今年は自分にとって色々と考えさせられる年になったので書こうと思います。\u003C/p>",{"headings":1525,"localImagePaths":1532,"remoteImagePaths":1533,"frontmatter":1516,"imagePaths":1534},[1526,1529],{"depth":22,"slug":1527,"text":1528},"これ何","これ何？",{"depth":22,"slug":1530,"text":1531},"どんなことを書くの","どんなことを書くの？",[],[],[],"2021/1201.md","2021/0827",{"id":1536,"data":1538,"body":1541,"filePath":1542,"digest":1543,"rendered":1544,"legacyId":1567},{"title":1539,"publishDate":1540},"Reactで最低限のSVGアイコンコンポーネントを作る","2021-08-27","追記：2021/08/28 ***ボタンコンポーネントで、今回作成したアイコンを使用する際に`button`タグの子要素に`div`を使用するのはNGのため`span`タグなどを設定してください！***\n\nSVGアイコンのコンポーネントを自作する必要があったのでそのメモです。\n\n## シンプルなSVGコンポーネント\n\n以下の警告マークのSVGを単体で作る場合は、以下のようなコンポーネントになると思います。\n\n![警告マーク](/images/Alert.png)\n\n\n```ts\nimport { VFC } from 'react';\n\ninterface Props {\n  size?: number\n  fill?: string\n}\n\nconst AlertIcon: VFC\u003CProps> = props => {\n  const { size, fill } = props\n  return (\n    \u003Csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      fill={fill}\n      viewBox=\"0 0 16 16\">\u003Cpath d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\">\u003C/path>\n    \u003C/svg>\n  );\n};\n\nexport default AlertIcon;\n\n```\n\n使う側は以下のように使います。（本当はstrokeもpropsで渡せた方がいいかも。。）\n\n```ts\nimport AlertIcon from '../AlertIcon'\n\n\u003CAlertIcon size={24} color=\"#000\" />\n```\n\n### シンプルなSVGコンポーネントの課題\n\nこれで基本OKかと思います。しかし数が多くなってきて、複数のSVGアイコンを1つのコンポーネントで、使いたいケースが出てきたときに、importが増えてちょっと微妙です。またよくあるのがボタンで左または、右などに矢印アイコンがついているようなボタンをよく見かけます。\n\n別でボタンコンポーネントを作る際アイコンが、矢印だけであれば矢印アイコンだけをimportしてくれば良いですが\n\n- 矢印以外にも使いたい\n- アイコンなしのボタンもある\n\nみたいな要件だった場合、少々アイコンとの組み合わせが悪くなります。今回はこういうケースを解決するための、最低限のSVGアイコンを作ってみたという記事です。\n\n### シンプルなSVGコンポーネントからPropsを削除\n\nまずは、先程のシンプルSVGコンポーネントからPropsを削除しておきます。今回は`.tsx`ファイル内にSVGのコードをラップしていますが、propsを渡さなくなったので、ただの`.svg`ファイルでも問題ありません。\n\n```ts\nimport { VFC } from 'react';\n\nconst AlertIcon: VFC =　() => {\n  return (\n    \u003Csvg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 16 16\">\u003Cpath d=\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\">\u003C/path>\n    \u003C/svg>\n  );\n};\n\nexport default AlertIcon;\n\n```\n\n### Icon.tsxを作成して全てのアイコンをimportしてtypeをもたせる\n\n先程のAlertアイコンの他に、ArrowアイコンやUserアイコンなど複数のSVGがあると仮定して全てimportしてきます。またtypeというpropsを用意してアイコンの切り替えができるようにします。他にもアイコンをクリックしたらイベントが発火できるようにonClickも追加しておきます。（何故HTMLDivElementなのかは後でわかります。）\n\n```ts\nimport AlertIcon from './Alert';\nimport ArrowIcon from './ArrowIcon';\nimport UserIcon from './UserIcon';\n\nexport const IconType = {\n  AlertIcon,\n  ArrowIcon,\n  UserIcon\n};\n\ninterface IconProps {\n  size?: number;\n  type: keyof typeof IconType;\n  fill?: string;\n  onClick?: React.MouseEventHandler\u003CHTMLDivElement>;\n}\n\n```\n\n### Iconコンポーネントをラップする\n\nまず先程設定した`IconType`を以下のようにコンポーネントとして使えるように設定します。この定数の部分がsvgタグになります。\n\n```ts\nconst IconSvgFile = IconType[type];\n```\n\nJSXとスタイル部分を書いていきます。先程のIconSvgFileをdiv要素などでラップします。スタイリングもしつつラップした部分にpropsを設定します。\n先に完成形を以下に貼ります。CSSは`@emotion/styled`を使っています。\n\n```ts\nimport { VFC } from 'react';\nimport styled from '@emotion/styled';\nimport AlertIcon from './Alert';\nimport ArrowIcon from '.ArrowIcon';\nimport UserIcon from '.UserIcon';\n\nexport const IconType = {\n  AlertIcon,\n  ArrowIcon,\n  UserIcon\n};\n\ninterface IconProps {\n  size?: number;\n  type: keyof typeof IconType;\n  fill?: string;\n  onClick?: React.MouseEventHandler\u003CHTMLDivElement>;\n}\n\nexport const Icon: VFC\u003CIconProps> = (props) => {\n  const { size , type, onClick, fill } = props;\n  const IconSvgFile = IconType[type];\n\n  return (\n    \u003CIconWrapper size={size} onClick={onClick} fill={fill}>\n      \u003CIconSvgFile />\n    \u003C/IconWrapper>\n  );\n};\n\nconst IconWrapper = styled.div\u003C{ size: number; fill?: string;}>`\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  cursor: ${({ onClick }) => (onClick ? 'pointer' : 'inherit')};\n  fill: ${({ fill }) => (fill ? fill : '')};\n`;\n\n```\n\n全てのpropsをdivに渡すことでSVGのサイズと色を制御しています。ちょっと荒業っぽいですがこれで使いやすい感じになりました。\n\n```ts\n\u003CIcon type=\"FileIcon\" size={24} fill=\"#f00\" />\n```\n\n後でボタンコンポーネントを作る際に今回作った`type`をそのまま渡せばアイコンありなしボタンが簡単に作成できそうです。\n\n### まとめ\n\n- SVGをdiv要素などでラップしたコンポーネントを作って全SVGアイコンをimportする\n- 複数コンポーネントをpropsで切り替えできるように設定する\n- アイコン付きボタンコンポーネントを作る際も同じpropsを渡せば簡単に実装できる\n\n他にもいい方法があれば是非教えてください！！！！","src/content/blog/2021/0827.md","0f83130d690282f0",{"html":1545,"metadata":1546},"\u003Cp>追記：2021/08/28 \u003Cem>\u003Cstrong>ボタンコンポーネントで、今回作成したアイコンを使用する際に\u003Ccode>button\u003C/code>タグの子要素に\u003Ccode>div\u003C/code>を使用するのはNGのため\u003Ccode>span\u003C/code>タグなどを設定してください！\u003C/strong>\u003C/em>\u003C/p>\n\u003Cp>SVGアイコンのコンポーネントを自作する必要があったのでそのメモです。\u003C/p>\n\u003Ch2 id=\"シンプルなsvgコンポーネント\">シンプルなSVGコンポーネント\u003C/h2>\n\u003Cp>以下の警告マークのSVGを単体で作る場合は、以下のようなコンポーネントになると思います。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/Alert.png\" alt=\"警告マーク\">\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token constant\">VFC\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'react'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">Props\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  size\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\n  fill\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> AlertIcon\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">VFC\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>Props\u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> props \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> size\u003Cspan class=\"token punctuation\">,\u003C/span> fill \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> props\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>svg\n      xmlns\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"http://www.w3.org/2000/svg\"\u003C/span>\n      width\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>size\u003Cspan class=\"token punctuation\">}\u003C/span>\n      height\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>size\u003Cspan class=\"token punctuation\">}\u003C/span>\n      fill\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>fill\u003Cspan class=\"token punctuation\">}\u003C/span>\n      viewBox\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"0 0 16 16\"\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>path d\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>path\u003Cspan class=\"token operator\">>\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>svg\u003Cspan class=\"token operator\">>\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> AlertIcon\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>使う側は以下のように使います。（本当はstrokeもpropsで渡せた方がいいかも。。）\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">import\u003C/span> AlertIcon \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'../AlertIcon'\u003C/span>\n\n\u003Cspan class=\"token operator\">&#x3C;\u003C/span>AlertIcon size\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token number\">24\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span> color\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"#000\"\u003C/span> \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"シンプルなsvgコンポーネントの課題\">シンプルなSVGコンポーネントの課題\u003C/h3>\n\u003Cp>これで基本OKかと思います。しかし数が多くなってきて、複数のSVGアイコンを1つのコンポーネントで、使いたいケースが出てきたときに、importが増えてちょっと微妙です。またよくあるのがボタンで左または、右などに矢印アイコンがついているようなボタンをよく見かけます。\u003C/p>\n\u003Cp>別でボタンコンポーネントを作る際アイコンが、矢印だけであれば矢印アイコンだけをimportしてくれば良いですが\u003C/p>\n\u003Cul>\n\u003Cli>矢印以外にも使いたい\u003C/li>\n\u003Cli>アイコンなしのボタンもある\u003C/li>\n\u003C/ul>\n\u003Cp>みたいな要件だった場合、少々アイコンとの組み合わせが悪くなります。今回はこういうケースを解決するための、最低限のSVGアイコンを作ってみたという記事です。\u003C/p>\n\u003Ch3 id=\"シンプルなsvgコンポーネントからpropsを削除\">シンプルなSVGコンポーネントからPropsを削除\u003C/h3>\n\u003Cp>まずは、先程のシンプルSVGコンポーネントからPropsを削除しておきます。今回は\u003Ccode>.tsx\u003C/code>ファイル内にSVGのコードをラップしていますが、propsを渡さなくなったので、ただの\u003Ccode>.svg\u003C/code>ファイルでも問題ありません。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token constant\">VFC\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'react'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> AlertIcon\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token function-variable function\">VFC\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span>　\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>svg\n      xmlns\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"http://www.w3.org/2000/svg\"\u003C/span>\n      viewBox\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"0 0 16 16\"\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>path d\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"M8.22 1.754a.25.25 0 00-.44 0L1.698 13.132a.25.25 0 00.22.368h12.164a.25.25 0 00.22-.368L8.22 1.754zm-1.763-.707c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0114.082 15H1.918a1.75 1.75 0 01-1.543-2.575L6.457 1.047zM9 11a1 1 0 11-2 0 1 1 0 012 0zm-.25-5.25a.75.75 0 00-1.5 0v2.5a.75.75 0 001.5 0v-2.5z\"\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>path\u003Cspan class=\"token operator\">>\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>svg\u003Cspan class=\"token operator\">>\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">default\u003C/span> AlertIcon\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"icontsxを作成して全てのアイコンをimportしてtypeをもたせる\">Icon.tsxを作成して全てのアイコンをimportしてtypeをもたせる\u003C/h3>\n\u003Cp>先程のAlertアイコンの他に、ArrowアイコンやUserアイコンなど複数のSVGがあると仮定して全てimportしてきます。またtypeというpropsを用意してアイコンの切り替えができるようにします。他にもアイコンをクリックしたらイベントが発火できるようにonClickも追加しておきます。（何故HTMLDivElementなのかは後でわかります。）\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">import\u003C/span> AlertIcon \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./Alert'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> ArrowIcon \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./ArrowIcon'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> UserIcon \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./UserIcon'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> IconType \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  AlertIcon\u003Cspan class=\"token punctuation\">,\u003C/span>\n  ArrowIcon\u003Cspan class=\"token punctuation\">,\u003C/span>\n  UserIcon\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">IconProps\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  size\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  type\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">keyof\u003C/span> \u003Cspan class=\"token keyword\">typeof\u003C/span> IconType\u003Cspan class=\"token punctuation\">;\u003C/span>\n  fill\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  onClick\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> React\u003Cspan class=\"token punctuation\">.\u003C/span>MouseEventHandler\u003Cspan class=\"token operator\">&#x3C;\u003C/span>HTMLDivElement\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"iconコンポーネントをラップする\">Iconコンポーネントをラップする\u003C/h3>\n\u003Cp>まず先程設定した\u003Ccode>IconType\u003C/code>を以下のようにコンポーネントとして使えるように設定します。この定数の部分がsvgタグになります。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">const\u003C/span> IconSvgFile \u003Cspan class=\"token operator\">=\u003C/span> IconType\u003Cspan class=\"token punctuation\">[\u003C/span>type\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>JSXとスタイル部分を書いていきます。先程のIconSvgFileをdiv要素などでラップします。スタイリングもしつつラップした部分にpropsを設定します。\n先に完成形を以下に貼ります。CSSは\u003Ccode>@emotion/styled\u003C/code>を使っています。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token constant\">VFC\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'react'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> styled \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'@emotion/styled'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> AlertIcon \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'./Alert'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> ArrowIcon \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'.ArrowIcon'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token keyword\">import\u003C/span> UserIcon \u003Cspan class=\"token keyword\">from\u003C/span> \u003Cspan class=\"token string\">'.UserIcon'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> IconType \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  AlertIcon\u003Cspan class=\"token punctuation\">,\u003C/span>\n  ArrowIcon\u003Cspan class=\"token punctuation\">,\u003C/span>\n  UserIcon\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">interface\u003C/span> \u003Cspan class=\"token class-name\">IconProps\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  size\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  type\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">keyof\u003C/span> \u003Cspan class=\"token keyword\">typeof\u003C/span> IconType\u003Cspan class=\"token punctuation\">;\u003C/span>\n  fill\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n  onClick\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> React\u003Cspan class=\"token punctuation\">.\u003C/span>MouseEventHandler\u003Cspan class=\"token operator\">&#x3C;\u003C/span>HTMLDivElement\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003Cspan class=\"token keyword\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> Icon\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">VFC\u003C/span>\u003Cspan class=\"token operator\">&#x3C;\u003C/span>IconProps\u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>props\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> size \u003Cspan class=\"token punctuation\">,\u003C/span> type\u003Cspan class=\"token punctuation\">,\u003C/span> onClick\u003Cspan class=\"token punctuation\">,\u003C/span> fill \u003Cspan class=\"token punctuation\">}\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> props\u003Cspan class=\"token punctuation\">;\u003C/span>\n  \u003Cspan class=\"token keyword\">const\u003C/span> IconSvgFile \u003Cspan class=\"token operator\">=\u003C/span> IconType\u003Cspan class=\"token punctuation\">[\u003C/span>type\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>IconWrapper size\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>size\u003Cspan class=\"token punctuation\">}\u003C/span> onClick\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>onClick\u003Cspan class=\"token punctuation\">}\u003C/span> fill\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>fill\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n      \u003Cspan class=\"token operator\">&#x3C;\u003C/span>IconSvgFile \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n    \u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>IconWrapper\u003Cspan class=\"token operator\">>\u003C/span>\n  \u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> IconWrapper \u003Cspan class=\"token operator\">=\u003C/span> styled\u003Cspan class=\"token punctuation\">.\u003C/span>div\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> size\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> fill\u003Cspan class=\"token operator\">?\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">\n  width: \u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> size \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> size\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token string\">px;\n  height: \u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> size \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> size\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token string\">px;\n  cursor: \u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> onClick \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>onClick \u003Cspan class=\"token operator\">?\u003C/span> \u003Cspan class=\"token string\">'pointer'\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'inherit'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token string\">;\n  fill: \u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span> fill \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>fill \u003Cspan class=\"token operator\">?\u003C/span> fill \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">''\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token string\">;\n\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>全てのpropsをdivに渡すことでSVGのサイズと色を制御しています。ちょっと荒業っぽいですがこれで使いやすい感じになりました。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>Icon type\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"FileIcon\"\u003C/span> size\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token number\">24\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span> fill\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"#f00\"\u003C/span> \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>後でボタンコンポーネントを作る際に今回作った\u003Ccode>type\u003C/code>をそのまま渡せばアイコンありなしボタンが簡単に作成できそうです。\u003C/p>\n\u003Ch3 id=\"まとめ\">まとめ\u003C/h3>\n\u003Cul>\n\u003Cli>SVGをdiv要素などでラップしたコンポーネントを作って全SVGアイコンをimportする\u003C/li>\n\u003Cli>複数コンポーネントをpropsで切り替えできるように設定する\u003C/li>\n\u003Cli>アイコン付きボタンコンポーネントを作る際も同じpropsを渡せば簡単に実装できる\u003C/li>\n\u003C/ul>\n\u003Cp>他にもいい方法があれば是非教えてください！！！！\u003C/p>",{"headings":1547,"localImagePaths":1564,"remoteImagePaths":1565,"frontmatter":1538,"imagePaths":1566},[1548,1551,1554,1557,1560,1563],{"depth":22,"slug":1549,"text":1550},"シンプルなsvgコンポーネント","シンプルなSVGコンポーネント",{"depth":29,"slug":1552,"text":1553},"シンプルなsvgコンポーネントの課題","シンプルなSVGコンポーネントの課題",{"depth":29,"slug":1555,"text":1556},"シンプルなsvgコンポーネントからpropsを削除","シンプルなSVGコンポーネントからPropsを削除",{"depth":29,"slug":1558,"text":1559},"icontsxを作成して全てのアイコンをimportしてtypeをもたせる","Icon.tsxを作成して全てのアイコンをimportしてtypeをもたせる",{"depth":29,"slug":1561,"text":1562},"iconコンポーネントをラップする","Iconコンポーネントをラップする",{"depth":29,"slug":76,"text":76},[],[],[],"2021/0827.md","2021/0720",{"id":1568,"data":1570,"body":1573,"filePath":1574,"digest":1575,"rendered":1576,"legacyId":1592},{"title":1571,"publishDate":1572},"ハッシュテーブルを学んだ","2021-07-20","ハッシュテーブルを学びました。\n\n### ハッシュテーブル\n\nkeyとvalueがペアで格納されているデータ構造です。keyを選ぶとペアとなっているvalueが取得できます。例として、引っ越しの荷造りを思い出してください。ダンボールがあったとして、その中に本棚にあった書籍を全部入れます。\n\n完結している漫画を同じ場所にいれておきたいので今回は、進撃の巨人をダンボールに詰めたいと思います。全34巻なので、すべて1つのダンボールに入れてガムテープで閉じます。そしてダンボールに「進撃の巨人」とマジックで書きます。***この時「進撃の巨人」はkeyになり、ダンボールの中に入っている34巻のそれぞれがvalueとなります。***後で引越し先で開封する際に「進撃の巨人」を知っていれば、34巻全てを取り出すことができますね。このようなデータ構造がハッシュテーブルです。\n\n### ハッシュ関数\n\nプログラムの場合は「進撃の巨人」というkeyを数字として取り扱わないといけません。この時「進撃の巨人」をハッシュ関数というものに放り込むと適当な数字になって返ってきます。返ってきた数字を使って「進撃の巨人」のダンボールに入っているvalueを探し出すことができます。出力した値はハッシュ値と呼びます。\n\n※ 補足すると適当な数字というのは、あるルールに従って（関数のロジック）ランダムな値を返すということです。\n\nハッシュ関数の特徴として\n- 入力するまで何が返ってくるかわからない\n- ただし同じ入力をすると同じ値が返ってくる\n- 出力値だけをみて入力値を求めることはできない\n\nという性質を持ちます。この特徴を暗号化（SHA−256とか）、データが正しいかどうかなどの用途で使われています。\n\n### 実装\n\n自分は、JavaScriptし書けませんが、まず前提としてJavaScriptでハッシュテーブルを実装することなんてほぼありません。既にObjectやMapがあるのでこれらで機能としては補えます。（ハッシュ値を読み取るなどはあったりしますが。。）\n\n実装したコードは[こちら](https://github.com/ryokatsuse/algorithm-sandbox/blob/main/hash-table/index.ts)です。\n\nハッシュ関数は入力した値が常に同じ出力を返す性質があるためそのように実装していきます。文字列をループ処理してcharCodeAtメソッドを使って、UTF-16の数値にしつつ*100をしています。最後にコンストラクタで設定したサイズで割ると実現できます。\n\n```ts\n /**\n   * ハッシュ関数\n   * @param {string} key\n   * @return {*} \n   * @memberof HashTable\n   */\n  hash(key: string) {\n    const codeAtNumber = 100\n    let id = 0\n    for (let i = 0; i \u003C key.length; i++) {\n      /** \n       * @see https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n       **/\n      id += key.charCodeAt(i) * codeAtNumber\n    }\n    return id % this.hashTableSize\n  }\n```\n### 衝突\n\nハッシュテーブルのサイズが小さい場合、違うキーを放り込んでも同一の値が返ってきてしまうことがあります。（上書きされる可能性がある）これを***衝突***と呼びます。解決策としてチェイン法などがあります。今回の実装では以前作成したLinkedListを使って衝突が起こった場合にLinkedListにデータをpushして衝突を避ける実装をしています。\n\n\n### やってみて\n\ncodeAtNumberメソッドはほぼ初見でしたので、仕組みを知れてよかったです。機会があれば最強のハッシュ関数でも作ってみたいものです。その時は今回あまり深く学んでいない衝突の解決策を勉強したいです。\n\n### 次回\n次回は木構造を学んでいきます。","src/content/blog/2021/0720.md","7ec41927f9cb308c",{"html":1577,"metadata":1578},"\u003Cp>ハッシュテーブルを学びました。\u003C/p>\n\u003Ch3 id=\"ハッシュテーブル\">ハッシュテーブル\u003C/h3>\n\u003Cp>keyとvalueがペアで格納されているデータ構造です。keyを選ぶとペアとなっているvalueが取得できます。例として、引っ越しの荷造りを思い出してください。ダンボールがあったとして、その中に本棚にあった書籍を全部入れます。\u003C/p>\n\u003Cp>完結している漫画を同じ場所にいれておきたいので今回は、進撃の巨人をダンボールに詰めたいと思います。全34巻なので、すべて1つのダンボールに入れてガムテープで閉じます。そしてダンボールに「進撃の巨人」とマジックで書きます。***この時「進撃の巨人」はkeyになり、ダンボールの中に入っている34巻のそれぞれがvalueとなります。***後で引越し先で開封する際に「進撃の巨人」を知っていれば、34巻全てを取り出すことができますね。このようなデータ構造がハッシュテーブルです。\u003C/p>\n\u003Ch3 id=\"ハッシュ関数\">ハッシュ関数\u003C/h3>\n\u003Cp>プログラムの場合は「進撃の巨人」というkeyを数字として取り扱わないといけません。この時「進撃の巨人」をハッシュ関数というものに放り込むと適当な数字になって返ってきます。返ってきた数字を使って「進撃の巨人」のダンボールに入っているvalueを探し出すことができます。出力した値はハッシュ値と呼びます。\u003C/p>\n\u003Cp>※ 補足すると適当な数字というのは、あるルールに従って（関数のロジック）ランダムな値を返すということです。\u003C/p>\n\u003Cp>ハッシュ関数の特徴として\u003C/p>\n\u003Cul>\n\u003Cli>入力するまで何が返ってくるかわからない\u003C/li>\n\u003Cli>ただし同じ入力をすると同じ値が返ってくる\u003C/li>\n\u003Cli>出力値だけをみて入力値を求めることはできない\u003C/li>\n\u003C/ul>\n\u003Cp>という性質を持ちます。この特徴を暗号化（SHA−256とか）、データが正しいかどうかなどの用途で使われています。\u003C/p>\n\u003Ch3 id=\"実装\">実装\u003C/h3>\n\u003Cp>自分は、JavaScriptし書けませんが、まず前提としてJavaScriptでハッシュテーブルを実装することなんてほぼありません。既にObjectやMapがあるのでこれらで機能としては補えます。（ハッシュ値を読み取るなどはあったりしますが。。）\u003C/p>\n\u003Cp>実装したコードは\u003Ca href=\"https://github.com/ryokatsuse/algorithm-sandbox/blob/main/hash-table/index.ts\">こちら\u003C/a>です。\u003C/p>\n\u003Cp>ハッシュ関数は入力した値が常に同じ出力を返す性質があるためそのように実装していきます。文字列をループ処理してcharCodeAtメソッドを使って、UTF-16の数値にしつつ*100をしています。最後にコンストラクタで設定したサイズで割ると実現できます。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\"> \u003Cspan class=\"token comment\">/**\n   * ハッシュ関数\n   * @param {string} key\n   * @return {*} \n   * @memberof HashTable\n   */\u003C/span>\n  \u003Cspan class=\"token function\">hash\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>key\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n    \u003Cspan class=\"token keyword\">const\u003C/span> codeAtNumber \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">100\u003C/span>\n    \u003Cspan class=\"token keyword\">let\u003C/span> id \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\n    \u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">let\u003C/span> i \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> i \u003Cspan class=\"token operator\">&#x3C;\u003C/span> key\u003Cspan class=\"token punctuation\">.\u003C/span>length\u003Cspan class=\"token punctuation\">;\u003C/span> i\u003Cspan class=\"token operator\">++\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      \u003Cspan class=\"token comment\">/** \n       * @see https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n       **/\u003C/span>\n      id \u003Cspan class=\"token operator\">+=\u003C/span> key\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">charCodeAt\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">*\u003C/span> codeAtNumber\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> id \u003Cspan class=\"token operator\">%\u003C/span> \u003Cspan class=\"token keyword\">this\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>hashTableSize\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"衝突\">衝突\u003C/h3>\n\u003Cp>ハッシュテーブルのサイズが小さい場合、違うキーを放り込んでも同一の値が返ってきてしまうことがあります。（上書きされる可能性がある）これを\u003Cem>\u003Cstrong>衝突\u003C/strong>\u003C/em>と呼びます。解決策としてチェイン法などがあります。今回の実装では以前作成したLinkedListを使って衝突が起こった場合にLinkedListにデータをpushして衝突を避ける実装をしています。\u003C/p>\n\u003Ch3 id=\"やってみて\">やってみて\u003C/h3>\n\u003Cp>codeAtNumberメソッドはほぼ初見でしたので、仕組みを知れてよかったです。機会があれば最強のハッシュ関数でも作ってみたいものです。その時は今回あまり深く学んでいない衝突の解決策を勉強したいです。\u003C/p>\n\u003Ch3 id=\"次回\">次回\u003C/h3>\n\u003Cp>次回は木構造を学んでいきます。\u003C/p>",{"headings":1579,"localImagePaths":1589,"remoteImagePaths":1590,"frontmatter":1570,"imagePaths":1591},[1580,1582,1584,1585,1587,1588],{"depth":29,"slug":1581,"text":1581},"ハッシュテーブル",{"depth":29,"slug":1583,"text":1583},"ハッシュ関数",{"depth":29,"slug":1505,"text":1505},{"depth":29,"slug":1586,"text":1586},"衝突",{"depth":29,"slug":1461,"text":1461},{"depth":29,"slug":1463,"text":1463},[],[],[],"2021/0720.md","2021/1202",{"id":1593,"data":1595,"body":1598,"filePath":1599,"digest":1600,"rendered":1601,"legacyId":1645},{"title":1596,"publishDate":1597},"2021年買ってよかったもの","2021-12-02","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の2日目の記事です。\n\n今年買って良かったものを紹介していきます。\n\n### スタンディングデスク\n\n[タンスのゲン スタンディングデスク](https://www.amazon.co.jp/gp/product/B07DNSHBCV/)\n\n引っ越しして、作業スペースが広く確保できたしスタンディングデスクを試してみたかったのでお試しで購入。幅が狭くて小スペースだけど、高さが丁度良く、MTGやちょっと座り疲れたなと思ったら基本このスタンディングデスクで作業していました。（現在は後述するFLEXISPOTを購入してこのスタンディングデスクは使わなくなりました。）\n\n\n### ブックスタンド\n\n[Readaeer ブックスタンド](https://www.amazon.co.jp/gp/product/B076VB1YKV/)\n\n基本的には、電子書籍で読むことが多いが、たまに電子書籍がない本とかでメモを取りながら本を読みたいと思い購入したものです。他にもいいブックスタンドがありそうですが、特にこのブックスタンドで不満がなく使えています。\n\n\n### デスクライト\n\n[YOLIC デスクライト](https://www.amazon.co.jp/gp/product/B08QMCX1QP/)\n\n部屋の蛍光灯で夜灯だけだと暗すぎるし、夜灯じゃない明かりで一番暗くしても明るすぎるので丁度いい明るさにしたくて購入しました。こいつのいい所はモニターアームのようにデスクにマウントできるので、机の幅が取られないのが良いです。しかも割と色々な角度に動かすことができるのでこれでリモート会議用のライトとしても使えます。\n\n\n\n### HHKB Professional HYBRID Type-S\n\n[HHKB Professional HYBRID Type-S 英語配列／白](https://www.amazon.co.jp/gp/product/B082TQK2SB/)\n\nずっと5,000円ぐらいの安いHHKBを使用していました。何の問題もなく使っていたのですが、打鍵音がうるさいのとたまにEnterキーが認識しなくってきたので、思い切って購入しました。文句なしで最高の買い物でした。最初Fnキーを押しながら打鍵するのが慣れなくて失敗したかな？と思いましたが、もう慣れました。むしろ通常のmacのキーボード配列打つの遅くなりました。\n\n\n### 無線ルーター\n\n[TP-Link WiFi ルーター AX5400](https://www.amazon.co.jp/gp/product/B08RDHHS6Z)\n\n[TP-Link WiFi ルーター  RE505X/A](https://www.amazon.co.jp/gp/product/B084T7FQ9J/)\n\n以前は、IODATAの安い無線ルーターと中継機を使っていましたが、作業部屋の速度が、常に40Mbpsぐらいでかなり貧弱だったので、メッシュが組めるWifiを購入しました。速度は親機の近くだと250Mbps、作業部屋だと150Mbpsぐらいに変わって、ルーダー買えただけでこんなに変わるのか！とちょっと驚きました。ただ1点だけミスったことがあって、IPv6パススルーができないっぽくVPNに繋げない状態になってしまいました。VPN繋ぎたいときは、今まで使っていた貧弱Wifiルーターに繋いでいます。。\n\n\n### ロジクール ワイヤレスマウス MX ERGO MXTB1s\n\n[ロジクール ワイヤレスマウス トラックボール](https://www.amazon.co.jp/gp/product/B074Z71C2M/)\n\nずっとM570tのヘビーユーザーだったのですが、ある日壊れてから使わなくなり家にあった旧トラックパッドを2年ぐらい使用していました。そのままトラックパッドでも良かったんですが、たまに手首が痛くなるのでトラックボール久しぶりに戻るかという気持ちになり購入しました。\n\nやっぱりトラックボールは最高でした。このMXTB1sは、傾斜角を調整できるので手首の負担を減らすことができてとても良いです。操作自体はほぼ問題ないですが、Figmaを操作するときだけトラックパッドの方が、圧倒的に操作しやすいので切り替えて使っています。\n\n### Fitbit Versa3\n\n[Fitbit Versa3](https://www.amazon.co.jp/gp/product/B08FS9QFMJ/)\n\nずっとXiaomiのmi band4を使っていたのですが、何となくスリープトラッキングのデータが信用できなくてFitbit欲しいな〜と思っていたときに会社で[めちゃくちゃいい制度](https://notion.yumemi.co.jp/oss/max)が出来たので乗っかる形で購入しました。割と良くてスリープトラッキングもかなり細かく取れているっぽいので信用度が上がりました。後Apple Watchとクリソツなのでよく間違えられる。。\n\n\n### ワイヤレス充電器\n\n[Anker PowerWave Sense 2-in-1](https://www.amazon.co.jp/gp/product/B097XNKFV8/)\n\n後述するAirPods（第3世代）の購入と同時に購入。単純にスマホとイヤホンの充電がケーブル繋がないでできるようになり楽になりました。割と充電速度も速い方なのかなと思っています。\n\n\n### iPad\n\n[iPad Air（第4世代）](https://www.apple.com/jp/ipad-air/)\n\n今年発売されたiPad miniでも良かったんですが、技術書読むのに画面が大きい方が良いなと思い購入。今まで本読むときに、Kindle PaperwhiteかPCで読んでいたのですが、iPadにしたことで気軽に読書できるようになり読書の量が増えました。デカイので持ちにくい問題がありますが基本家にいるのでそんなにデメリットには感じません。\n\n### AirPods（第3世代）\n\n[AirPods](https://www.apple.com/jp/airpods-3rd-generation/)\n\n発表されたと同時に購入しました。特に買う必要がなかったのですが、どうしても空間オーディオを試してみたかったので購入。Apple製品にシームレスに繋がってくれるのが良いです。空間オーディオもiPad、AppleTV 4Kで体験しましたが、最初音漏れしてないか心配になるぐらいテレビから音が出るような体験でかなり良かったです。\n\n\n### AppleTV 4K\n\n[AppleTV 4K](https://www.apple.com/jp/apple-tv-4k/)\n\n空間オーディオを最初iPadで試していたのですが、体験が良かったので買うしかない！という理由で購入。こいつを買ったことで、今までスマホやiPadからSpotifyを流していましたが、常にAppleTVを起動しておいて、AppleTVから音楽を垂れ流すようになりました。当然のことながらAirPodsとの接続が一瞬です。この流れでHomePod miniを買ってしまいそう。。\n\n### FLEXISPOT E7\n\n[FLEXISPOT E7](https://flexispot.jp/e7-set.html)\n\n最初に紹介したスタンディングデスクのデメリットとして、通常の座り机とスタンディングデスクを別々にすると行き来しないといけないので、ケーブルを繋ぎ直したりするのが面倒になってきました。もう十分スタンディングにも慣れたしもう少しデスクの幅が欲しいこともあって天板と一緒に購入。最初から昇降デスクを買えば良かったと思うぐらいいい買い物でした。（天板は広ければ広いだけいい。）\n\n### Echo Show 5\n\nデスクの時計として購入しました、後は、リマインダーとして活用してます。\n\n\n### GTRacing ゲーミング座椅子\n\n今まではキャンプ椅子に座って映画みたり、ゲームしたりしていましたが、ローボードを設置してそこにモニターを置いたことで目線の位置が変わり、座椅子を探していたらゲーミング座椅子があったので決めました。一生座れる。。\n\n来年も散財していこうと思います。","src/content/blog/2021/1202.md","58881a31b33a083b",{"html":1602,"metadata":1603},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の2日目の記事です。\u003C/p>\n\u003Cp>今年買って良かったものを紹介していきます。\u003C/p>\n\u003Ch3 id=\"スタンディングデスク\">スタンディングデスク\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B07DNSHBCV/\">タンスのゲン スタンディングデスク\u003C/a>\u003C/p>\n\u003Cp>引っ越しして、作業スペースが広く確保できたしスタンディングデスクを試してみたかったのでお試しで購入。幅が狭くて小スペースだけど、高さが丁度良く、MTGやちょっと座り疲れたなと思ったら基本このスタンディングデスクで作業していました。（現在は後述するFLEXISPOTを購入してこのスタンディングデスクは使わなくなりました。）\u003C/p>\n\u003Ch3 id=\"ブックスタンド\">ブックスタンド\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B076VB1YKV/\">Readaeer ブックスタンド\u003C/a>\u003C/p>\n\u003Cp>基本的には、電子書籍で読むことが多いが、たまに電子書籍がない本とかでメモを取りながら本を読みたいと思い購入したものです。他にもいいブックスタンドがありそうですが、特にこのブックスタンドで不満がなく使えています。\u003C/p>\n\u003Ch3 id=\"デスクライト\">デスクライト\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B08QMCX1QP/\">YOLIC デスクライト\u003C/a>\u003C/p>\n\u003Cp>部屋の蛍光灯で夜灯だけだと暗すぎるし、夜灯じゃない明かりで一番暗くしても明るすぎるので丁度いい明るさにしたくて購入しました。こいつのいい所はモニターアームのようにデスクにマウントできるので、机の幅が取られないのが良いです。しかも割と色々な角度に動かすことができるのでこれでリモート会議用のライトとしても使えます。\u003C/p>\n\u003Ch3 id=\"hhkb-professional-hybrid-type-s\">HHKB Professional HYBRID Type-S\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B082TQK2SB/\">HHKB Professional HYBRID Type-S 英語配列／白\u003C/a>\u003C/p>\n\u003Cp>ずっと5,000円ぐらいの安いHHKBを使用していました。何の問題もなく使っていたのですが、打鍵音がうるさいのとたまにEnterキーが認識しなくってきたので、思い切って購入しました。文句なしで最高の買い物でした。最初Fnキーを押しながら打鍵するのが慣れなくて失敗したかな？と思いましたが、もう慣れました。むしろ通常のmacのキーボード配列打つの遅くなりました。\u003C/p>\n\u003Ch3 id=\"無線ルーター\">無線ルーター\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B08RDHHS6Z\">TP-Link WiFi ルーター AX5400\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B084T7FQ9J/\">TP-Link WiFi ルーター  RE505X/A\u003C/a>\u003C/p>\n\u003Cp>以前は、IODATAの安い無線ルーターと中継機を使っていましたが、作業部屋の速度が、常に40Mbpsぐらいでかなり貧弱だったので、メッシュが組めるWifiを購入しました。速度は親機の近くだと250Mbps、作業部屋だと150Mbpsぐらいに変わって、ルーダー買えただけでこんなに変わるのか！とちょっと驚きました。ただ1点だけミスったことがあって、IPv6パススルーができないっぽくVPNに繋げない状態になってしまいました。VPN繋ぎたいときは、今まで使っていた貧弱Wifiルーターに繋いでいます。。\u003C/p>\n\u003Ch3 id=\"ロジクール-ワイヤレスマウス-mx-ergo-mxtb1s\">ロジクール ワイヤレスマウス MX ERGO MXTB1s\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B074Z71C2M/\">ロジクール ワイヤレスマウス トラックボール\u003C/a>\u003C/p>\n\u003Cp>ずっとM570tのヘビーユーザーだったのですが、ある日壊れてから使わなくなり家にあった旧トラックパッドを2年ぐらい使用していました。そのままトラックパッドでも良かったんですが、たまに手首が痛くなるのでトラックボール久しぶりに戻るかという気持ちになり購入しました。\u003C/p>\n\u003Cp>やっぱりトラックボールは最高でした。このMXTB1sは、傾斜角を調整できるので手首の負担を減らすことができてとても良いです。操作自体はほぼ問題ないですが、Figmaを操作するときだけトラックパッドの方が、圧倒的に操作しやすいので切り替えて使っています。\u003C/p>\n\u003Ch3 id=\"fitbit-versa3\">Fitbit Versa3\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B08FS9QFMJ/\">Fitbit Versa3\u003C/a>\u003C/p>\n\u003Cp>ずっとXiaomiのmi band4を使っていたのですが、何となくスリープトラッキングのデータが信用できなくてFitbit欲しいな〜と思っていたときに会社で\u003Ca href=\"https://notion.yumemi.co.jp/oss/max\">めちゃくちゃいい制度\u003C/a>が出来たので乗っかる形で購入しました。割と良くてスリープトラッキングもかなり細かく取れているっぽいので信用度が上がりました。後Apple Watchとクリソツなのでよく間違えられる。。\u003C/p>\n\u003Ch3 id=\"ワイヤレス充電器\">ワイヤレス充電器\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/gp/product/B097XNKFV8/\">Anker PowerWave Sense 2-in-1\u003C/a>\u003C/p>\n\u003Cp>後述するAirPods（第3世代）の購入と同時に購入。単純にスマホとイヤホンの充電がケーブル繋がないでできるようになり楽になりました。割と充電速度も速い方なのかなと思っています。\u003C/p>\n\u003Ch3 id=\"ipad\">iPad\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.apple.com/jp/ipad-air/\">iPad Air（第4世代）\u003C/a>\u003C/p>\n\u003Cp>今年発売されたiPad miniでも良かったんですが、技術書読むのに画面が大きい方が良いなと思い購入。今まで本読むときに、Kindle PaperwhiteかPCで読んでいたのですが、iPadにしたことで気軽に読書できるようになり読書の量が増えました。デカイので持ちにくい問題がありますが基本家にいるのでそんなにデメリットには感じません。\u003C/p>\n\u003Ch3 id=\"airpods第3世代\">AirPods（第3世代）\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.apple.com/jp/airpods-3rd-generation/\">AirPods\u003C/a>\u003C/p>\n\u003Cp>発表されたと同時に購入しました。特に買う必要がなかったのですが、どうしても空間オーディオを試してみたかったので購入。Apple製品にシームレスに繋がってくれるのが良いです。空間オーディオもiPad、AppleTV 4Kで体験しましたが、最初音漏れしてないか心配になるぐらいテレビから音が出るような体験でかなり良かったです。\u003C/p>\n\u003Ch3 id=\"appletv-4k\">AppleTV 4K\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.apple.com/jp/apple-tv-4k/\">AppleTV 4K\u003C/a>\u003C/p>\n\u003Cp>空間オーディオを最初iPadで試していたのですが、体験が良かったので買うしかない！という理由で購入。こいつを買ったことで、今までスマホやiPadからSpotifyを流していましたが、常にAppleTVを起動しておいて、AppleTVから音楽を垂れ流すようになりました。当然のことながらAirPodsとの接続が一瞬です。この流れでHomePod miniを買ってしまいそう。。\u003C/p>\n\u003Ch3 id=\"flexispot-e7\">FLEXISPOT E7\u003C/h3>\n\u003Cp>\u003Ca href=\"https://flexispot.jp/e7-set.html\">FLEXISPOT E7\u003C/a>\u003C/p>\n\u003Cp>最初に紹介したスタンディングデスクのデメリットとして、通常の座り机とスタンディングデスクを別々にすると行き来しないといけないので、ケーブルを繋ぎ直したりするのが面倒になってきました。もう十分スタンディングにも慣れたしもう少しデスクの幅が欲しいこともあって天板と一緒に購入。最初から昇降デスクを買えば良かったと思うぐらいいい買い物でした。（天板は広ければ広いだけいい。）\u003C/p>\n\u003Ch3 id=\"echo-show-5\">Echo Show 5\u003C/h3>\n\u003Cp>デスクの時計として購入しました、後は、リマインダーとして活用してます。\u003C/p>\n\u003Ch3 id=\"gtracing-ゲーミング座椅子\">GTRacing ゲーミング座椅子\u003C/h3>\n\u003Cp>今まではキャンプ椅子に座って映画みたり、ゲームしたりしていましたが、ローボードを設置してそこにモニターを置いたことで目線の位置が変わり、座椅子を探していたらゲーミング座椅子があったので決めました。一生座れる。。\u003C/p>\n\u003Cp>来年も散財していこうと思います。\u003C/p>",{"headings":1604,"localImagePaths":1642,"remoteImagePaths":1643,"frontmatter":1595,"imagePaths":1644},[1605,1607,1609,1611,1614,1616,1619,1622,1624,1627,1630,1633,1636,1639],{"depth":29,"slug":1606,"text":1606},"スタンディングデスク",{"depth":29,"slug":1608,"text":1608},"ブックスタンド",{"depth":29,"slug":1610,"text":1610},"デスクライト",{"depth":29,"slug":1612,"text":1613},"hhkb-professional-hybrid-type-s","HHKB Professional HYBRID Type-S",{"depth":29,"slug":1615,"text":1615},"無線ルーター",{"depth":29,"slug":1617,"text":1618},"ロジクール-ワイヤレスマウス-mx-ergo-mxtb1s","ロジクール ワイヤレスマウス MX ERGO MXTB1s",{"depth":29,"slug":1620,"text":1621},"fitbit-versa3","Fitbit Versa3",{"depth":29,"slug":1623,"text":1623},"ワイヤレス充電器",{"depth":29,"slug":1625,"text":1626},"ipad","iPad",{"depth":29,"slug":1628,"text":1629},"airpods第3世代","AirPods（第3世代）",{"depth":29,"slug":1631,"text":1632},"appletv-4k","AppleTV 4K",{"depth":29,"slug":1634,"text":1635},"flexispot-e7","FLEXISPOT E7",{"depth":29,"slug":1637,"text":1638},"echo-show-5","Echo Show 5",{"depth":29,"slug":1640,"text":1641},"gtracing-ゲーミング座椅子","GTRacing ゲーミング座椅子",[],[],[],"2021/1202.md","2021/1203",{"id":1646,"data":1648,"body":1651,"filePath":1652,"digest":1653,"rendered":1654,"legacyId":1674},{"title":1649,"publishDate":1650},"放送大学に出願した話","2021-12-03","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の3日目の記事です。\n\nタイトル通りで2022年4月入学の放送大学の情報コースに出願しました。\n\n### きっかけ\n\n自分は、33歳の文系でフロントエンドエンジニアをしていますが、CSの学習を全くしていないし、大学もいわゆるFランの大学でほとんど真面目に勉強しないまま卒業したので、いざ周りに情報学部や、頭のいい大学を卒業した人がいると劣等感に悩まされることがありました。現実問題として、独学には限界があるので、しっかり大学で勉強してきている人とかがいるとその時点で自分はスキル的に負けるし考え方の視野も狭いのではと感じることが多いです。\n\nずっとぼんやりと学びたいなと思っていましたが、思い切って勉強しようと決めて出願することしました。\n\n## 何故放送大学なのか\n\nどの大学に入ろうか選定するときに最初に検討したのは、UoPeopleでした。以下えんぴつさんのブログが非常に参考になります。\n\n\n[Computer Scienceの学位が取れる米国のオンライン大学University of the Peopleに入ってみた感想](https://empitsu88.hatenablog.com/entry/2020/03/23/201900)\n\n無料という点に惹かれましたが、英語が絶望的にできないので断念しました。（英語の勉強については、違うアドベントカレンダーで記事書きます。）\n\nそもそも自分には条件がありました。\n\n- オンラインで授業可能\n- いつでも授業を受けられる\n- 学費がそこまで高くない\n- 学位とかは取れればいいかなレベルで自分に取って学びになれば良い\n\nこれが満たせるのは放送大学でした。\n\n\n## 放送大学エキスパート\n放送大学の特徴として\n\n- 情報コースがある\n- しかし情報学部の学位は取得することができない（教養学部の1コースという扱い）\n- オンラインだけどテレビの授業がある\n\nというのがあります。また、放送大学には[放送大学エキスパート](https://www.ouj.ac.jp/hp/gakubu/expert/)というのが存在します。これは何かというとプチ学位的なもので、2007年度の学校教育法改正によって誕生した履修証明制度というもので社会人などを対象にした別の履修証明というのが取得できるコースになっています。この放送大学エキスパートの中に***計算機科学基礎プラン***というのがあり、授業の内容もCSの授業になるのでこれだ！と思いました。\n\n実際には、20単位を取得すればOKでWEBで出願する際に科目選択する過程で、計算機科学基礎プランコースの授業を検索できます。\n\n## どの科目を取ったか\n\n授業のタイトルだけ記載すると以下を選びました。\n\n- 身近なネットワークサービス（’２０）\n- データ構造とプログラミング（’１８）\n- 自然言語処理（’１９）\n- データベース（’１７）\n- アルゴリズムとプログラミング（’２０）\n- コンピュータの動作と管理（’１７）\n- 情報学へのとびら（’２２）\n- 記号論理学（’１４）\n- コンピュータとソフトウェア（’１８）\n- Ｗｅｂのしくみと応用（’１９）\n- Ｃ言語基礎演習（’２０）\n- デジタル情報の処理と認識（’２２）\n- 情報ネットワークセキュリティ（’１９）\n\n\n## 出願までの流れ\n\nまず資料請求することをおすすめします。送られてるくる資料に授業の一覧や出願までの流れが入っています。WEBでも見れますがどんな授業があるか見るのは送られてくる紙の資料のほうが見やすいです。\n\n次に出願ですが、WEB出願だと割とすぐに完了します。最後の出願する前の確認ページで、合計の[授業料](https://www.ouj.ac.jp/hp/nyugaku/gakubu/tuition.html)が表示されます。（自分は約15万円でした）\n\nWEB出願が終わったら高校 or 大学の卒業証明書が別途必要になります。（郵送で放送大学に送る。送らないと入学できない）自分が該当する資料は、高校証明書だったので母校に卒業証明書を発行して貰うため郵送で問い合わせしました。証明書を発行してもらう申請書に当時の担任の先生の名前を記載する欄があり何か高校生活を思い出したりしました。。\n\n※後で気づいたのですが、卒業証書とかでも証明になるようでした。\n\n### 実際やっていけるの？\n\nこれは正直分かりません。一応今の会社はサバティカル休暇制度は存在するので最悪それを使うのも手かなと思いますが、子供もいるので中々厳しい部分も出てくると思います。\n\n1年ぐらい休職 or 退職して勉強に費やすことも考えたのですが、家族のために仕事やめることもできず（そもそも退職したいと思わない）なので普通に仕事をしながら夜に授業を受ける感じになりそうです。\n\n放送大学にはサテライトスペースというのがあり、学生であれば自由に入れるキャンバスみたいなのがあります。このサテライトセンターが自分の住んでいる場所から、自転車で10分掛からない場所にあるので、気分転換にキャンバスで勉強することができそうなのは良い点です。\n\nまた入学してある程度経ったらブログ書こうかなと思います。","src/content/blog/2021/1203.md","f39fd89f122be9c3",{"html":1655,"metadata":1656},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の3日目の記事です。\u003C/p>\n\u003Cp>タイトル通りで2022年4月入学の放送大学の情報コースに出願しました。\u003C/p>\n\u003Ch3 id=\"きっかけ\">きっかけ\u003C/h3>\n\u003Cp>自分は、33歳の文系でフロントエンドエンジニアをしていますが、CSの学習を全くしていないし、大学もいわゆるFランの大学でほとんど真面目に勉強しないまま卒業したので、いざ周りに情報学部や、頭のいい大学を卒業した人がいると劣等感に悩まされることがありました。現実問題として、独学には限界があるので、しっかり大学で勉強してきている人とかがいるとその時点で自分はスキル的に負けるし考え方の視野も狭いのではと感じることが多いです。\u003C/p>\n\u003Cp>ずっとぼんやりと学びたいなと思っていましたが、思い切って勉強しようと決めて出願することしました。\u003C/p>\n\u003Ch2 id=\"何故放送大学なのか\">何故放送大学なのか\u003C/h2>\n\u003Cp>どの大学に入ろうか選定するときに最初に検討したのは、UoPeopleでした。以下えんぴつさんのブログが非常に参考になります。\u003C/p>\n\u003Cp>\u003Ca href=\"https://empitsu88.hatenablog.com/entry/2020/03/23/201900\">Computer Scienceの学位が取れる米国のオンライン大学University of the Peopleに入ってみた感想\u003C/a>\u003C/p>\n\u003Cp>無料という点に惹かれましたが、英語が絶望的にできないので断念しました。（英語の勉強については、違うアドベントカレンダーで記事書きます。）\u003C/p>\n\u003Cp>そもそも自分には条件がありました。\u003C/p>\n\u003Cul>\n\u003Cli>オンラインで授業可能\u003C/li>\n\u003Cli>いつでも授業を受けられる\u003C/li>\n\u003Cli>学費がそこまで高くない\u003C/li>\n\u003Cli>学位とかは取れればいいかなレベルで自分に取って学びになれば良い\u003C/li>\n\u003C/ul>\n\u003Cp>これが満たせるのは放送大学でした。\u003C/p>\n\u003Ch2 id=\"放送大学エキスパート\">放送大学エキスパート\u003C/h2>\n\u003Cp>放送大学の特徴として\u003C/p>\n\u003Cul>\n\u003Cli>情報コースがある\u003C/li>\n\u003Cli>しかし情報学部の学位は取得することができない（教養学部の1コースという扱い）\u003C/li>\n\u003Cli>オンラインだけどテレビの授業がある\u003C/li>\n\u003C/ul>\n\u003Cp>というのがあります。また、放送大学には\u003Ca href=\"https://www.ouj.ac.jp/hp/gakubu/expert/\">放送大学エキスパート\u003C/a>というのが存在します。これは何かというとプチ学位的なもので、2007年度の学校教育法改正によって誕生した履修証明制度というもので社会人などを対象にした別の履修証明というのが取得できるコースになっています。この放送大学エキスパートの中に\u003Cem>\u003Cstrong>計算機科学基礎プラン\u003C/strong>\u003C/em>というのがあり、授業の内容もCSの授業になるのでこれだ！と思いました。\u003C/p>\n\u003Cp>実際には、20単位を取得すればOKでWEBで出願する際に科目選択する過程で、計算機科学基礎プランコースの授業を検索できます。\u003C/p>\n\u003Ch2 id=\"どの科目を取ったか\">どの科目を取ったか\u003C/h2>\n\u003Cp>授業のタイトルだけ記載すると以下を選びました。\u003C/p>\n\u003Cul>\n\u003Cli>身近なネットワークサービス（’２０）\u003C/li>\n\u003Cli>データ構造とプログラミング（’１８）\u003C/li>\n\u003Cli>自然言語処理（’１９）\u003C/li>\n\u003Cli>データベース（’１７）\u003C/li>\n\u003Cli>アルゴリズムとプログラミング（’２０）\u003C/li>\n\u003Cli>コンピュータの動作と管理（’１７）\u003C/li>\n\u003Cli>情報学へのとびら（’２２）\u003C/li>\n\u003Cli>記号論理学（’１４）\u003C/li>\n\u003Cli>コンピュータとソフトウェア（’１８）\u003C/li>\n\u003Cli>Ｗｅｂのしくみと応用（’１９）\u003C/li>\n\u003Cli>Ｃ言語基礎演習（’２０）\u003C/li>\n\u003Cli>デジタル情報の処理と認識（’２２）\u003C/li>\n\u003Cli>情報ネットワークセキュリティ（’１９）\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"出願までの流れ\">出願までの流れ\u003C/h2>\n\u003Cp>まず資料請求することをおすすめします。送られてるくる資料に授業の一覧や出願までの流れが入っています。WEBでも見れますがどんな授業があるか見るのは送られてくる紙の資料のほうが見やすいです。\u003C/p>\n\u003Cp>次に出願ですが、WEB出願だと割とすぐに完了します。最後の出願する前の確認ページで、合計の\u003Ca href=\"https://www.ouj.ac.jp/hp/nyugaku/gakubu/tuition.html\">授業料\u003C/a>が表示されます。（自分は約15万円でした）\u003C/p>\n\u003Cp>WEB出願が終わったら高校 or 大学の卒業証明書が別途必要になります。（郵送で放送大学に送る。送らないと入学できない）自分が該当する資料は、高校証明書だったので母校に卒業証明書を発行して貰うため郵送で問い合わせしました。証明書を発行してもらう申請書に当時の担任の先生の名前を記載する欄があり何か高校生活を思い出したりしました。。\u003C/p>\n\u003Cp>※後で気づいたのですが、卒業証書とかでも証明になるようでした。\u003C/p>\n\u003Ch3 id=\"実際やっていけるの\">実際やっていけるの？\u003C/h3>\n\u003Cp>これは正直分かりません。一応今の会社はサバティカル休暇制度は存在するので最悪それを使うのも手かなと思いますが、子供もいるので中々厳しい部分も出てくると思います。\u003C/p>\n\u003Cp>1年ぐらい休職 or 退職して勉強に費やすことも考えたのですが、家族のために仕事やめることもできず（そもそも退職したいと思わない）なので普通に仕事をしながら夜に授業を受ける感じになりそうです。\u003C/p>\n\u003Cp>放送大学にはサテライトスペースというのがあり、学生であれば自由に入れるキャンバスみたいなのがあります。このサテライトセンターが自分の住んでいる場所から、自転車で10分掛からない場所にあるので、気分転換にキャンバスで勉強することができそうなのは良い点です。\u003C/p>\n\u003Cp>また入学してある程度経ったらブログ書こうかなと思います。\u003C/p>",{"headings":1657,"localImagePaths":1671,"remoteImagePaths":1672,"frontmatter":1648,"imagePaths":1673},[1658,1660,1662,1664,1666,1668],{"depth":29,"slug":1659,"text":1659},"きっかけ",{"depth":22,"slug":1661,"text":1661},"何故放送大学なのか",{"depth":22,"slug":1663,"text":1663},"放送大学エキスパート",{"depth":22,"slug":1665,"text":1665},"どの科目を取ったか",{"depth":22,"slug":1667,"text":1667},"出願までの流れ",{"depth":29,"slug":1669,"text":1670},"実際やっていけるの","実際やっていけるの？",[],[],[],"2021/1203.md","2021/0926",{"id":1675,"data":1677,"body":1680,"filePath":1681,"digest":1682,"rendered":1683,"legacyId":1696},{"title":1678,"publishDate":1679},"コンテナ物語を読んだ","2021-09-26","[コンテナ物語　世界を変えたのは「箱」の発明だった　増補改訂版](https://www.amazon.co.jp/dp/B07Z4DNFG7/ref=cm_sw_r_tw_dp_QDCCXFPN3ZX2TKVB8BSK)\n\n### 何故読んだか\n息子が、電車好きで貨物列車の種類などを調べていて、そもそも貨物ってどんなルートで運ぶのだろうか？という疑問がガントリークレーンやコンテナについても調べている中でこの本の存在を知った。帯にビル・ゲイツ推薦と書いてあるし面白そうだったので読んでみた。\n\n\n### 箱が世界の経済を変える(あらすじ）\n\n副題にもある「世界を変えたのは「箱」の発明だった」の通りでただの箱が、物流業界を大きく変えてしまった様子を歴史を辿って読んでいくもの。\n\nトラック輸送業者だったマルコム・マクリーンという一人の男が「海に船を出して運送すれば、陸路の渋滞は解消される」と思い行動して実行して最終的には、コンテナを運送会社の経営者までになる。マクリーンは「トラック運転手ではなくもっと経営のこと考える仕事をする方が良い」と自分のキャリアプランをしっかり考えることができる人物だ。海路で運送する場合、当時は輸送費、人件費がエライ高いことが問題だった。この問題を解決したのはコンテナだった。\n\n### 感想\n\nWEBの業界で働いていると、WEBって凄いイノベーションだなとか世界を変えたものだと思っていたけど、WEBができるよりも前にこんな凄いイノベーションがあったんだ！と感動した。\n\nただの箱（コンテナ）が海運業のみならず、世界の流通までも変えてしまう過程を歴史的に知れたのは面白かった。コンテナが世界の物流を変えるまでには導入するまでには規格化、組合とのバトル（コンテナが導入されることで職が失われる）など様々な問題があった。最終的には導入されて今では当たり前のようにコンテナが使われている。コンテナが導入されたことで輸送費、人件費の削減が行われ、港には自動でコンテナを運ぶクレーンが導入された。AIによるクレーンも導入されてきており、更に人件費が削減できるいうことらしく、エンジニア職がNo-Codeの発達によってエンジニア自身が、手を動かすことがなくなってくるのではという説と近いなと感じた。\n\n最終的にマクレーンも破産してしまうのだが、優れた経営者も読み間違いをしてしまうんだなと思った。後で色々レビューとか見返すと「ビジネスを成功させるための良書」みたいな言葉があったが破産しているので成功法を学べる本ではないかなと思った。\n\nモノやヒトの歴史を辿ることで、様々な苦悩やアイデアがあって今ここまで来たんだなということを改めて思い返すことができるとてもいい本。","src/content/blog/2021/0926.md","8179a15ca052e293",{"html":1684,"metadata":1685},"\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/dp/B07Z4DNFG7/ref=cm_sw_r_tw_dp_QDCCXFPN3ZX2TKVB8BSK\">コンテナ物語　世界を変えたのは「箱」の発明だった　増補改訂版\u003C/a>\u003C/p>\n\u003Ch3 id=\"何故読んだか\">何故読んだか\u003C/h3>\n\u003Cp>息子が、電車好きで貨物列車の種類などを調べていて、そもそも貨物ってどんなルートで運ぶのだろうか？という疑問がガントリークレーンやコンテナについても調べている中でこの本の存在を知った。帯にビル・ゲイツ推薦と書いてあるし面白そうだったので読んでみた。\u003C/p>\n\u003Ch3 id=\"箱が世界の経済を変えるあらすじ\">箱が世界の経済を変える(あらすじ）\u003C/h3>\n\u003Cp>副題にもある「世界を変えたのは「箱」の発明だった」の通りでただの箱が、物流業界を大きく変えてしまった様子を歴史を辿って読んでいくもの。\u003C/p>\n\u003Cp>トラック輸送業者だったマルコム・マクリーンという一人の男が「海に船を出して運送すれば、陸路の渋滞は解消される」と思い行動して実行して最終的には、コンテナを運送会社の経営者までになる。マクリーンは「トラック運転手ではなくもっと経営のこと考える仕事をする方が良い」と自分のキャリアプランをしっかり考えることができる人物だ。海路で運送する場合、当時は輸送費、人件費がエライ高いことが問題だった。この問題を解決したのはコンテナだった。\u003C/p>\n\u003Ch3 id=\"感想\">感想\u003C/h3>\n\u003Cp>WEBの業界で働いていると、WEBって凄いイノベーションだなとか世界を変えたものだと思っていたけど、WEBができるよりも前にこんな凄いイノベーションがあったんだ！と感動した。\u003C/p>\n\u003Cp>ただの箱（コンテナ）が海運業のみならず、世界の流通までも変えてしまう過程を歴史的に知れたのは面白かった。コンテナが世界の物流を変えるまでには導入するまでには規格化、組合とのバトル（コンテナが導入されることで職が失われる）など様々な問題があった。最終的には導入されて今では当たり前のようにコンテナが使われている。コンテナが導入されたことで輸送費、人件費の削減が行われ、港には自動でコンテナを運ぶクレーンが導入された。AIによるクレーンも導入されてきており、更に人件費が削減できるいうことらしく、エンジニア職がNo-Codeの発達によってエンジニア自身が、手を動かすことがなくなってくるのではという説と近いなと感じた。\u003C/p>\n\u003Cp>最終的にマクレーンも破産してしまうのだが、優れた経営者も読み間違いをしてしまうんだなと思った。後で色々レビューとか見返すと「ビジネスを成功させるための良書」みたいな言葉があったが破産しているので成功法を学べる本ではないかなと思った。\u003C/p>\n\u003Cp>モノやヒトの歴史を辿ることで、様々な苦悩やアイデアがあって今ここまで来たんだなということを改めて思い返すことができるとてもいい本。\u003C/p>",{"headings":1686,"localImagePaths":1693,"remoteImagePaths":1694,"frontmatter":1677,"imagePaths":1695},[1687,1689,1692],{"depth":29,"slug":1688,"text":1688},"何故読んだか",{"depth":29,"slug":1690,"text":1691},"箱が世界の経済を変えるあらすじ","箱が世界の経済を変える(あらすじ）",{"depth":29,"slug":249,"text":249},[],[],[],"2021/0926.md","2021/1204",{"id":1697,"data":1699,"body":1702,"filePath":1703,"digest":1704,"rendered":1705,"legacyId":1722},{"title":1700,"publishDate":1701},"どうやって自分の時間を捻出しているか","2021-12-04","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の4日目の記事です。\n\n3歳半になる息子がいるエンジニアです。この記事は、普段の生活ぶりと子持ちによくある「育児で自分の時間がない」ということについてです。\n\n### 子供との1日\n\n日中仕事をしている時は、妻が子供の面倒を見てくれています。自分も基本的にはリモートワークのため家にいるのですが\n\n- 午前中は、妻と息子で買い物とか公園に行ったりしていて家に自分だけのことが多い\n- お昼は基本別々で食べる\n- 午後は家にいることが多い\n- 夕食の支度中は、まだ1人で遊ぶことが得意じゃないので定期的に仕事部屋に入ってくる\n- 夕食は家族揃って食べる\n- そのままお風呂→歯磨き→寝かしつけは自分がやる\n- 土日は日中は基本子供と常に一緒にいる\n\nみたいな感じになっています。ですがこれは正確ではありません。\n\n- 夕食を食べないと言い出し食べるのが遅くなったり\n- お昼寝をしないので急に眠くなってご飯食べるのに時間が掛かったり\n- 歯磨きヤダと言い出し寝る時間が遅くなる\n\nなど常に予定通りにはいかないことがほとんどです。特に3歳になってから意思表示が多くなってきたことで時間通りにいかないことが多くなってきました。\n\n### 平日\n\n寝かしつけは9割寝落ちします。なのでいつも妻に、21:30に起こしてもらうようにお願いしてます。ここで睡魔に負けるとそのまま朝まで寝てしまうこともあります。朝まで寝てしまって起きたときめちゃくちゃ後悔します。。\n\n21:30に起きて本業の仕事をちょっとやったり、副業したり読書したりすると24:00は過ぎていることが多く、ここから夜中の3時ぐらいまで起きていることがほとんどです。\n\nこの3時までの約3時間が実質フリーな時間でここで技術の勉強したり気乗りしない時はゲームしたりしています。\n\n\n## 休日\n\n日中は、ほとんど家族と過ごしています。なので自分の時間に当てることができるのは寝かしつけ終わった21:30以降になります。ただここで問題があって、子供と1日ずっといると結構疲れます。（これを毎日妻がやっていると考えると本当に感謝しかない）なのであんまり集中力とか出ないのでダラダラ過ごしてしまうことが多いです。\n\n## 命を削っている感覚\n\nもともと自分は8時間睡眠しないと翌日眠気が残るタイプの人間でした。\n\n本当は24:00には寝たいし、朝型に切り替えたこともありましたが長続きはせず、結局今のスタイルで現状は落ち着いています。ですが、3時に寝て朝8時から9時ぐらいに起きると毎日5-6時間の睡眠になるので、急に睡魔が襲ってきたりこれは周期的に起こることなんですが、2週間に1回ぐらい急に12時間寝てしまうことがあります。\n\nこれは明らかに「命の危険があるので寝ろ！」と脳が教えてくれていると思うのですが、このセンサーが歳を取って鈍くなってきたらその時は死ぬのでは？とふと思ったりします。\n\n\n## 結論\n\n自分の時間を作るということは寿命を短くすることです。というのは半分冗談です。時間は有限なので時間を作ってやることを決めたら、それは何かを捨てることです。\n\n最近割と真剣に仕事の時間を、どう減らそうか考えています。","src/content/blog/2021/1204.md","988f27e21498f79b",{"html":1706,"metadata":1707},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の4日目の記事です。\u003C/p>\n\u003Cp>3歳半になる息子がいるエンジニアです。この記事は、普段の生活ぶりと子持ちによくある「育児で自分の時間がない」ということについてです。\u003C/p>\n\u003Ch3 id=\"子供との1日\">子供との1日\u003C/h3>\n\u003Cp>日中仕事をしている時は、妻が子供の面倒を見てくれています。自分も基本的にはリモートワークのため家にいるのですが\u003C/p>\n\u003Cul>\n\u003Cli>午前中は、妻と息子で買い物とか公園に行ったりしていて家に自分だけのことが多い\u003C/li>\n\u003Cli>お昼は基本別々で食べる\u003C/li>\n\u003Cli>午後は家にいることが多い\u003C/li>\n\u003Cli>夕食の支度中は、まだ1人で遊ぶことが得意じゃないので定期的に仕事部屋に入ってくる\u003C/li>\n\u003Cli>夕食は家族揃って食べる\u003C/li>\n\u003Cli>そのままお風呂→歯磨き→寝かしつけは自分がやる\u003C/li>\n\u003Cli>土日は日中は基本子供と常に一緒にいる\u003C/li>\n\u003C/ul>\n\u003Cp>みたいな感じになっています。ですがこれは正確ではありません。\u003C/p>\n\u003Cul>\n\u003Cli>夕食を食べないと言い出し食べるのが遅くなったり\u003C/li>\n\u003Cli>お昼寝をしないので急に眠くなってご飯食べるのに時間が掛かったり\u003C/li>\n\u003Cli>歯磨きヤダと言い出し寝る時間が遅くなる\u003C/li>\n\u003C/ul>\n\u003Cp>など常に予定通りにはいかないことがほとんどです。特に3歳になってから意思表示が多くなってきたことで時間通りにいかないことが多くなってきました。\u003C/p>\n\u003Ch3 id=\"平日\">平日\u003C/h3>\n\u003Cp>寝かしつけは9割寝落ちします。なのでいつも妻に、21:30に起こしてもらうようにお願いしてます。ここで睡魔に負けるとそのまま朝まで寝てしまうこともあります。朝まで寝てしまって起きたときめちゃくちゃ後悔します。。\u003C/p>\n\u003Cp>21:30に起きて本業の仕事をちょっとやったり、副業したり読書したりすると24:00は過ぎていることが多く、ここから夜中の3時ぐらいまで起きていることがほとんどです。\u003C/p>\n\u003Cp>この3時までの約3時間が実質フリーな時間でここで技術の勉強したり気乗りしない時はゲームしたりしています。\u003C/p>\n\u003Ch2 id=\"休日\">休日\u003C/h2>\n\u003Cp>日中は、ほとんど家族と過ごしています。なので自分の時間に当てることができるのは寝かしつけ終わった21:30以降になります。ただここで問題があって、子供と1日ずっといると結構疲れます。（これを毎日妻がやっていると考えると本当に感謝しかない）なのであんまり集中力とか出ないのでダラダラ過ごしてしまうことが多いです。\u003C/p>\n\u003Ch2 id=\"命を削っている感覚\">命を削っている感覚\u003C/h2>\n\u003Cp>もともと自分は8時間睡眠しないと翌日眠気が残るタイプの人間でした。\u003C/p>\n\u003Cp>本当は24:00には寝たいし、朝型に切り替えたこともありましたが長続きはせず、結局今のスタイルで現状は落ち着いています。ですが、3時に寝て朝8時から9時ぐらいに起きると毎日5-6時間の睡眠になるので、急に睡魔が襲ってきたりこれは周期的に起こることなんですが、2週間に1回ぐらい急に12時間寝てしまうことがあります。\u003C/p>\n\u003Cp>これは明らかに「命の危険があるので寝ろ！」と脳が教えてくれていると思うのですが、このセンサーが歳を取って鈍くなってきたらその時は死ぬのでは？とふと思ったりします。\u003C/p>\n\u003Ch2 id=\"結論\">結論\u003C/h2>\n\u003Cp>自分の時間を作るということは寿命を短くすることです。というのは半分冗談です。時間は有限なので時間を作ってやることを決めたら、それは何かを捨てることです。\u003C/p>\n\u003Cp>最近割と真剣に仕事の時間を、どう減らそうか考えています。\u003C/p>",{"headings":1708,"localImagePaths":1719,"remoteImagePaths":1720,"frontmatter":1699,"imagePaths":1721},[1709,1711,1713,1715,1717],{"depth":29,"slug":1710,"text":1710},"子供との1日",{"depth":29,"slug":1712,"text":1712},"平日",{"depth":22,"slug":1714,"text":1714},"休日",{"depth":22,"slug":1716,"text":1716},"命を削っている感覚",{"depth":22,"slug":1718,"text":1718},"結論",[],[],[],"2021/1204.md","2021/1206",{"id":1723,"data":1725,"body":1728,"filePath":1729,"digest":1730,"rendered":1731,"legacyId":1749},{"title":1726,"publishDate":1727},"Google UX Designプロフェッショナルについて","2021-12-06","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の6日目の記事です。\n\n\nGoogleが提供しているUXの講座を受講しています。現在7コースあるうちの7コース目に突入していてもうすぐ終わりそうなので、まだ終わっていないけど振り返りを書こうと思います。\n\n## どんな講座？\n\n[Google UX Design Professional Certificate](https://www.coursera.org/professional-certificates/google-ux-design)\n\n全7コースになるオンラインの講座です。全て英語で公開されています。\n\nざっくり以下のような感じです。\n\n```\n1. UXデザインのキャリア、基礎的な話し\n2. UXデザインのプロセスを学ぶ\n3. ワイヤーフレーム、プロトタイピングの作成\n4. UXリサーチ初期コンセプトのテスト\n5. Figmaで高精度のデザインとプロトタイピングをする\n6. Adobe XDによるレスポンシブWEBデザインをする\n7. 社会的利益のためのUXデザインと、就職するための準備\n\n```\n\n### コース受講終了までの時間とコスト\n全7コースが終わる目安は、6ヶ月程度となっています。自分は初めて6ヶ月目ですが、1ヶ月全く受講しなかった月があったので5ヶ月ぐらいになります。金額は$39なので毎月4500円〜4700円払っています。これが6ヶ月と想定すると$200〜$300かかりそうです。\n\n\n### 受講すると良いことあるのか\n\n各コースが終わるとGoogleお墨付きの認定書が貰えます。履歴書に書けるレベルのものらしいです。実際に効力を発揮しているかどうかは分かりません。\n\n### 受講しようと思った理由\n\n以前からUXについて何となく記事とか本とかをちょっとずつ掻い摘んでいましたが、体系的に学んだことがなかったので受講してみました。\n\n### 受講してどうだったか\n\n非常に良いです。最初のコース1で具体的なキャリアなどを知れたのが結構良かったです。各コーステストがあって合格する必要があるのですが、普通のよくある4択問題＋記述式だけではなく、実際にワークをして成果物を提出して、同じ講座を受けている人から採点を貰う方式もあります。実際に自分も採点しましたが、回答とか見てるとしっかり書いている人もいれば全然書いていない人もいました。\n\n後全部英語なのですが、基本的にはDeepLを使うことで問題なく日本語で受講することができます。\n\n内容は基礎的な内容がほとんどかなと思います。","src/content/blog/2021/1206.md","912738c473569336",{"html":1732,"metadata":1733},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の6日目の記事です。\u003C/p>\n\u003Cp>Googleが提供しているUXの講座を受講しています。現在7コースあるうちの7コース目に突入していてもうすぐ終わりそうなので、まだ終わっていないけど振り返りを書こうと思います。\u003C/p>\n\u003Ch2 id=\"どんな講座\">どんな講座？\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.coursera.org/professional-certificates/google-ux-design\">Google UX Design Professional Certificate\u003C/a>\u003C/p>\n\u003Cp>全7コースになるオンラインの講座です。全て英語で公開されています。\u003C/p>\n\u003Cp>ざっくり以下のような感じです。\u003C/p>\n\u003Cpre class=\"language-plaintext\" data-language=\"plaintext\">\u003Ccode is:raw=\"\" class=\"language-plaintext\">1. UXデザインのキャリア、基礎的な話し\n2. UXデザインのプロセスを学ぶ\n3. ワイヤーフレーム、プロトタイピングの作成\n4. UXリサーチ初期コンセプトのテスト\n5. Figmaで高精度のデザインとプロトタイピングをする\n6. Adobe XDによるレスポンシブWEBデザインをする\n7. 社会的利益のためのUXデザインと、就職するための準備\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"コース受講終了までの時間とコスト\">コース受講終了までの時間とコスト\u003C/h3>\n\u003Cp>全7コースが終わる目安は、6ヶ月程度となっています。自分は初めて6ヶ月目ですが、1ヶ月全く受講しなかった月があったので5ヶ月ぐらいになります。金額は$39なので毎月4500円〜4700円払っています。これが6ヶ月と想定すると$200〜$300かかりそうです。\u003C/p>\n\u003Ch3 id=\"受講すると良いことあるのか\">受講すると良いことあるのか\u003C/h3>\n\u003Cp>各コースが終わるとGoogleお墨付きの認定書が貰えます。履歴書に書けるレベルのものらしいです。実際に効力を発揮しているかどうかは分かりません。\u003C/p>\n\u003Ch3 id=\"受講しようと思った理由\">受講しようと思った理由\u003C/h3>\n\u003Cp>以前からUXについて何となく記事とか本とかをちょっとずつ掻い摘んでいましたが、体系的に学んだことがなかったので受講してみました。\u003C/p>\n\u003Ch3 id=\"受講してどうだったか\">受講してどうだったか\u003C/h3>\n\u003Cp>非常に良いです。最初のコース1で具体的なキャリアなどを知れたのが結構良かったです。各コーステストがあって合格する必要があるのですが、普通のよくある4択問題＋記述式だけではなく、実際にワークをして成果物を提出して、同じ講座を受けている人から採点を貰う方式もあります。実際に自分も採点しましたが、回答とか見てるとしっかり書いている人もいれば全然書いていない人もいました。\u003C/p>\n\u003Cp>後全部英語なのですが、基本的にはDeepLを使うことで問題なく日本語で受講することができます。\u003C/p>\n\u003Cp>内容は基礎的な内容がほとんどかなと思います。\u003C/p>",{"headings":1734,"localImagePaths":1746,"remoteImagePaths":1747,"frontmatter":1725,"imagePaths":1748},[1735,1738,1740,1742,1744],{"depth":22,"slug":1736,"text":1737},"どんな講座","どんな講座？",{"depth":29,"slug":1739,"text":1739},"コース受講終了までの時間とコスト",{"depth":29,"slug":1741,"text":1741},"受講すると良いことあるのか",{"depth":29,"slug":1743,"text":1743},"受講しようと思った理由",{"depth":29,"slug":1745,"text":1745},"受講してどうだったか",[],[],[],"2021/1206.md","2021/1207",{"id":1750,"data":1752,"body":1755,"filePath":1756,"digest":1757,"rendered":1758,"legacyId":1779},{"title":1753,"publishDate":1754},"今年のSpotifyトップアーティストをみて音楽を振り返る","2021-12-07","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の7日目の記事です。\n\n突然ですが、今年Spotifyで聴いたトップアーティストは以下です。\n\n![トップアーティスト](/images/20211207.jpg)\n\n\nこの結果が意外ではありましたがそれぞれ振り返りをしようと思います。\n\n### DE DE MOUSE\n\n確かにそこそこ聴いていた記憶がありますが、2位のオウテカを抜いているのは意外でした。DE DE MOUSEとの出会いは学生時代の時に[キラキラジブリ](https://www.amazon.co.jp/%E3%82%AD%E3%83%A9%E3%82%AD%E3%83%A9%E3%82%B8%E3%83%96%E3%83%AA-%E3%82%AA%E3%83%A0%E3%83%8B%E3%83%90%E3%82%B9/dp/B0011ETP9Q)を聴いたのが最初です。メロディアスなリズムと謎のボーカル音にドハマリしました。YouTubeでライブを配信していますがこれがかなり良いです。\n\n## Autechre\n\nSquarepusherとAphex Twinがこのランキングにいないのが意外ですが、かなり聴いていると実感があります。気づいたら3日連続でオウテカということもあるぐらい好きです。\n\n\n## 相対性理論\n\nこれも意外でした。。でもそこそこ聴いている実感がありました。相対性理論はシフォン主義が出たときに衝撃を受けてその時からファンです。元々進行方向別通行区分が好きではあったのですが、進行方向別通行区分はSpotifyにないのが残念でなりません。\n\n## 植松伸夫\n\n今年もFFのBGMをたくさん聴きました。特に好きなのはⅥとⅨです。これは毎年ランクインする\n\n## Toby Fox\n\nUNDERTALEのBGMも結構聴きました。なので納得\n\n\n## まとめ\n\n基本的にはボーカルなしの音楽を好んでいます。これは、仕事中に聴くことがほとんどなので声があると気が散ることが多いのが理由です。来年も同様にボーカルなしのアーティストがランクインしそうですが、散歩とか外に出ることを増やしてボーカルありのアーティストも増やしていきたいですね。","src/content/blog/2021/1207.md","46100bc9b06b7b97",{"html":1759,"metadata":1760},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の7日目の記事です。\u003C/p>\n\u003Cp>突然ですが、今年Spotifyで聴いたトップアーティストは以下です。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20211207.jpg\" alt=\"トップアーティスト\">\u003C/p>\n\u003Cp>この結果が意外ではありましたがそれぞれ振り返りをしようと思います。\u003C/p>\n\u003Ch3 id=\"de-de-mouse\">DE DE MOUSE\u003C/h3>\n\u003Cp>確かにそこそこ聴いていた記憶がありますが、2位のオウテカを抜いているのは意外でした。DE DE MOUSEとの出会いは学生時代の時に\u003Ca href=\"https://www.amazon.co.jp/%E3%82%AD%E3%83%A9%E3%82%AD%E3%83%A9%E3%82%B8%E3%83%96%E3%83%AA-%E3%82%AA%E3%83%A0%E3%83%8B%E3%83%90%E3%82%B9/dp/B0011ETP9Q\">キラキラジブリ\u003C/a>を聴いたのが最初です。メロディアスなリズムと謎のボーカル音にドハマリしました。YouTubeでライブを配信していますがこれがかなり良いです。\u003C/p>\n\u003Ch2 id=\"autechre\">Autechre\u003C/h2>\n\u003Cp>SquarepusherとAphex Twinがこのランキングにいないのが意外ですが、かなり聴いていると実感があります。気づいたら3日連続でオウテカということもあるぐらい好きです。\u003C/p>\n\u003Ch2 id=\"相対性理論\">相対性理論\u003C/h2>\n\u003Cp>これも意外でした。。でもそこそこ聴いている実感がありました。相対性理論はシフォン主義が出たときに衝撃を受けてその時からファンです。元々進行方向別通行区分が好きではあったのですが、進行方向別通行区分はSpotifyにないのが残念でなりません。\u003C/p>\n\u003Ch2 id=\"植松伸夫\">植松伸夫\u003C/h2>\n\u003Cp>今年もFFのBGMをたくさん聴きました。特に好きなのはⅥとⅨです。これは毎年ランクインする\u003C/p>\n\u003Ch2 id=\"toby-fox\">Toby Fox\u003C/h2>\n\u003Cp>UNDERTALEのBGMも結構聴きました。なので納得\u003C/p>\n\u003Ch2 id=\"まとめ\">まとめ\u003C/h2>\n\u003Cp>基本的にはボーカルなしの音楽を好んでいます。これは、仕事中に聴くことがほとんどなので声があると気が散ることが多いのが理由です。来年も同様にボーカルなしのアーティストがランクインしそうですが、散歩とか外に出ることを増やしてボーカルありのアーティストも増やしていきたいですね。\u003C/p>",{"headings":1761,"localImagePaths":1776,"remoteImagePaths":1777,"frontmatter":1752,"imagePaths":1778},[1762,1765,1768,1770,1772,1775],{"depth":29,"slug":1763,"text":1764},"de-de-mouse","DE DE MOUSE",{"depth":22,"slug":1766,"text":1767},"autechre","Autechre",{"depth":22,"slug":1769,"text":1769},"相対性理論",{"depth":22,"slug":1771,"text":1771},"植松伸夫",{"depth":22,"slug":1773,"text":1774},"toby-fox","Toby Fox",{"depth":22,"slug":76,"text":76},[],[],[],"2021/1207.md","2021/1205",{"id":1780,"data":1782,"body":1787,"filePath":1788,"digest":1789,"rendered":1790,"legacyId":1800},{"title":1783,"publishDate":1784,"updatedDate":1785,"tags":1786},"globalThisについて調べた","2021-12-05","2022-01-22",[350],"この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の5日目の記事です。\n\nあるOSSのソースコードを読んでいたら[globalThis](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/globalThis)が出てきてそういえばあまり知らないと思ったので何となく調べたことを書きます。\n\nまず以下のコードを実行して見ましょう！\n\n```js\nconsole.log(globalThis === window);\n\n```\n\n実行すると`true`が返ってきます。globalThisは、windowとイコールです！つまりglobalThisは、グローバルオブジェクトと同じということが分かりました。\n\n### Node.jsで扱えるように\n\n[globalThisのプロポーザル](https://github.com/tc39/proposal-global)を読むと、Node.jsではWindowオブジェクトがないことから（同等のシンタックスで`global`がある）ECMAScriptの標準としてglobalThisが出来たということです。確かに、Node.jsとブラウザの両方の環境で動かすユースケースはありそうな気がします。\n\n\n以下のように書くだけで、ブラウザ、Node.jsなど環境関係なくグローバル変数を参照、設定できます。\n\n```js\nglobalThis.value = value\n\n```\n\nUhyoさんの記事がめちゃくちゃわかりやすいです。\n\n\n[👻globalThis👻と🌏global🌏と🌝this🌝](https://qiita.com/uhyo/items/f3b6feef9444e86bef94)","src/content/blog/2021/1205.md","dd70ca1716eeb073",{"html":1791,"metadata":1792},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の5日目の記事です。\u003C/p>\n\u003Cp>あるOSSのソースコードを読んでいたら\u003Ca href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis\u003C/a>が出てきてそういえばあまり知らないと思ったので何となく調べたことを書きます。\u003C/p>\n\u003Cp>まず以下のコードを実行して見ましょう！\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">console\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>globalThis \u003Cspan class=\"token operator\">===\u003C/span> window\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>実行すると\u003Ccode>true\u003C/code>が返ってきます。globalThisは、windowとイコールです！つまりglobalThisは、グローバルオブジェクトと同じということが分かりました。\u003C/p>\n\u003Ch3 id=\"nodejsで扱えるように\">Node.jsで扱えるように\u003C/h3>\n\u003Cp>\u003Ca href=\"https://github.com/tc39/proposal-global\">globalThisのプロポーザル\u003C/a>を読むと、Node.jsではWindowオブジェクトがないことから（同等のシンタックスで\u003Ccode>global\u003C/code>がある）ECMAScriptの標準としてglobalThisが出来たということです。確かに、Node.jsとブラウザの両方の環境で動かすユースケースはありそうな気がします。\u003C/p>\n\u003Cp>以下のように書くだけで、ブラウザ、Node.jsなど環境関係なくグローバル変数を参照、設定できます。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">globalThis\u003Cspan class=\"token punctuation\">.\u003C/span>value \u003Cspan class=\"token operator\">=\u003C/span> value\n\n\u003C/code>\u003C/pre>\n\u003Cp>Uhyoさんの記事がめちゃくちゃわかりやすいです。\u003C/p>\n\u003Cp>\u003Ca href=\"https://qiita.com/uhyo/items/f3b6feef9444e86bef94\">👻globalThis👻と🌏global🌏と🌝this🌝\u003C/a>\u003C/p>",{"headings":1793,"localImagePaths":1797,"remoteImagePaths":1798,"frontmatter":1782,"imagePaths":1799},[1794],{"depth":29,"slug":1795,"text":1796},"nodejsで扱えるように","Node.jsで扱えるように",[],[],[],"2021/1205.md","2021/1208",{"id":1801,"data":1803,"body":1806,"filePath":1807,"digest":1808,"rendered":1809,"legacyId":1829},{"title":1804,"publishDate":1805},"Skyrim英語版で英語を学ぶ","2021-12-08","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の8日目の記事です。\n\n[スカイリム](https://elderscrolls.bethesda.net/ja/skyrim)というオープンワールドのゲームを英語版でプレイし始めました。\n\n### なんで始めたか？\n\n英語が絶望的にできません。中学レベルの英語はまあ多少分かるのですが、当然聞き取れないですし、英文を読むなんてまず無理です。何か楽しく英語勉強できないかなと考えた結果。ゲームをしながらであれば苦ではないかもと考えて日本語で500時間ぐらいプレイしたことあるスカイリムを再スタートしました。今回はあくまでリスニング目的で考えていました。\n\n### プレイ環境\n\n日本語でかなりやり込んでいたのである程度のことは分かっている前提があったので、字幕なしでやってみようと思いswitchで新しくソフトを購入しました。英語の言語ファイルを無料ダウンロードできます。（字幕はありません。）Modだと字幕の設定が可能です。\n\n### いきなり挫折\n\nやはり字幕は必要でしたww スカイリムの世界は人に近づくと会話の内容を聴けたりするのですが、全く何を言っているのか分からず、言語の分からない異国に急に飛ばされた感があります。海外旅行とかこんな感じなのか〜と思ったりしました。しかし日本語の記憶はあるので分かるものもあります。またアイテムなどはほぼ覚えているので単語とかは分かるような感じです。\n\n### プレイ時間を20時間過ぎてからちょっと慣れてきた。\n\nまだ全然聞き取れませんが一応英語が表示されるので、何となく意味は分かってくるようになります。しかしかなりの集中力と音声を最大とかにして繰り返し聴かないと理解できません。ただ人の感情とかは分かるようになり「こいつ怒ってるな〜」とか「何かを自慢しているのかな？」などは会話のトーンで分かってきます。\n\n### でも辛い。。\n\n英語は継続が大事みたいなこともあるので、続けていけばちょっと聞き取れるようになるかもと信じて続けていきます。クエストも本筋の方ではなくサイドストーリー中心にやっているのでゲーム自体は気楽なので辛さと楽しさのバランスが取れているのかもしれないです。","src/content/blog/2021/1208.md","7bb20fe59707ee22",{"html":1810,"metadata":1811},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の8日目の記事です。\u003C/p>\n\u003Cp>\u003Ca href=\"https://elderscrolls.bethesda.net/ja/skyrim\">スカイリム\u003C/a>というオープンワールドのゲームを英語版でプレイし始めました。\u003C/p>\n\u003Ch3 id=\"なんで始めたか\">なんで始めたか？\u003C/h3>\n\u003Cp>英語が絶望的にできません。中学レベルの英語はまあ多少分かるのですが、当然聞き取れないですし、英文を読むなんてまず無理です。何か楽しく英語勉強できないかなと考えた結果。ゲームをしながらであれば苦ではないかもと考えて日本語で500時間ぐらいプレイしたことあるスカイリムを再スタートしました。今回はあくまでリスニング目的で考えていました。\u003C/p>\n\u003Ch3 id=\"プレイ環境\">プレイ環境\u003C/h3>\n\u003Cp>日本語でかなりやり込んでいたのである程度のことは分かっている前提があったので、字幕なしでやってみようと思いswitchで新しくソフトを購入しました。英語の言語ファイルを無料ダウンロードできます。（字幕はありません。）Modだと字幕の設定が可能です。\u003C/p>\n\u003Ch3 id=\"いきなり挫折\">いきなり挫折\u003C/h3>\n\u003Cp>やはり字幕は必要でしたww スカイリムの世界は人に近づくと会話の内容を聴けたりするのですが、全く何を言っているのか分からず、言語の分からない異国に急に飛ばされた感があります。海外旅行とかこんな感じなのか〜と思ったりしました。しかし日本語の記憶はあるので分かるものもあります。またアイテムなどはほぼ覚えているので単語とかは分かるような感じです。\u003C/p>\n\u003Ch3 id=\"プレイ時間を20時間過ぎてからちょっと慣れてきた\">プレイ時間を20時間過ぎてからちょっと慣れてきた。\u003C/h3>\n\u003Cp>まだ全然聞き取れませんが一応英語が表示されるので、何となく意味は分かってくるようになります。しかしかなりの集中力と音声を最大とかにして繰り返し聴かないと理解できません。ただ人の感情とかは分かるようになり「こいつ怒ってるな〜」とか「何かを自慢しているのかな？」などは会話のトーンで分かってきます。\u003C/p>\n\u003Ch3 id=\"でも辛い\">でも辛い。。\u003C/h3>\n\u003Cp>英語は継続が大事みたいなこともあるので、続けていけばちょっと聞き取れるようになるかもと信じて続けていきます。クエストも本筋の方ではなくサイドストーリー中心にやっているのでゲーム自体は気楽なので辛さと楽しさのバランスが取れているのかもしれないです。\u003C/p>",{"headings":1812,"localImagePaths":1826,"remoteImagePaths":1827,"frontmatter":1803,"imagePaths":1828},[1813,1816,1818,1820,1823],{"depth":29,"slug":1814,"text":1815},"なんで始めたか","なんで始めたか？",{"depth":29,"slug":1817,"text":1817},"プレイ環境",{"depth":29,"slug":1819,"text":1819},"いきなり挫折",{"depth":29,"slug":1821,"text":1822},"プレイ時間を20時間過ぎてからちょっと慣れてきた","プレイ時間を20時間過ぎてからちょっと慣れてきた。",{"depth":29,"slug":1824,"text":1825},"でも辛い","でも辛い。。",[],[],[],"2021/1208.md","2021/1209",{"id":1830,"data":1832,"body":1835,"filePath":1836,"digest":1837,"rendered":1838,"legacyId":1852},{"title":1833,"publishDate":1834},"養命酒こそ最高のエナジードリンク","2021-12-09","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の9日目の記事です。\n\n養命酒はいいぞ！という記事です。\n\nまず自分はカフェインが好きです。\n\n- 毎朝コーヒーを飲む\n- ランチ後に必ずコーヒー飲む\n- 夕食までの間に一杯のコーヒーもしくはモンスタエナジーを飲む\n- 寝かしつけ終わったらモンスターエナジーを飲む\n\nこれはかなりまずいです。寝かしつけ後のモンエナは飲まないときもありますが、カフェインが抜けると、頭痛がして集中力もなくなります。カフェインを意識的に取らないように休肝日のようなものを設けたりもしますがその日はすこぶる体調不良になったりします\n\n### 養命酒を試す\n\n以下のTwitterを見て気になったので、調べてみることしました。（ブーストで飲むなら養命酒はパワーワード）\n\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">いいか。カフェインと糖分とアミノ酸で元気の前借りしてるだけで腎臓肝臓は傷つくぞ。そのまま続けると三十路には臓器が過労で死ぬぞ。\u003Cbr>\u003Cbr>ブーストで飲むなら養命酒だ。飲むほど健康度が上がるのに運用費はエナドリより安いぞ。\u003C/p>&mdash; yamoto⋈30日西きー21b (@yamoto) \u003Ca href=\"https://twitter.com/yamoto/status/1327560167597084672?ref_src=twsrc%5Etfw\">November 14, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n養命酒の存在はTVのCMで知っていて薬用養命酒というぐらいなので「様々な効果があるんだろうな〜」「歳を取ったら飲むんだろうな〜」ぐらいのイメージはありましたが本当にそうでした。\n\n- 肉体疲労\n- 冷え性\n- 胃腸虚弱\n- 病中病後\n- 食欲不振\n- 虚弱体質\n- 血色不良\n\nエナジードリンクは1本200円程度に対して養命酒は700mlで1,705円（1回20ml×3で12日分）なので、コスパは養命酒の方が良かったりするので試してみることにしました。\n\n### 飲んでみた。\n\nアルコールが入っていることもあり一応朝昼の摂取は避けて夜寝る前だけ飲むようにしました。飲んだ瞬間は身体ポカポカするので、冷え性の自分に取っては足が温かい状態で就寝することができて良いです。\n\n味は、薬用ということもあり美味しくないと覚悟していましたが、一言で言うと甘いです。不味くないが美味しくないと言った感じで、飲めなくはないかな〜と思います。飲み続けていると慣れてきますがアルコールが14%と高めなのでお酒が苦手な方は、ちょっとキツイかもしれないです。\n\n### 飲んでみてどうか\n\n個人差が当然ありますが、私の場合は飲み始めた翌日から毎朝目覚めが良くなった気がします。多分これはエナドリを夜に飲まなくなったのが、影響していそうです。養命酒を飲み始めてからは\n\n- コーヒー1日2杯\n- 養命酒寝る前に飲む\n\nという生活になり今の所エナジードリンクを飲まなくても大丈夫な生活が送れています。たまにエナドリが飲みたくなる時もありますがその時はガムを食べて気を紛らわしています。（禁煙か！）","src/content/blog/2021/1209.md","741c4fe47e44f94c",{"html":1839,"metadata":1840},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の9日目の記事です。\u003C/p>\n\u003Cp>養命酒はいいぞ！という記事です。\u003C/p>\n\u003Cp>まず自分はカフェインが好きです。\u003C/p>\n\u003Cul>\n\u003Cli>毎朝コーヒーを飲む\u003C/li>\n\u003Cli>ランチ後に必ずコーヒー飲む\u003C/li>\n\u003Cli>夕食までの間に一杯のコーヒーもしくはモンスタエナジーを飲む\u003C/li>\n\u003Cli>寝かしつけ終わったらモンスターエナジーを飲む\u003C/li>\n\u003C/ul>\n\u003Cp>これはかなりまずいです。寝かしつけ後のモンエナは飲まないときもありますが、カフェインが抜けると、頭痛がして集中力もなくなります。カフェインを意識的に取らないように休肝日のようなものを設けたりもしますがその日はすこぶる体調不良になったりします\u003C/p>\n\u003Ch3 id=\"養命酒を試す\">養命酒を試す\u003C/h3>\n\u003Cp>以下のTwitterを見て気になったので、調べてみることしました。（ブーストで飲むなら養命酒はパワーワード）\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">いいか。カフェインと糖分とアミノ酸で元気の前借りしてるだけで腎臓肝臓は傷つくぞ。そのまま続けると三十路には臓器が過労で死ぬぞ。\u003Cbr>\u003Cbr>ブーストで飲むなら養命酒だ。飲むほど健康度が上がるのに運用費はエナドリより安いぞ。\u003C/p>— yamoto⋈30日西きー21b (@yamoto) \u003Ca href=\"https://twitter.com/yamoto/status/1327560167597084672?ref_src=twsrc%5Etfw\">November 14, 2020\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>養命酒の存在はTVのCMで知っていて薬用養命酒というぐらいなので「様々な効果があるんだろうな〜」「歳を取ったら飲むんだろうな〜」ぐらいのイメージはありましたが本当にそうでした。\u003C/p>\n\u003Cul>\n\u003Cli>肉体疲労\u003C/li>\n\u003Cli>冷え性\u003C/li>\n\u003Cli>胃腸虚弱\u003C/li>\n\u003Cli>病中病後\u003C/li>\n\u003Cli>食欲不振\u003C/li>\n\u003Cli>虚弱体質\u003C/li>\n\u003Cli>血色不良\u003C/li>\n\u003C/ul>\n\u003Cp>エナジードリンクは1本200円程度に対して養命酒は700mlで1,705円（1回20ml×3で12日分）なので、コスパは養命酒の方が良かったりするので試してみることにしました。\u003C/p>\n\u003Ch3 id=\"飲んでみた\">飲んでみた。\u003C/h3>\n\u003Cp>アルコールが入っていることもあり一応朝昼の摂取は避けて夜寝る前だけ飲むようにしました。飲んだ瞬間は身体ポカポカするので、冷え性の自分に取っては足が温かい状態で就寝することができて良いです。\u003C/p>\n\u003Cp>味は、薬用ということもあり美味しくないと覚悟していましたが、一言で言うと甘いです。不味くないが美味しくないと言った感じで、飲めなくはないかな〜と思います。飲み続けていると慣れてきますがアルコールが14%と高めなのでお酒が苦手な方は、ちょっとキツイかもしれないです。\u003C/p>\n\u003Ch3 id=\"飲んでみてどうか\">飲んでみてどうか\u003C/h3>\n\u003Cp>個人差が当然ありますが、私の場合は飲み始めた翌日から毎朝目覚めが良くなった気がします。多分これはエナドリを夜に飲まなくなったのが、影響していそうです。養命酒を飲み始めてからは\u003C/p>\n\u003Cul>\n\u003Cli>コーヒー1日2杯\u003C/li>\n\u003Cli>養命酒寝る前に飲む\u003C/li>\n\u003C/ul>\n\u003Cp>という生活になり今の所エナジードリンクを飲まなくても大丈夫な生活が送れています。たまにエナドリが飲みたくなる時もありますがその時はガムを食べて気を紛らわしています。（禁煙か！）\u003C/p>",{"headings":1841,"localImagePaths":1849,"remoteImagePaths":1850,"frontmatter":1832,"imagePaths":1851},[1842,1844,1847],{"depth":29,"slug":1843,"text":1843},"養命酒を試す",{"depth":29,"slug":1845,"text":1846},"飲んでみた","飲んでみた。",{"depth":29,"slug":1848,"text":1848},"飲んでみてどうか",[],[],[],"2021/1209.md","2021/1210",{"id":1853,"data":1855,"body":1858,"filePath":1859,"digest":1860,"rendered":1861,"legacyId":1882},{"title":1856,"publishDate":1857},"いいチームとはどういう状態か。","2021-12-10","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の10日目の記事です。\n\n今年1年振り返るとあまり仕事でリードをするような仕事はなかった。。リードのスキルを保つためにも自分の考える「いいチーム」について書こうと思います。\n\n\n### いいチームとは\n\n色々ありそうですが、自分は「***余計なことを考える必要がなくコーディングに集中できること、いいコードが書けること***」が出来ていることがいいチームだと考えます。\n\n### 余計なことを考えることの障害\n\n「心理的安全性」というやつです。よく言われるのが、「共通認識をチームメンバー全員で揃える」「謙虚、尊敬、信頼」などでしょうか。特に「謙虚、尊敬、信頼」の一つでも欠けているといいチームとは呼べなそうです。このあたりは、[Team Geek](https://www.oreilly.co.jp/books/9784873116303/)という本を読むと理解が深まります。\n\nエンジニアというか人間は、途中のものを人に見せることが不安だと思うことがあります。何故不安になるのかと言うと、完成する前のコードを人に見せたときに、見せた人が自分のコードを見て言葉には発しないけど「勝手に各付けされれしまう」という不安を持つことが原因にあるなと思います。心の中で「あーここの処理ちょっと複雑すぎるし何書いてあるかわかんないな。。」とか「このメソッド使ったら楽に書けそうだけど知らないのかな」と思うことはよくあります。\n\nこれは別に間違った感情ではないので問題ないと思いますが、常に相手に見せるのが不安だと思う人がいるとチーム開発のコストは高くなってしまいます。\n\n- 不安と思ってしまう。\n- 完成するまで見せない\n- 仕事の進捗が不明瞭になる\n\nと言った感じでどんどんリカバリーが難しくなるのでチーム間で「謙虚、尊敬、信頼」をしっかり定着させることが大事です。とりあえず途中まででいいからdraftのPRを出すというのは実はとても大事なことだなと思います。\n\n### ペアプロ\n\nペアプロ自体はとても良いことだと思います。しかし時にはエンジニア同士のペアプロは避けた方が良い場面があるなと思っています。エンジニア同士のスキルのばらつきがある場合は、お互いのスキルを知った上で行うことで成功する可能性は高くなります。これが知らない状態でスタートすると失敗するケースが多いです。なのでチーム間ではスキルセットをお互い把握することが何よりも重要だと思います。\n\nそもそもスキルセットの把握がない状態でペアプロするケースはあまりないかも知れませんが、お互いの思考が異なるタイプのペアプロも避けた方が良いです。こういう場合は、あえてペアプロはせずに\n- まず実装内容をお互い確認する\n- お互いの持つ「観点」でそれぞれ実装をする\n- 実装完了のタイミングで集まって議論する\n\nのようにした方がペアプロの時間で失敗するコストを事前に避けれそうです。議論する時間のコストは個人的には、チーム開発にとって一番重要な時間だと感じるので納得がいくまで時間を取ってしまっていいと思っています。\n\n### 知識の共有\n\n[単一障害点](https://ja.wikipedia.org/wiki/%E5%8D%98%E4%B8%80%E9%9A%9C%E5%AE%B3%E7%82%B9)というのがあります。例えば「この実装は他の人が実装するより自分がやった方がはやいから実装しちゃう」みたいなケースです。これは短期的にみると効率がよく最適化されていますが、長期的にみるとナレッジが共有されていないのでボトルネックになってしまいます。なのでチーム間での技術的な共有は、ドキュメント（Wikiのようなもの）があると良いと思います。メンテされないあるあるが発生しないためにリーダーがサポートすると良いと思っています。\n\n### 細かい言葉遣い\n\nチーム間でも言葉遣いを気をつけることが大事です。よくあるものだと以下でしょうか。\n\n- 驚いたこと「え！？マジで？」のようなふりは心理的安全性を下げるのであまり言わないようにする\n- MTGの際に会議の決定権や責任がないのにも関わらず口出しして腰を折ったりすることはしない\n- 「簡単じゃん！〇〇だってできるよ！」のようなバイアスがかかった発言は心理的安全性を下げる可能性がるので言わないようにする\n\n### 錯覚\n\n「自分のスキルを発揮でき学びもあるいいチームだ！」ではなく「スキルを発揮できるけどぶっちゃけ楽ができるいいチームだ」と捉えていないかをチームメンバーで確認することも必要かなと思います。少しでも違和感があると長期的にみるとボトルネックになると感じます。\n\n### リーダーとして\n\n自分は、楽しくコードを書けることを第一に考えるので、それができていないメンバーが仮にいたとしたら、全ての優先度の中で最重要として取り組むと思います。どう取り組むかケースバイケースなので省きます。また、リーダーだから全てできるとは全く思わず「分かんないことばっかり教えて！」と素直に質問しまくれる関係性も作ることも大切です。","src/content/blog/2021/1210.md","2b69c6f12d114a24",{"html":1862,"metadata":1863},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の10日目の記事です。\u003C/p>\n\u003Cp>今年1年振り返るとあまり仕事でリードをするような仕事はなかった。。リードのスキルを保つためにも自分の考える「いいチーム」について書こうと思います。\u003C/p>\n\u003Ch3 id=\"いいチームとは\">いいチームとは\u003C/h3>\n\u003Cp>色々ありそうですが、自分は「\u003Cem>\u003Cstrong>余計なことを考える必要がなくコーディングに集中できること、いいコードが書けること\u003C/strong>\u003C/em>」が出来ていることがいいチームだと考えます。\u003C/p>\n\u003Ch3 id=\"余計なことを考えることの障害\">余計なことを考えることの障害\u003C/h3>\n\u003Cp>「心理的安全性」というやつです。よく言われるのが、「共通認識をチームメンバー全員で揃える」「謙虚、尊敬、信頼」などでしょうか。特に「謙虚、尊敬、信頼」の一つでも欠けているといいチームとは呼べなそうです。このあたりは、\u003Ca href=\"https://www.oreilly.co.jp/books/9784873116303/\">Team Geek\u003C/a>という本を読むと理解が深まります。\u003C/p>\n\u003Cp>エンジニアというか人間は、途中のものを人に見せることが不安だと思うことがあります。何故不安になるのかと言うと、完成する前のコードを人に見せたときに、見せた人が自分のコードを見て言葉には発しないけど「勝手に各付けされれしまう」という不安を持つことが原因にあるなと思います。心の中で「あーここの処理ちょっと複雑すぎるし何書いてあるかわかんないな。。」とか「このメソッド使ったら楽に書けそうだけど知らないのかな」と思うことはよくあります。\u003C/p>\n\u003Cp>これは別に間違った感情ではないので問題ないと思いますが、常に相手に見せるのが不安だと思う人がいるとチーム開発のコストは高くなってしまいます。\u003C/p>\n\u003Cul>\n\u003Cli>不安と思ってしまう。\u003C/li>\n\u003Cli>完成するまで見せない\u003C/li>\n\u003Cli>仕事の進捗が不明瞭になる\u003C/li>\n\u003C/ul>\n\u003Cp>と言った感じでどんどんリカバリーが難しくなるのでチーム間で「謙虚、尊敬、信頼」をしっかり定着させることが大事です。とりあえず途中まででいいからdraftのPRを出すというのは実はとても大事なことだなと思います。\u003C/p>\n\u003Ch3 id=\"ペアプロ\">ペアプロ\u003C/h3>\n\u003Cp>ペアプロ自体はとても良いことだと思います。しかし時にはエンジニア同士のペアプロは避けた方が良い場面があるなと思っています。エンジニア同士のスキルのばらつきがある場合は、お互いのスキルを知った上で行うことで成功する可能性は高くなります。これが知らない状態でスタートすると失敗するケースが多いです。なのでチーム間ではスキルセットをお互い把握することが何よりも重要だと思います。\u003C/p>\n\u003Cp>そもそもスキルセットの把握がない状態でペアプロするケースはあまりないかも知れませんが、お互いの思考が異なるタイプのペアプロも避けた方が良いです。こういう場合は、あえてペアプロはせずに\u003C/p>\n\u003Cul>\n\u003Cli>まず実装内容をお互い確認する\u003C/li>\n\u003Cli>お互いの持つ「観点」でそれぞれ実装をする\u003C/li>\n\u003Cli>実装完了のタイミングで集まって議論する\u003C/li>\n\u003C/ul>\n\u003Cp>のようにした方がペアプロの時間で失敗するコストを事前に避けれそうです。議論する時間のコストは個人的には、チーム開発にとって一番重要な時間だと感じるので納得がいくまで時間を取ってしまっていいと思っています。\u003C/p>\n\u003Ch3 id=\"知識の共有\">知識の共有\u003C/h3>\n\u003Cp>\u003Ca href=\"https://ja.wikipedia.org/wiki/%E5%8D%98%E4%B8%80%E9%9A%9C%E5%AE%B3%E7%82%B9\">単一障害点\u003C/a>というのがあります。例えば「この実装は他の人が実装するより自分がやった方がはやいから実装しちゃう」みたいなケースです。これは短期的にみると効率がよく最適化されていますが、長期的にみるとナレッジが共有されていないのでボトルネックになってしまいます。なのでチーム間での技術的な共有は、ドキュメント（Wikiのようなもの）があると良いと思います。メンテされないあるあるが発生しないためにリーダーがサポートすると良いと思っています。\u003C/p>\n\u003Ch3 id=\"細かい言葉遣い\">細かい言葉遣い\u003C/h3>\n\u003Cp>チーム間でも言葉遣いを気をつけることが大事です。よくあるものだと以下でしょうか。\u003C/p>\n\u003Cul>\n\u003Cli>驚いたこと「え！？マジで？」のようなふりは心理的安全性を下げるのであまり言わないようにする\u003C/li>\n\u003Cli>MTGの際に会議の決定権や責任がないのにも関わらず口出しして腰を折ったりすることはしない\u003C/li>\n\u003Cli>「簡単じゃん！〇〇だってできるよ！」のようなバイアスがかかった発言は心理的安全性を下げる可能性がるので言わないようにする\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"錯覚\">錯覚\u003C/h3>\n\u003Cp>「自分のスキルを発揮でき学びもあるいいチームだ！」ではなく「スキルを発揮できるけどぶっちゃけ楽ができるいいチームだ」と捉えていないかをチームメンバーで確認することも必要かなと思います。少しでも違和感があると長期的にみるとボトルネックになると感じます。\u003C/p>\n\u003Ch3 id=\"リーダーとして\">リーダーとして\u003C/h3>\n\u003Cp>自分は、楽しくコードを書けることを第一に考えるので、それができていないメンバーが仮にいたとしたら、全ての優先度の中で最重要として取り組むと思います。どう取り組むかケースバイケースなので省きます。また、リーダーだから全てできるとは全く思わず「分かんないことばっかり教えて！」と素直に質問しまくれる関係性も作ることも大切です。\u003C/p>",{"headings":1864,"localImagePaths":1879,"remoteImagePaths":1880,"frontmatter":1855,"imagePaths":1881},[1865,1867,1869,1871,1873,1875,1877],{"depth":29,"slug":1866,"text":1866},"いいチームとは",{"depth":29,"slug":1868,"text":1868},"余計なことを考えることの障害",{"depth":29,"slug":1870,"text":1870},"ペアプロ",{"depth":29,"slug":1872,"text":1872},"知識の共有",{"depth":29,"slug":1874,"text":1874},"細かい言葉遣い",{"depth":29,"slug":1876,"text":1876},"錯覚",{"depth":29,"slug":1878,"text":1878},"リーダーとして",[],[],[],"2021/1210.md","2021/1211",{"id":1883,"data":1885,"body":1888,"filePath":1889,"digest":1890,"rendered":1891,"legacyId":1903},{"title":1886,"publishDate":1887},"ブラウザのスクロール操作を無効化するCSS(touch-action)","2021-12-11","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の11日目の記事です。\n\n初めて知ったので記事にします。\n\n### touch-action\n\n[touch-action](https://developer.mozilla.org/ja/docs/Web/CSS/touch-action)\n\nある領域においてユーザーがタッチ操作をどのようにさせるかを設定できるCSSです。パンするかスクロールするかなどを設定できます。何かのJSライブラリで独自にタッチ操作をしている場合に上手くUIが作れない場合とかに役立ちます。特にiOS Safariとかで発生しそう\n\nその昔、こんなおまじないをmetaタグに設定したのを思い出しました。\n\n```html\n\n\u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n\n```\n\nこれはiOS10以降では`user-scalable=no`の指定が無効になったっぽいです。\n\n\n違う例で、JavaScriptだと`passive: true`のような設定ができたりして以下はスクロールの方向を水平だけにしたいときに使います\n\n```js\n\ndocument.body.addEventListener('pointermove', event => {\n  if (event.cancelable) {\n      event.preventDefault(); \n  }\n}, {passive: true});\n\n```\n\nこのあたりのスクロール系は制御が面倒だったりしますが以下だけで制御できます。\n\n```css\ntouch-action: pan-x\n```\n\n### touch-action: none\n\n`none`に指定した領域ではスクロールを無効化することができるCSSです。\n\n```html\n\u003Cdiv>\n  \u003Cdiv class=\"scroll\">\u003C/div>\n  \u003Cdiv class=\"no-scroll\">\u003C/div>\n\u003C/div>\n\n```\n\n```css\n\n.no-scroll {\n  touch-action: none\n}\n\n```\n\n少し古いですが以下のような記事がありました。\n\n[html { touch-action: none; } に潜む罠](https://lealog.hateblo.jp/entry/2015/02/19/124748)\n\n動作確認はしていないですが記事内で触れられている`manipulation`を使う方が良さそうな気がしています。\n\nタッチ操作は奥が深い。。","src/content/blog/2021/1211.md","d5ecc1aba6e9995e",{"html":1892,"metadata":1893},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の11日目の記事です。\u003C/p>\n\u003Cp>初めて知ったので記事にします。\u003C/p>\n\u003Ch3 id=\"touch-action\">touch-action\u003C/h3>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/ja/docs/Web/CSS/touch-action\">touch-action\u003C/a>\u003C/p>\n\u003Cp>ある領域においてユーザーがタッチ操作をどのようにさせるかを設定できるCSSです。パンするかスクロールするかなどを設定できます。何かのJSライブラリで独自にタッチ操作をしている場合に上手くUIが作れない場合とかに役立ちます。特にiOS Safariとかで発生しそう\u003C/p>\n\u003Cp>その昔、こんなおまじないをmetaタグに設定したのを思い出しました。\u003C/p>\n\u003Cpre class=\"language-html\" data-language=\"html\">\u003Ccode is:raw=\"\" class=\"language-html\">\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>meta\u003C/span> \u003Cspan class=\"token attr-name\">name\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>viewport\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">content\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>これはiOS10以降では\u003Ccode>user-scalable=no\u003C/code>の指定が無効になったっぽいです。\u003C/p>\n\u003Cp>違う例で、JavaScriptだと\u003Ccode>passive: true\u003C/code>のような設定ができたりして以下はスクロールの方向を水平だけにしたいときに使います\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\ndocument\u003Cspan class=\"token punctuation\">.\u003C/span>body\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">addEventListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'pointermove'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token parameter\">event\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>event\u003Cspan class=\"token punctuation\">.\u003C/span>cancelable\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n      event\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">preventDefault\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">passive\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>このあたりのスクロール系は制御が面倒だったりしますが以下だけで制御できます。\u003C/p>\n\u003Cpre class=\"language-css\" data-language=\"css\">\u003Ccode is:raw=\"\" class=\"language-css\">\u003Cspan class=\"token property\">touch-action\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> pan-x\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"touch-action-none\">touch-action: none\u003C/h3>\n\u003Cp>\u003Ccode>none\u003C/code>に指定した領域ではスクロールを無効化することができるCSSです。\u003C/p>\n\u003Cpre class=\"language-html\" data-language=\"html\">\u003Ccode is:raw=\"\" class=\"language-html\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>scroll\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n  \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>div\u003C/span> \u003Cspan class=\"token attr-name\">class\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>no-scroll\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>div\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cpre class=\"language-css\" data-language=\"css\">\u003Ccode is:raw=\"\" class=\"language-css\">\n\u003Cspan class=\"token selector\">.no-scroll\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token property\">touch-action\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> none\n\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>少し古いですが以下のような記事がありました。\u003C/p>\n\u003Cp>\u003Ca href=\"https://lealog.hateblo.jp/entry/2015/02/19/124748\">html { touch-action: none; } に潜む罠\u003C/a>\u003C/p>\n\u003Cp>動作確認はしていないですが記事内で触れられている\u003Ccode>manipulation\u003C/code>を使う方が良さそうな気がしています。\u003C/p>\n\u003Cp>タッチ操作は奥が深い。。\u003C/p>",{"headings":1894,"localImagePaths":1900,"remoteImagePaths":1901,"frontmatter":1885,"imagePaths":1902},[1895,1897],{"depth":29,"slug":1896,"text":1896},"touch-action",{"depth":29,"slug":1898,"text":1899},"touch-action-none","touch-action: none",[],[],[],"2021/1211.md","2021/1212",{"id":1904,"data":1906,"body":1909,"filePath":1910,"digest":1911,"rendered":1912,"legacyId":1931},{"title":1907,"publishDate":1908},"今年読んだ絵本で良かったやつ","2021-12-12","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の12日目の記事です。\n\n息子と絵本を結構読んでいるがその中で面白かったものを紹介します。\n\n### おへそがえるごんシリーズ\n\n[おへそがえる・ごんセット（3冊） (福音館創作童話シリーズ) ](https://www.amazon.co.jp/%E3%81%8A%E3%81%B8%E3%81%9D%E3%81%8C%E3%81%88%E3%82%8B%E3%83%BB%E3%81%94%E3%82%93-%E5%85%A83%E5%B7%BB-%E8%B5%A4%E7%BE%BD%E6%9C%AB%E5%90%89/dp/4834041824/)\n\n三部作。1冊100ページぐらいありますが、1ページの文字の量は一言二言なのでスラスラ読めば1冊10分程度で読めます。表紙の絵から察するように「鳥獣戯画」のような絵のタッチになっています。おへそを隠しているかえるのごんにはおへそから不思議な力を出すことができ様々な悪いやつを懲らしめていくお話です。ストーリーも面白いです。\n\n### アレクサンダとぜんまいねずみ\n\n[アレクサンダとぜんまいねずみ](https://www.amazon.co.jp/%E3%82%A2%E3%83%AC%E3%82%AF%E3%82%B5%E3%83%B3%E3%83%80%E3%81%A8%E3%81%9C%E3%82%93%E3%81%BE%E3%81%84%E3%81%AD%E3%81%9A%E3%81%BF%E2%80%95%E3%81%A8%E3%82%82%E3%81%A0%E3%81%A1%E3%82%92%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F%E3%81%AD%E3%81%9A%E3%81%BF%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97-%E3%83%AC%E3%82%AA%E3%83%BB%E3%83%AC%E3%82%AA%E3%83%8B/dp/4769020058)\n\n巨匠レオ・レオニの名作。一言でいうと元祖トイストーリーですね。とても心が温める話です。\n\n### さかなはさかな\n\n[さかなはさかな―かえるのまねしたさかなのはなし](https://www.amazon.co.jp/%E3%81%95%E3%81%8B%E3%81%AA%E3%81%AF%E3%81%95%E3%81%8B%E3%81%AA%E2%80%95%E3%81%8B%E3%81%88%E3%82%8B%E3%81%AE%E3%81%BE%E3%81%AD%E3%81%97%E3%81%9F%E3%81%95%E3%81%8B%E3%81%AA%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97-%E3%83%AC%E3%82%AA%E3%83%BB%E3%83%AC%E3%82%AA%E3%83%8B/dp/476902004X)\n\nこれもレオ・レオニ。最後さかなが地上に出てしまい息ができずに助けを求めている時の絵が、いい味出ています。（ちょっと怖い）\n\n### どんぐりむらのぼうしやさん\n\n[どんぐりむらのぼうしやさん](https://www.amazon.co.jp/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%80%E3%82%89%E3%81%AE%E3%81%BC%E3%81%86%E3%81%97%E3%82%84%E3%81%95%E3%82%93-%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%80%E3%82%89%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E3%81%AA%E3%81%8B%E3%82%84-%E3%81%BF%E3%82%8F/dp/4052032454/)\n\nどんぐりむらシリーズの中の1つ。帽子が売れるようになるにはどうしたら良いのか。かわいいどんぐりたちが奮闘するお話。\n\n### さつまのおいも\n\n[さつまのおいも](https://www.amazon.co.jp/%E3%81%95%E3%81%A4%E3%81%BE%E3%81%AE%E3%81%8A%E3%81%84%E3%82%82-%E3%83%94%E3%83%BC%E3%83%9E%E3%83%B3%E6%9D%91%E3%81%AE%E7%B5%B5%E6%9C%AC%E3%81%9F%E3%81%A1-%E4%B8%AD%E5%B7%9D-%E3%81%B2%E3%82%8D%E3%81%9F%E3%81%8B/dp/4494005630/)\n\n息子がおいも好きなのもあるが最後のおならのシーンは笑います。\n\n### でんしゃのつくりかた\n\n[でんしゃのひみつシリーズ でんしゃのつくりかた](https://www.amazon.co.jp/%E3%81%A7%E3%82%93%E3%81%97%E3%82%83%E3%81%AE%E3%81%B2%E3%81%BF%E3%81%A4%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E3%81%A7%E3%82%93%E3%81%97%E3%82%83%E3%81%AE%E3%81%A4%E3%81%8F%E3%82%8A%E3%81%8B%E3%81%9F-%E5%AD%A6%E7%BF%92%E3%83%BB%E9%89%84%E9%81%93%E3%81%AE%E7%B5%B5%E6%9C%AC-%E3%81%93%E3%81%A9%E3%82%82%E3%81%AE%E3%81%BB%E3%82%93-%E3%82%A4%E3%82%BF%E3%83%AB/dp/433000321X/)\n\n息子が電車好きなので、購入。普通に読んでもいいが、所々に詳細な説明が書いてあり、電車が完成するまでの過程を知れるいい絵本です。\n\n\n来年もいい絵本に出会いたいものです。","src/content/blog/2021/1212.md","7ccb4e23e8dc1f92",{"html":1913,"metadata":1914},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の12日目の記事です。\u003C/p>\n\u003Cp>息子と絵本を結構読んでいるがその中で面白かったものを紹介します。\u003C/p>\n\u003Ch3 id=\"おへそがえるごんシリーズ\">おへそがえるごんシリーズ\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E3%81%8A%E3%81%B8%E3%81%9D%E3%81%8C%E3%81%88%E3%82%8B%E3%83%BB%E3%81%94%E3%82%93-%E5%85%A83%E5%B7%BB-%E8%B5%A4%E7%BE%BD%E6%9C%AB%E5%90%89/dp/4834041824/\">おへそがえる・ごんセット（3冊） (福音館創作童話シリーズ) \u003C/a>\u003C/p>\n\u003Cp>三部作。1冊100ページぐらいありますが、1ページの文字の量は一言二言なのでスラスラ読めば1冊10分程度で読めます。表紙の絵から察するように「鳥獣戯画」のような絵のタッチになっています。おへそを隠しているかえるのごんにはおへそから不思議な力を出すことができ様々な悪いやつを懲らしめていくお話です。ストーリーも面白いです。\u003C/p>\n\u003Ch3 id=\"アレクサンダとぜんまいねずみ\">アレクサンダとぜんまいねずみ\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E3%82%A2%E3%83%AC%E3%82%AF%E3%82%B5%E3%83%B3%E3%83%80%E3%81%A8%E3%81%9C%E3%82%93%E3%81%BE%E3%81%84%E3%81%AD%E3%81%9A%E3%81%BF%E2%80%95%E3%81%A8%E3%82%82%E3%81%A0%E3%81%A1%E3%82%92%E3%81%BF%E3%81%A4%E3%81%91%E3%81%9F%E3%81%AD%E3%81%9A%E3%81%BF%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97-%E3%83%AC%E3%82%AA%E3%83%BB%E3%83%AC%E3%82%AA%E3%83%8B/dp/4769020058\">アレクサンダとぜんまいねずみ\u003C/a>\u003C/p>\n\u003Cp>巨匠レオ・レオニの名作。一言でいうと元祖トイストーリーですね。とても心が温める話です。\u003C/p>\n\u003Ch3 id=\"さかなはさかな\">さかなはさかな\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E3%81%95%E3%81%8B%E3%81%AA%E3%81%AF%E3%81%95%E3%81%8B%E3%81%AA%E2%80%95%E3%81%8B%E3%81%88%E3%82%8B%E3%81%AE%E3%81%BE%E3%81%AD%E3%81%97%E3%81%9F%E3%81%95%E3%81%8B%E3%81%AA%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97-%E3%83%AC%E3%82%AA%E3%83%BB%E3%83%AC%E3%82%AA%E3%83%8B/dp/476902004X\">さかなはさかな―かえるのまねしたさかなのはなし\u003C/a>\u003C/p>\n\u003Cp>これもレオ・レオニ。最後さかなが地上に出てしまい息ができずに助けを求めている時の絵が、いい味出ています。（ちょっと怖い）\u003C/p>\n\u003Ch3 id=\"どんぐりむらのぼうしやさん\">どんぐりむらのぼうしやさん\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%80%E3%82%89%E3%81%AE%E3%81%BC%E3%81%86%E3%81%97%E3%82%84%E3%81%95%E3%82%93-%E3%81%A9%E3%82%93%E3%81%90%E3%82%8A%E3%82%80%E3%82%89%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E3%81%AA%E3%81%8B%E3%82%84-%E3%81%BF%E3%82%8F/dp/4052032454/\">どんぐりむらのぼうしやさん\u003C/a>\u003C/p>\n\u003Cp>どんぐりむらシリーズの中の1つ。帽子が売れるようになるにはどうしたら良いのか。かわいいどんぐりたちが奮闘するお話。\u003C/p>\n\u003Ch3 id=\"さつまのおいも\">さつまのおいも\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E3%81%95%E3%81%A4%E3%81%BE%E3%81%AE%E3%81%8A%E3%81%84%E3%82%82-%E3%83%94%E3%83%BC%E3%83%9E%E3%83%B3%E6%9D%91%E3%81%AE%E7%B5%B5%E6%9C%AC%E3%81%9F%E3%81%A1-%E4%B8%AD%E5%B7%9D-%E3%81%B2%E3%82%8D%E3%81%9F%E3%81%8B/dp/4494005630/\">さつまのおいも\u003C/a>\u003C/p>\n\u003Cp>息子がおいも好きなのもあるが最後のおならのシーンは笑います。\u003C/p>\n\u003Ch3 id=\"でんしゃのつくりかた\">でんしゃのつくりかた\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E3%81%A7%E3%82%93%E3%81%97%E3%82%83%E3%81%AE%E3%81%B2%E3%81%BF%E3%81%A4%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E3%81%A7%E3%82%93%E3%81%97%E3%82%83%E3%81%AE%E3%81%A4%E3%81%8F%E3%82%8A%E3%81%8B%E3%81%9F-%E5%AD%A6%E7%BF%92%E3%83%BB%E9%89%84%E9%81%93%E3%81%AE%E7%B5%B5%E6%9C%AC-%E3%81%93%E3%81%A9%E3%82%82%E3%81%AE%E3%81%BB%E3%82%93-%E3%82%A4%E3%82%BF%E3%83%AB/dp/433000321X/\">でんしゃのひみつシリーズ でんしゃのつくりかた\u003C/a>\u003C/p>\n\u003Cp>息子が電車好きなので、購入。普通に読んでもいいが、所々に詳細な説明が書いてあり、電車が完成するまでの過程を知れるいい絵本です。\u003C/p>\n\u003Cp>来年もいい絵本に出会いたいものです。\u003C/p>",{"headings":1915,"localImagePaths":1928,"remoteImagePaths":1929,"frontmatter":1906,"imagePaths":1930},[1916,1918,1920,1922,1924,1926],{"depth":29,"slug":1917,"text":1917},"おへそがえるごんシリーズ",{"depth":29,"slug":1919,"text":1919},"アレクサンダとぜんまいねずみ",{"depth":29,"slug":1921,"text":1921},"さかなはさかな",{"depth":29,"slug":1923,"text":1923},"どんぐりむらのぼうしやさん",{"depth":29,"slug":1925,"text":1925},"さつまのおいも",{"depth":29,"slug":1927,"text":1927},"でんしゃのつくりかた",[],[],[],"2021/1212.md","2021/1213",{"id":1932,"data":1934,"body":1937,"filePath":1938,"digest":1939,"rendered":1940,"legacyId":1952},{"title":1935,"publishDate":1936},"The Velvet Underground(ドキュメンタリーをみた)","2021-12-13","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の13日目の記事です。\n\nAppleTVに3ヶ月だけ加入していてThe Velvet Undergroundのドキュメンタリーがあったのでみました。\n\n[The Velvet Underground](https://tv.apple.com/jp/movie/%E3%82%A6%E3%82%A7%E3%83%AB%E3%82%A6%E3%82%A7%E3%83%83%E3%83%88%E3%82%A2%E3%83%B3%E3%82%BF%E3%83%BC%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%88/umc.cmc.69ic79cvvy80epfhz5efdgjjd)\n\n\n### The Velvet Underground\n\n1964年に結成されたアメリカのロックバンドで、ヴェルヴェッツという略称でも呼ばれます。ただのロックバンドではなく、実験的な音楽を取り入れており個人的にはポストロックの原型と思っています。\n\n\n### ドキュメンタリーの感想\n\nヴェルヴェッツ、ビートルズ、ドアーズ、ピンク・フロイドは個人的に四天王と思うほど大好きなバンドなので絶対名作！と思って視聴しました。（結果名作でした。）ルー・リードの性格や、生い立ち、考え方とかは知っている部分があ多かったのですが、ジョン・ケイルはあまり知りませんでした。今回のドキュメンタリーであの即興音楽のルーツがドローン音と多音、倍音なのは初耳でした。フルクサスあたりのメンバー（ジョナス・メカスとかアンディー・ウォーホル）も当然出てきたりして、当時の貴重な映像なども見ることができ大変満足でした。映像の作りとしてはコラージュっぽい感じになっていて若干ダラダラしている部分があったかなと感じます。\n\nジョナサン・リッチマンのインタビューはとても良かった。ファンなら普通に楽しめる作品だと思います。","src/content/blog/2021/1213.md","60010c450fdbac87",{"html":1941,"metadata":1942},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の13日目の記事です。\u003C/p>\n\u003Cp>AppleTVに3ヶ月だけ加入していてThe Velvet Undergroundのドキュメンタリーがあったのでみました。\u003C/p>\n\u003Cp>\u003Ca href=\"https://tv.apple.com/jp/movie/%E3%82%A6%E3%82%A7%E3%83%AB%E3%82%A6%E3%82%A7%E3%83%83%E3%83%88%E3%82%A2%E3%83%B3%E3%82%BF%E3%83%BC%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%88/umc.cmc.69ic79cvvy80epfhz5efdgjjd\">The Velvet Underground\u003C/a>\u003C/p>\n\u003Ch3 id=\"the-velvet-underground\">The Velvet Underground\u003C/h3>\n\u003Cp>1964年に結成されたアメリカのロックバンドで、ヴェルヴェッツという略称でも呼ばれます。ただのロックバンドではなく、実験的な音楽を取り入れており個人的にはポストロックの原型と思っています。\u003C/p>\n\u003Ch3 id=\"ドキュメンタリーの感想\">ドキュメンタリーの感想\u003C/h3>\n\u003Cp>ヴェルヴェッツ、ビートルズ、ドアーズ、ピンク・フロイドは個人的に四天王と思うほど大好きなバンドなので絶対名作！と思って視聴しました。（結果名作でした。）ルー・リードの性格や、生い立ち、考え方とかは知っている部分があ多かったのですが、ジョン・ケイルはあまり知りませんでした。今回のドキュメンタリーであの即興音楽のルーツがドローン音と多音、倍音なのは初耳でした。フルクサスあたりのメンバー（ジョナス・メカスとかアンディー・ウォーホル）も当然出てきたりして、当時の貴重な映像なども見ることができ大変満足でした。映像の作りとしてはコラージュっぽい感じになっていて若干ダラダラしている部分があったかなと感じます。\u003C/p>\n\u003Cp>ジョナサン・リッチマンのインタビューはとても良かった。ファンなら普通に楽しめる作品だと思います。\u003C/p>",{"headings":1943,"localImagePaths":1949,"remoteImagePaths":1950,"frontmatter":1934,"imagePaths":1951},[1944,1947],{"depth":29,"slug":1945,"text":1946},"the-velvet-underground","The Velvet Underground",{"depth":29,"slug":1948,"text":1948},"ドキュメンタリーの感想",[],[],[],"2021/1213.md","2021/1214",{"id":1953,"data":1955,"body":1958,"filePath":1959,"digest":1960,"rendered":1961,"legacyId":1981},{"title":1956,"publishDate":1957},"サウナ振り返り","2021-12-14","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の14日目の記事です。\n\n正直言うと「池袋からまる」にほぼ入り浸っていたので紹介します。\n\n### 池袋からまる\n\n[池袋からまる](https://karumaru.jp/ikebukuro/)\n\nお一人様専用のサウナです。とはいえ知り合い同士で来ているお客さんもいますが、施設の中では原則会話禁止なので、話し声がうるさいとスタッフに普通に注意されます。\n\n### サウナの種類\n\n4種類あります\n\n- 岩サウナ\n  - 大人数入れるサウナです。80℃なので入りやすいサウナです。\n- ケロサウナ\n  - ロウリュが可能です。狭いため並ぶこともあります。個人的に4つの中で一番好きなサウナです。\n- 蒸サウナ\n  - 薬草の香りを楽しみながらサウナができます。50℃ほどなのでゆっくり楽しむサウナです。\n- 薪サウナ\n  - 薪ストーブサウナ。薪が割れる音がああ大好きなのでよく入ります。\n\nどれも良いのですが、岩サウナか薪サウナに入ることがほとんどです。\n\n### サウナ以外の設備\n\nロッカーは入り口の階にあります。大体スパのロッカーは、脱衣所にもあるケースがほとんどですがそうではなくて入り口付近にあります。自動ロッカーになっていてどのロッカーを使用しても大丈夫です。脱衣所にも着替え入れるロッカーあります。お風呂から出た後は、休憩所に行くことが多いですが、この休憩所が凄くてコワーキングスペースがあります。いつも人が多くて座れる可能性は低いですが、風呂上がりに仕事できちゃいます（したくないですが。）\n\n### サウナ仕草\n\n1. 10〜12分でサウナに入る\n2. 水風呂に入る（極端に冷たい水風呂は入らない）\n3. 外気浴10分\n4. 上記を3セットやる\n5. 終わったら炭酸湯で10分ぐらいつかる\n6. お風呂を出る\n\n\n### サウナ・スパ 健康アドバイザー\n\n今年取得しました。様々なブログがあるので割愛しますが、誰でも受かります。合格後は一部施設で割引になります。\n\n### 来年どうする\n\n- サウナ・スパプロフェッショナルの勉強\n- からまる以外の場所にも出向く（まだ行っていないサウナもあるので）","src/content/blog/2021/1214.md","74f526e74cc79a41",{"html":1962,"metadata":1963},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の14日目の記事です。\u003C/p>\n\u003Cp>正直言うと「池袋からまる」にほぼ入り浸っていたので紹介します。\u003C/p>\n\u003Ch3 id=\"池袋からまる\">池袋からまる\u003C/h3>\n\u003Cp>\u003Ca href=\"https://karumaru.jp/ikebukuro/\">池袋からまる\u003C/a>\u003C/p>\n\u003Cp>お一人様専用のサウナです。とはいえ知り合い同士で来ているお客さんもいますが、施設の中では原則会話禁止なので、話し声がうるさいとスタッフに普通に注意されます。\u003C/p>\n\u003Ch3 id=\"サウナの種類\">サウナの種類\u003C/h3>\n\u003Cp>4種類あります\u003C/p>\n\u003Cul>\n\u003Cli>岩サウナ\n\u003Cul>\n\u003Cli>大人数入れるサウナです。80℃なので入りやすいサウナです。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>ケロサウナ\n\u003Cul>\n\u003Cli>ロウリュが可能です。狭いため並ぶこともあります。個人的に4つの中で一番好きなサウナです。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>蒸サウナ\n\u003Cul>\n\u003Cli>薬草の香りを楽しみながらサウナができます。50℃ほどなのでゆっくり楽しむサウナです。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>薪サウナ\n\u003Cul>\n\u003Cli>薪ストーブサウナ。薪が割れる音がああ大好きなのでよく入ります。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>どれも良いのですが、岩サウナか薪サウナに入ることがほとんどです。\u003C/p>\n\u003Ch3 id=\"サウナ以外の設備\">サウナ以外の設備\u003C/h3>\n\u003Cp>ロッカーは入り口の階にあります。大体スパのロッカーは、脱衣所にもあるケースがほとんどですがそうではなくて入り口付近にあります。自動ロッカーになっていてどのロッカーを使用しても大丈夫です。脱衣所にも着替え入れるロッカーあります。お風呂から出た後は、休憩所に行くことが多いですが、この休憩所が凄くてコワーキングスペースがあります。いつも人が多くて座れる可能性は低いですが、風呂上がりに仕事できちゃいます（したくないですが。）\u003C/p>\n\u003Ch3 id=\"サウナ仕草\">サウナ仕草\u003C/h3>\n\u003Col>\n\u003Cli>10〜12分でサウナに入る\u003C/li>\n\u003Cli>水風呂に入る（極端に冷たい水風呂は入らない）\u003C/li>\n\u003Cli>外気浴10分\u003C/li>\n\u003Cli>上記を3セットやる\u003C/li>\n\u003Cli>終わったら炭酸湯で10分ぐらいつかる\u003C/li>\n\u003Cli>お風呂を出る\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"サウナスパ-健康アドバイザー\">サウナ・スパ 健康アドバイザー\u003C/h3>\n\u003Cp>今年取得しました。様々なブログがあるので割愛しますが、誰でも受かります。合格後は一部施設で割引になります。\u003C/p>\n\u003Ch3 id=\"来年どうする\">来年どうする\u003C/h3>\n\u003Cul>\n\u003Cli>サウナ・スパプロフェッショナルの勉強\u003C/li>\n\u003Cli>からまる以外の場所にも出向く（まだ行っていないサウナもあるので）\u003C/li>\n\u003C/ul>",{"headings":1964,"localImagePaths":1978,"remoteImagePaths":1979,"frontmatter":1955,"imagePaths":1980},[1965,1967,1969,1971,1973,1976],{"depth":29,"slug":1966,"text":1966},"池袋からまる",{"depth":29,"slug":1968,"text":1968},"サウナの種類",{"depth":29,"slug":1970,"text":1970},"サウナ以外の設備",{"depth":29,"slug":1972,"text":1972},"サウナ仕草",{"depth":29,"slug":1974,"text":1975},"サウナスパ-健康アドバイザー","サウナ・スパ 健康アドバイザー",{"depth":29,"slug":1977,"text":1977},"来年どうする",[],[],[],"2021/1214.md","2021/1215",{"id":1982,"data":1984,"body":1987,"filePath":1988,"digest":1989,"rendered":1990,"legacyId":2000},{"title":1985,"publishDate":1986},"［書評］脳のしくみとユーザー体験","2021-12-15","この記事は、[ryokatsu Advent Calendar 2021](https://adventar.org/calendars/7126)の15日目の記事です。\n\n[脳のしくみとユーザー体験](https://www.amazon.co.jp/%E8%84%B3%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF%E3%81%A8%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E4%BD%93%E9%A8%93-%E8%AA%8D%E7%9F%A5%E7%A7%91%E5%AD%A6%E8%80%85%E3%81%8C%E6%95%99%E3%81%88%E3%82%8B%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%AE%E6%88%90%E5%8A%9F%E6%B3%95%E5%89%87-%E3%82%B8%E3%83%A7%E3%83%B3%E3%83%BB%E3%82%A6%E3%82%A7%E3%82%A4%E3%83%AC%E3%83%B3/dp/4802512155/)を読みました。\n\nユーザーリサーチの初心者としておすすめの本という評判だったので購入。シックスマインドと呼ばれる脳の6つの認知プロセスからユーザーの体験を探りデザインしていこうという内容です。\n\n### シックスマインド\n\n視野、関心／空間認識／言語／記憶／意思決定／感情の6つの観点でユーザーが本当に考えていることを掘り下げていく。それぞれについては以下書籍内の図を参照します、\n\n![シックスマインド](/images/20211215.jpg)\n\n### 感想\n\n具体的なユースケースを辿りながらシックスマインドを意識してユーザー体験を設計していく内容になっているので、体系的にユーザーリサーチが学べたかなと思います。個人的には、本のタイトルにある「脳のしくみ」を見た時脳科学的な話しもあるかなと期待していたのですが、特にそういう訳ではありませんでした。\n\n書籍の中で、ユーザーインタビューが終わるとやりきった感が出てしまいそのままにしがちで、ちゃんとデータとして残すことが大事だと言っておりその通りだなと思ったのと、プロトタイプは粗い方がフィードバックを得やすいというのが知見になった。あえて白黒とかにすると更にいいとのこと。","src/content/blog/2021/1215.md","910b1a7661b6fd1b",{"html":1991,"metadata":1992},"\u003Cp>この記事は、\u003Ca href=\"https://adventar.org/calendars/7126\">ryokatsu Advent Calendar 2021\u003C/a>の15日目の記事です。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E8%84%B3%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF%E3%81%A8%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E4%BD%93%E9%A8%93-%E8%AA%8D%E7%9F%A5%E7%A7%91%E5%AD%A6%E8%80%85%E3%81%8C%E6%95%99%E3%81%88%E3%82%8B%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%81%AE%E6%88%90%E5%8A%9F%E6%B3%95%E5%89%87-%E3%82%B8%E3%83%A7%E3%83%B3%E3%83%BB%E3%82%A6%E3%82%A7%E3%82%A4%E3%83%AC%E3%83%B3/dp/4802512155/\">脳のしくみとユーザー体験\u003C/a>を読みました。\u003C/p>\n\u003Cp>ユーザーリサーチの初心者としておすすめの本という評判だったので購入。シックスマインドと呼ばれる脳の6つの認知プロセスからユーザーの体験を探りデザインしていこうという内容です。\u003C/p>\n\u003Ch3 id=\"シックスマインド\">シックスマインド\u003C/h3>\n\u003Cp>視野、関心／空間認識／言語／記憶／意思決定／感情の6つの観点でユーザーが本当に考えていることを掘り下げていく。それぞれについては以下書籍内の図を参照します、\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20211215.jpg\" alt=\"シックスマインド\">\u003C/p>\n\u003Ch3 id=\"感想\">感想\u003C/h3>\n\u003Cp>具体的なユースケースを辿りながらシックスマインドを意識してユーザー体験を設計していく内容になっているので、体系的にユーザーリサーチが学べたかなと思います。個人的には、本のタイトルにある「脳のしくみ」を見た時脳科学的な話しもあるかなと期待していたのですが、特にそういう訳ではありませんでした。\u003C/p>\n\u003Cp>書籍の中で、ユーザーインタビューが終わるとやりきった感が出てしまいそのままにしがちで、ちゃんとデータとして残すことが大事だと言っておりその通りだなと思ったのと、プロトタイプは粗い方がフィードバックを得やすいというのが知見になった。あえて白黒とかにすると更にいいとのこと。\u003C/p>",{"headings":1993,"localImagePaths":1997,"remoteImagePaths":1998,"frontmatter":1984,"imagePaths":1999},[1994,1996],{"depth":29,"slug":1995,"text":1995},"シックスマインド",{"depth":29,"slug":249,"text":249},[],[],[],"2021/1215.md","2022/0123",{"id":2001,"data":2003,"body":2006,"filePath":2007,"digest":2008,"rendered":2009,"legacyId":2032},{"title":2004,"publishDate":2005},"Googleのソフトウェアエンジニアリングを読んだ","2022-01-23","年末年始の休みに入ってから読みはじめてようやく読み終わりました。（一部読み飛ばした所あり）\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">年末年始に読書する本買った \u003Ca href=\"https://t.co/yTxEkbXWyH\">pic.twitter.com/yTxEkbXWyH\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1473656576238317569?ref_src=twsrc%5Etfw\">December 22, 2021\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n\n[Googleのソフトウェアエンジニアリング](https://www.oreilly.co.jp/books/9784873119656/)\n\n### Team Geek\n\n[Team Geek](https://www.oreilly.co.jp/books/9784873116303/)という名著があります。本書でもこのTeam Geekで出てくるHRTの概念について説明しつつ、Googleがチームで仕事するために心がけていることが詳細に書かれています。\n\n※自分も[いいチームとはどういう状態か。](http://localhost:8000/blog/2021/1210/)というブログを書いていますので興味があれば読んでいただけると嬉しいです。\n\n### エンジニアリングマネージャとテックリード\n\nこの2つのロールは、双方協力する必要があると書いていました、エンジニアリングマネージャーはやはりピープルマネジメントをすることが主な仕事らしくGoogleでも同じなんだなと思いました。\n\n### スタイルガイド（ドキュメント）\nドキュメントは「書くのが簡単である」点より「読むのが簡単である」方が重要と書いてあってまさにそのとおりだなと思いました。どうしてもマークダウンで簡単に書けるとかに考えが行きがちになってしまうことがあって、これはもう少し深堀りすると「エンジニアはドキュメントを書きたがらない」という問題があるなと思っていて、できれば簡潔に済ませたいという心情がありそう。。\n\nドキュメンテーションの章で、Google内のドキュメントは、独自のWikiであるg3docというもので運用しているらしくどういう感じのツールなのか実際に触ってみたい。\n\n### テスト\n\nとにかくユニットテストが大事とのこと。Google社内でも最初はテスト文化がなかったと書かれていて、技術者間での情報共有として有名な[トイレに張り紙をする](https://research.google/pubs/pub47861/)を行ったことで、文化が少し根付いたそう。\n\n特に自動化の話は共感しかなかった。Googleに限った話しではないないですが、月に1件しかバグを出さないエンジニアでも、100人いれば1営業日に5件のバグが出ることを考えると自動化するのは当たり前と書いてあってまさにそのとおりだなと感じました。\n\n\n### コードは債務であり資産ではない\n\nリファクタリングの章だったかでこの言葉が出てきて名言だと思いました。コードにはコストが掛かるのは当然で、コード自体には価値はなくコードが提供する機能自体に価値があるので定期的なリファクタリングは重要ですね。\n\n### Googleの様々なツール\n\n本書は、エンジニアリングのこと以外にもGoogle内でエンジニアリングをするにあたり独自のツールを使って運用しているユースケースを紹介しています。色々面白いツールがあるなと思いつつ特に気になったの、はGoogleでのソースコード管理は、Piperというツールを使用しているらしく（chromiumなどの大規模ななもの以外）1営業日あたりに手動、自動合わせて6~7万回のコミットがあると書いてあって桁が違いすぎて驚きました。（[Piperに関する論文](https://dl.acm.org/doi/pdf/10.1145/2854146)）\n\n### 全体の感想\n\n正直最初は、どうせGoogleという大規模がやっていることだからな〜みたいな感覚で読んでいましたが、普段から自分が思っていること、感じていることが正しいかどうかを答え合わせてして確認するような書籍だなと思いました。おそらくエンジニアリングで必要な領域はほぼカバーされているので網羅的に読むのもいいですし、特定の分野の章だけ読むのもありだと思いました。（例えば継続的インテグレーションだけなど）\n\n一番いいのは、章ごとに担当を決めて輪読会とかやると面白そう。","src/content/blog/2022/0123.md","0d1bb1ca0b09db29",{"html":2010,"metadata":2011},"\u003Cp>年末年始の休みに入ってから読みはじめてようやく読み終わりました。（一部読み飛ばした所あり）\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">年末年始に読書する本買った \u003Ca href=\"https://t.co/yTxEkbXWyH\">pic.twitter.com/yTxEkbXWyH\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1473656576238317569?ref_src=twsrc%5Etfw\">December 22, 2021\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>\u003Ca href=\"https://www.oreilly.co.jp/books/9784873119656/\">Googleのソフトウェアエンジニアリング\u003C/a>\u003C/p>\n\u003Ch3 id=\"team-geek\">Team Geek\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.oreilly.co.jp/books/9784873116303/\">Team Geek\u003C/a>という名著があります。本書でもこのTeam Geekで出てくるHRTの概念について説明しつつ、Googleがチームで仕事するために心がけていることが詳細に書かれています。\u003C/p>\n\u003Cp>※自分も\u003Ca href=\"http://localhost:8000/blog/2021/1210/\">いいチームとはどういう状態か。\u003C/a>というブログを書いていますので興味があれば読んでいただけると嬉しいです。\u003C/p>\n\u003Ch3 id=\"エンジニアリングマネージャとテックリード\">エンジニアリングマネージャとテックリード\u003C/h3>\n\u003Cp>この2つのロールは、双方協力する必要があると書いていました、エンジニアリングマネージャーはやはりピープルマネジメントをすることが主な仕事らしくGoogleでも同じなんだなと思いました。\u003C/p>\n\u003Ch3 id=\"スタイルガイドドキュメント\">スタイルガイド（ドキュメント）\u003C/h3>\n\u003Cp>ドキュメントは「書くのが簡単である」点より「読むのが簡単である」方が重要と書いてあってまさにそのとおりだなと思いました。どうしてもマークダウンで簡単に書けるとかに考えが行きがちになってしまうことがあって、これはもう少し深堀りすると「エンジニアはドキュメントを書きたがらない」という問題があるなと思っていて、できれば簡潔に済ませたいという心情がありそう。。\u003C/p>\n\u003Cp>ドキュメンテーションの章で、Google内のドキュメントは、独自のWikiであるg3docというもので運用しているらしくどういう感じのツールなのか実際に触ってみたい。\u003C/p>\n\u003Ch3 id=\"テスト\">テスト\u003C/h3>\n\u003Cp>とにかくユニットテストが大事とのこと。Google社内でも最初はテスト文化がなかったと書かれていて、技術者間での情報共有として有名な\u003Ca href=\"https://research.google/pubs/pub47861/\">トイレに張り紙をする\u003C/a>を行ったことで、文化が少し根付いたそう。\u003C/p>\n\u003Cp>特に自動化の話は共感しかなかった。Googleに限った話しではないないですが、月に1件しかバグを出さないエンジニアでも、100人いれば1営業日に5件のバグが出ることを考えると自動化するのは当たり前と書いてあってまさにそのとおりだなと感じました。\u003C/p>\n\u003Ch3 id=\"コードは債務であり資産ではない\">コードは債務であり資産ではない\u003C/h3>\n\u003Cp>リファクタリングの章だったかでこの言葉が出てきて名言だと思いました。コードにはコストが掛かるのは当然で、コード自体には価値はなくコードが提供する機能自体に価値があるので定期的なリファクタリングは重要ですね。\u003C/p>\n\u003Ch3 id=\"googleの様々なツール\">Googleの様々なツール\u003C/h3>\n\u003Cp>本書は、エンジニアリングのこと以外にもGoogle内でエンジニアリングをするにあたり独自のツールを使って運用しているユースケースを紹介しています。色々面白いツールがあるなと思いつつ特に気になったの、はGoogleでのソースコード管理は、Piperというツールを使用しているらしく（chromiumなどの大規模ななもの以外）1営業日あたりに手動、自動合わせて6~7万回のコミットがあると書いてあって桁が違いすぎて驚きました。（\u003Ca href=\"https://dl.acm.org/doi/pdf/10.1145/2854146\">Piperに関する論文\u003C/a>）\u003C/p>\n\u003Ch3 id=\"全体の感想\">全体の感想\u003C/h3>\n\u003Cp>正直最初は、どうせGoogleという大規模がやっていることだからな〜みたいな感覚で読んでいましたが、普段から自分が思っていること、感じていることが正しいかどうかを答え合わせてして確認するような書籍だなと思いました。おそらくエンジニアリングで必要な領域はほぼカバーされているので網羅的に読むのもいいですし、特定の分野の章だけ読むのもありだと思いました。（例えば継続的インテグレーションだけなど）\u003C/p>\n\u003Cp>一番いいのは、章ごとに担当を決めて輪読会とかやると面白そう。\u003C/p>",{"headings":2012,"localImagePaths":2029,"remoteImagePaths":2030,"frontmatter":2003,"imagePaths":2031},[2013,2016,2018,2021,2023,2025,2028],{"depth":29,"slug":2014,"text":2015},"team-geek","Team Geek",{"depth":29,"slug":2017,"text":2017},"エンジニアリングマネージャとテックリード",{"depth":29,"slug":2019,"text":2020},"スタイルガイドドキュメント","スタイルガイド（ドキュメント）",{"depth":29,"slug":2022,"text":2022},"テスト",{"depth":29,"slug":2024,"text":2024},"コードは債務であり資産ではない",{"depth":29,"slug":2026,"text":2027},"googleの様々なツール","Googleの様々なツール",{"depth":29,"slug":815,"text":815},[],[],[],"2022/0123.md","2022/0117",{"id":2033,"data":2035,"body":2039,"filePath":2040,"digest":2041,"rendered":2042,"legacyId":2058},{"title":2036,"publishDate":2037,"updatedDate":2038},"プログラミングの基礎を読み終えた","2022-01-17","2022-01-21","ずっと途中まで読んで放置していたが写経しながらやっと読み終わりました。\n\n[プログラミングの基礎](https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E5%9F%BA%E7%A4%8E-Computer-Science-Library-%E6%B5%85%E4%BA%95/dp/4781911609)\n\n写経した内容は以下のレポジトリにまとめました。\n\n[ocaml-learn](https://github.com/ryokatsuse/ocaml-learn)\n\n\n### きっかけ\n関数型言語ならこの本オススメと知り合いから教えてもらったので少しずつ読み始めました。\n\n### どういう本？\nOcamlを使ってその名の通りプログラムの基礎を学んでいきます。\n\n- データ構造や再帰、パターンマッチ、木構造などを学ぶ\n- メトロネットワーク最短路問題を解くプログラムを実装する\n- プログラミングを作る際に考えるデザインレシピを学ぶ\n- 関数型のプログラミングスタイルを学ぶ\n\n自分は、メトロネットワーク最短路問題を解いたり、解かなかったりしました。メトロネットワーク以外にも随所に問題があり自分でプログラムを作ることができます。\n\n### 読んだ感想\n\n自分は、本に書いてあった内容を写経して説明を読むスタイルで進めました。その中でも再帰についてはとても理解が深まりました。今ままで何となく苦手意識があったのですが、デザインレシピに沿って考えることで自分が実装すると時も人のコードをレビューするときも少しばかり苦手意識がなくなったと感じます。普段JavaScriptを使用しているとmapとかを平気で使っていますがアルゴリズムを理解できると高階関数って凄いんだなと思いました。\n\nまたパターンマッチについてもほぼ初見でしたが、はやくJavaScriptにも欲しい仕様だなと感じました。（今[Stage1](https://github.com/tc39/proposal-pattern-matching)だけど仕様は検討されている）\n\n### Ocamlについて\n\n最初に構文が学べるので書き方は知識ゼロでいけました。ただ問題を解く時は、普段使い慣れたJavaScriptよりは明らかに時間はかかりました。正直未だに慣れていない。。ただ言語としてとても面白かったのでもう少し勉強したいなという気持ちはありました。次は[プログラミング言語の基礎概念](https://www.amazon.co.jp/dp/4781912850/ref=cm_sw_r_tw_dp_XF79KR4Y9Z2YHJWW4W7Y?_encoding=UTF8&psc=1)をどこかのタイミングでやってみたい。","src/content/blog/2022/0117.md","3e0e37b25dc36270",{"html":2043,"metadata":2044},"\u003Cp>ずっと途中まで読んで放置していたが写経しながらやっと読み終わりました。\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AE%E5%9F%BA%E7%A4%8E-Computer-Science-Library-%E6%B5%85%E4%BA%95/dp/4781911609\">プログラミングの基礎\u003C/a>\u003C/p>\n\u003Cp>写経した内容は以下のレポジトリにまとめました。\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/ryokatsuse/ocaml-learn\">ocaml-learn\u003C/a>\u003C/p>\n\u003Ch3 id=\"きっかけ\">きっかけ\u003C/h3>\n\u003Cp>関数型言語ならこの本オススメと知り合いから教えてもらったので少しずつ読み始めました。\u003C/p>\n\u003Ch3 id=\"どういう本\">どういう本？\u003C/h3>\n\u003Cp>Ocamlを使ってその名の通りプログラムの基礎を学んでいきます。\u003C/p>\n\u003Cul>\n\u003Cli>データ構造や再帰、パターンマッチ、木構造などを学ぶ\u003C/li>\n\u003Cli>メトロネットワーク最短路問題を解くプログラムを実装する\u003C/li>\n\u003Cli>プログラミングを作る際に考えるデザインレシピを学ぶ\u003C/li>\n\u003Cli>関数型のプログラミングスタイルを学ぶ\u003C/li>\n\u003C/ul>\n\u003Cp>自分は、メトロネットワーク最短路問題を解いたり、解かなかったりしました。メトロネットワーク以外にも随所に問題があり自分でプログラムを作ることができます。\u003C/p>\n\u003Ch3 id=\"読んだ感想\">読んだ感想\u003C/h3>\n\u003Cp>自分は、本に書いてあった内容を写経して説明を読むスタイルで進めました。その中でも再帰についてはとても理解が深まりました。今ままで何となく苦手意識があったのですが、デザインレシピに沿って考えることで自分が実装すると時も人のコードをレビューするときも少しばかり苦手意識がなくなったと感じます。普段JavaScriptを使用しているとmapとかを平気で使っていますがアルゴリズムを理解できると高階関数って凄いんだなと思いました。\u003C/p>\n\u003Cp>またパターンマッチについてもほぼ初見でしたが、はやくJavaScriptにも欲しい仕様だなと感じました。（今\u003Ca href=\"https://github.com/tc39/proposal-pattern-matching\">Stage1\u003C/a>だけど仕様は検討されている）\u003C/p>\n\u003Ch3 id=\"ocamlについて\">Ocamlについて\u003C/h3>\n\u003Cp>最初に構文が学べるので書き方は知識ゼロでいけました。ただ問題を解く時は、普段使い慣れたJavaScriptよりは明らかに時間はかかりました。正直未だに慣れていない。。ただ言語としてとても面白かったのでもう少し勉強したいなという気持ちはありました。次は\u003Ca href=\"https://www.amazon.co.jp/dp/4781912850/ref=cm_sw_r_tw_dp_XF79KR4Y9Z2YHJWW4W7Y?_encoding=UTF8&#x26;psc=1\">プログラミング言語の基礎概念\u003C/a>をどこかのタイミングでやってみたい。\u003C/p>",{"headings":2045,"localImagePaths":2055,"remoteImagePaths":2056,"frontmatter":2035,"imagePaths":2057},[2046,2047,2050,2052],{"depth":29,"slug":1659,"text":1659},{"depth":29,"slug":2048,"text":2049},"どういう本","どういう本？",{"depth":29,"slug":2051,"text":2051},"読んだ感想",{"depth":29,"slug":2053,"text":2054},"ocamlについて","Ocamlについて",[],[],[],"2022/0117.md","2022/0401",{"id":2059,"data":2061,"body":2064,"filePath":2065,"digest":2066,"rendered":2067,"legacyId":2088},{"title":2062,"publishDate":2063},"2022年3月の振り返り","2022-04-01","### 3月どうだった\n仕事がちょっと忙しい感じだった。何かを調整したり、コード書いたり、MTGしたりみたいな感じでスイッチングコストが高めでした。特に身体の調子が悪くなることはなかったけど、余裕がなかった感じがします。その反動か仕事、家事育児以外は全ての時間をELDEN RINGに捧げました。\n\n### 技術系\n\n![2022年3月の草](/images/gitthub202203.png)\n\n3/16にプッシュし忘れで、やってしまいました。連続草生やしはここで終わりになってしまった。。この日以外は、必ず何かしらcommitしています。ただ中には微調整しただけのものもあったりするので、LeetCodeを再開しようかなと思います。\n\n本業でここ最近[Video.js](https://videojs.com/)を使った動画プレイヤーの開発をしています。最初は全く初見だったのですが、今ではだいぶ理解が深まりどんなコンポーネント構成になっていて、どんなイベントが紐付いているかなどかなり詳しくなりました。その中でバグっぽいのを見つけてもしやOSSコントリビュートのチャンスか？という気持ちになり、時間があればプルリクエストを送ってみたいと思います。\n\n3月も色々フロンエンド界隈は、新しい技術とか動きが結構あって素振りしてみたいものが多かったです。一番気になったのは[Ladle](https://github.com/tajo/ladle)というStorybookの代替のようなものです。これは時間があったら試してみたいと思います。\n\n大学でC言語を学ぶので少しずつ書き始めました。書いてみて思うことは、高階関数ってすごい便利なんだな！ということでした。mapとかfilterとか普段当たり前に使っているものが、Cにはないのでちゃんと自作する（ライブラリとかはあるけど）のでそのあたりで実はこういうアルゴリズムで構成されていたのかという気づきがあり個人的には面白いです。\n\n\n### プライベート\n\n息子の幼稚園の入園式に着る服がないことに気づき急遽ジャケパンを購入しました。また普段靴というものを履かずに年中クロックスを履いて生活しているので、靴も持っていなく急遽購入しました。試着とかも面倒でネットで数年ぶりに服を購入することになりましたが、たまには服を買うのも悪くないなと感じました。\n\n4月から社会人大学生になるので、教科書などが届きました。チラ見してみたけど、やっぱり教科書って難しく書かれているので、さっぱり分からん状態になり今から不安です。でもずっと学んでみたかったことをようやく学べるんだなと思うと楽しみでもあるので4月から楽しみです。\n\nELDEN RINGをひたすらやっていてエルデの王にはなりました！このままトロコンを目指して頑張っています。王になるちょっと前に世界を色々探索してから挑んだのですが、さすがにここまで来たら攻略サイトを見てもいいでしょ！ということで見てみるとNPCイベントやっていないのが多くて慌てて実施しました。自分の探索力のなさを痛感しました。\n\n### 読書\n\n読み終わった本\n\n- 試して理解Linuxのしくみ\n  - とても良い本でした。1ミリぐらいLinuxのことがわかるようになりましたww\n\n- チームトポロジー　価値あるソフトウェアをすばやく届ける適応型組織設計\n  - これはブログに書こうかなとも思ったのですが、書いてあることは特に新しいことがない印象でした。ただ考え方自体はとても良くチームトポロジーを読んだ人たちと色々と議論してみたいと思える一冊でした。\n\n読書中\n\n- 並行プログラミング入門\n  - 多分時間がめちゃくちゃ掛かりますが、写経しながらゆっくり読んでいます。Rustのコードはちょっと理解がなさすぎて全然分からんってなりそうなのでRustの初心者本を一冊買おうかと思っています。\n\n\n### 健康\n\n睡眠時間は少し2月と比べて減りましたが、最低でも6時間寝れていました。これを7時間に戻すことを目標にしていきたい。\n\n### アウトプット\n\n特になし。\n\n\n\n### 4月の目標\n- 仕事を頑張りすぎない！","src/content/blog/2022/0401.md","ed5d905d334855b1",{"html":2068,"metadata":2069},"\u003Ch3 id=\"3月どうだった\">3月どうだった\u003C/h3>\n\u003Cp>仕事がちょっと忙しい感じだった。何かを調整したり、コード書いたり、MTGしたりみたいな感じでスイッチングコストが高めでした。特に身体の調子が悪くなることはなかったけど、余裕がなかった感じがします。その反動か仕事、家事育児以外は全ての時間をELDEN RINGに捧げました。\u003C/p>\n\u003Ch3 id=\"技術系\">技術系\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/gitthub202203.png\" alt=\"2022年3月の草\">\u003C/p>\n\u003Cp>3/16にプッシュし忘れで、やってしまいました。連続草生やしはここで終わりになってしまった。。この日以外は、必ず何かしらcommitしています。ただ中には微調整しただけのものもあったりするので、LeetCodeを再開しようかなと思います。\u003C/p>\n\u003Cp>本業でここ最近\u003Ca href=\"https://videojs.com/\">Video.js\u003C/a>を使った動画プレイヤーの開発をしています。最初は全く初見だったのですが、今ではだいぶ理解が深まりどんなコンポーネント構成になっていて、どんなイベントが紐付いているかなどかなり詳しくなりました。その中でバグっぽいのを見つけてもしやOSSコントリビュートのチャンスか？という気持ちになり、時間があればプルリクエストを送ってみたいと思います。\u003C/p>\n\u003Cp>3月も色々フロンエンド界隈は、新しい技術とか動きが結構あって素振りしてみたいものが多かったです。一番気になったのは\u003Ca href=\"https://github.com/tajo/ladle\">Ladle\u003C/a>というStorybookの代替のようなものです。これは時間があったら試してみたいと思います。\u003C/p>\n\u003Cp>大学でC言語を学ぶので少しずつ書き始めました。書いてみて思うことは、高階関数ってすごい便利なんだな！ということでした。mapとかfilterとか普段当たり前に使っているものが、Cにはないのでちゃんと自作する（ライブラリとかはあるけど）のでそのあたりで実はこういうアルゴリズムで構成されていたのかという気づきがあり個人的には面白いです。\u003C/p>\n\u003Ch3 id=\"プライベート\">プライベート\u003C/h3>\n\u003Cp>息子の幼稚園の入園式に着る服がないことに気づき急遽ジャケパンを購入しました。また普段靴というものを履かずに年中クロックスを履いて生活しているので、靴も持っていなく急遽購入しました。試着とかも面倒でネットで数年ぶりに服を購入することになりましたが、たまには服を買うのも悪くないなと感じました。\u003C/p>\n\u003Cp>4月から社会人大学生になるので、教科書などが届きました。チラ見してみたけど、やっぱり教科書って難しく書かれているので、さっぱり分からん状態になり今から不安です。でもずっと学んでみたかったことをようやく学べるんだなと思うと楽しみでもあるので4月から楽しみです。\u003C/p>\n\u003Cp>ELDEN RINGをひたすらやっていてエルデの王にはなりました！このままトロコンを目指して頑張っています。王になるちょっと前に世界を色々探索してから挑んだのですが、さすがにここまで来たら攻略サイトを見てもいいでしょ！ということで見てみるとNPCイベントやっていないのが多くて慌てて実施しました。自分の探索力のなさを痛感しました。\u003C/p>\n\u003Ch3 id=\"読書\">読書\u003C/h3>\n\u003Cp>読み終わった本\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>試して理解Linuxのしくみ\u003C/p>\n\u003Cul>\n\u003Cli>とても良い本でした。1ミリぐらいLinuxのことがわかるようになりましたww\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>チームトポロジー　価値あるソフトウェアをすばやく届ける適応型組織設計\u003C/p>\n\u003Cul>\n\u003Cli>これはブログに書こうかなとも思ったのですが、書いてあることは特に新しいことがない印象でした。ただ考え方自体はとても良くチームトポロジーを読んだ人たちと色々と議論してみたいと思える一冊でした。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>読書中\u003C/p>\n\u003Cul>\n\u003Cli>並行プログラミング入門\n\u003Cul>\n\u003Cli>多分時間がめちゃくちゃ掛かりますが、写経しながらゆっくり読んでいます。Rustのコードはちょっと理解がなさすぎて全然分からんってなりそうなのでRustの初心者本を一冊買おうかと思っています。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"健康\">健康\u003C/h3>\n\u003Cp>睡眠時間は少し2月と比べて減りましたが、最低でも6時間寝れていました。これを7時間に戻すことを目標にしていきたい。\u003C/p>\n\u003Ch3 id=\"アウトプット\">アウトプット\u003C/h3>\n\u003Cp>特になし。\u003C/p>\n\u003Ch3 id=\"4月の目標\">4月の目標\u003C/h3>\n\u003Cul>\n\u003Cli>仕事を頑張りすぎない！\u003C/li>\n\u003C/ul>",{"headings":2070,"localImagePaths":2085,"remoteImagePaths":2086,"frontmatter":2061,"imagePaths":2087},[2071,2073,2075,2077,2079,2081,2083],{"depth":29,"slug":2072,"text":2072},"3月どうだった",{"depth":29,"slug":2074,"text":2074},"技術系",{"depth":29,"slug":2076,"text":2076},"プライベート",{"depth":29,"slug":2078,"text":2078},"読書",{"depth":29,"slug":2080,"text":2080},"健康",{"depth":29,"slug":2082,"text":2082},"アウトプット",{"depth":29,"slug":2084,"text":2084},"4月の目標",[],[],[],"2022/0401.md","2022/0302",{"id":2089,"data":2091,"body":2094,"filePath":2095,"digest":2096,"rendered":2097,"legacyId":2113},{"title":2092,"publishDate":2093},"2022年2月の振り返り","2022-03-02","### 2月どうだった\n\n正直いうとこれと言ってイベントがなく、とにかくあっという間に過ぎ去ってしまったなという感じでした。体調が悪かったとかではなかったけど、仕事のスイッチングコストが高くて、集中力があまり続かなかったなと反省する月でした。\n\n### 技術系\n\n![2022年2月の草](/images/20220302_github.png)\n\nGitHubの草生やし運動は続いています。がしかし個人のお勉強とか開発はほとんどできていないのでほぼ仕事へのコントリビュートになっています。これはアカンです。。試したいことは沢山スタックしてあるのでちょっとずつやっていかなきゃと思っています。3月は何か良い成果を出せるようにしたいです。\n\n仕事の話になりますが、今月はいつもやっているReact、Next.jsとは違って素のJavaScriptを触る機会（技術検証）をすることが多く、久しぶりにDOMの生成とかEventListenerなどを扱い何か懐かしいと感じました。とあるビデオライブラリがあり全くの初見でしたが触っていく内に少しお友達になれた気がします。\n\n動画にチャプターを表示する際に[VVTファイル](https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API)を使うことや、[trackタグ](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track)などについて詳しくなりました。マークアップを長年やっていながらtrackタグの存在は知らなかったのでまだまだ学ぶことがあるなと思い知らされました。。\n\n本業の方が少し忙しく、疲れもあったのか副業の方はあまり時間が取れずで、ここはもう少しちゃんとやらなければと思いました。\n\n### プライベート\n\n注目ゲームが沢山出てしまいとても困っています。Horizon Forbidden West、ELDEN RING。。\n\nELDEN RINGはフロムゲーファンとしては、待ちに待った感じでした。まだ少ししかプレイしていませんが、最高に面白いです。正直言うとあまりやる時間がないのでゆっくりプレイしていきたいです。\n\n3歳の息子の成長が凄い。（1月から更に）公文式に通っているのですが、既に足し算ができるようになっているし文字もスラスラ読めるようになっています。またこれは昔からなのですが記憶力が凄くて1年前のこととかも鮮明に覚えています。その記憶力を僕にください。。最近は[ドラえもん　はじめての国語辞典](https://www.shogakukan.co.jp/books/09501829)を購入して言葉の意味を一緒に見たりするのが楽しいです。\n\n\n### 読書\n\n読み終わった本\n\n- UXグロースモデル\n   - とても良い本でした。そのうちブログ書くけど、UXをちゃんと事業としてやっていく上での手法や体制つくりの話でした\n\n読書中\n\n- 試して理解Linuxのしくみ\n  - もうすぐ読み終わりそうだけどなんとなくLinuxがどうやって動いているのか理解できている気がします。\n\n- チームトポロジー　価値あるソフトウェアをすばやく届ける適応型組織設計\n  - 読み始めたばっかりなので3月中には読み終わりたい\n\n### 健康\n\n睡眠時間は1月と比べると平気して40分ぐらい睡眠時間が増えていました。眠くなったら寝るというのを意識しているからかもしれません。もともと8時間寝ないと駄目な人間だったのに今は5時間半ぐらいしか寝てないのは普通に危険なのでちゃんとカイゼンしたいです。\n\n4月から放送大学に入るし、息子の幼稚園が始まるので強制的に朝起きる必要がありそうなので、3月中に矯正しておかないといけなそうなので少しずつ生活リズムを取り戻したいです。\n\n### アウトプット\n\nこれと言ってないですね。。気負いせず少しずつ何かアウトプットしていきたい\n\n### 3月の目標\n\n- 個人のお勉強タイムを増やす\n- 仕事を減らす努力をする\n- ちゃんと寝る！","src/content/blog/2022/0302.md","5062f87569fbaac1",{"html":2098,"metadata":2099},"\u003Ch3 id=\"2月どうだった\">2月どうだった\u003C/h3>\n\u003Cp>正直いうとこれと言ってイベントがなく、とにかくあっという間に過ぎ去ってしまったなという感じでした。体調が悪かったとかではなかったけど、仕事のスイッチングコストが高くて、集中力があまり続かなかったなと反省する月でした。\u003C/p>\n\u003Ch3 id=\"技術系\">技術系\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/20220302_github.png\" alt=\"2022年2月の草\">\u003C/p>\n\u003Cp>GitHubの草生やし運動は続いています。がしかし個人のお勉強とか開発はほとんどできていないのでほぼ仕事へのコントリビュートになっています。これはアカンです。。試したいことは沢山スタックしてあるのでちょっとずつやっていかなきゃと思っています。3月は何か良い成果を出せるようにしたいです。\u003C/p>\n\u003Cp>仕事の話になりますが、今月はいつもやっているReact、Next.jsとは違って素のJavaScriptを触る機会（技術検証）をすることが多く、久しぶりにDOMの生成とかEventListenerなどを扱い何か懐かしいと感じました。とあるビデオライブラリがあり全くの初見でしたが触っていく内に少しお友達になれた気がします。\u003C/p>\n\u003Cp>動画にチャプターを表示する際に\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API\">VVTファイル\u003C/a>を使うことや、\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\">trackタグ\u003C/a>などについて詳しくなりました。マークアップを長年やっていながらtrackタグの存在は知らなかったのでまだまだ学ぶことがあるなと思い知らされました。。\u003C/p>\n\u003Cp>本業の方が少し忙しく、疲れもあったのか副業の方はあまり時間が取れずで、ここはもう少しちゃんとやらなければと思いました。\u003C/p>\n\u003Ch3 id=\"プライベート\">プライベート\u003C/h3>\n\u003Cp>注目ゲームが沢山出てしまいとても困っています。Horizon Forbidden West、ELDEN RING。。\u003C/p>\n\u003Cp>ELDEN RINGはフロムゲーファンとしては、待ちに待った感じでした。まだ少ししかプレイしていませんが、最高に面白いです。正直言うとあまりやる時間がないのでゆっくりプレイしていきたいです。\u003C/p>\n\u003Cp>3歳の息子の成長が凄い。（1月から更に）公文式に通っているのですが、既に足し算ができるようになっているし文字もスラスラ読めるようになっています。またこれは昔からなのですが記憶力が凄くて1年前のこととかも鮮明に覚えています。その記憶力を僕にください。。最近は\u003Ca href=\"https://www.shogakukan.co.jp/books/09501829\">ドラえもん　はじめての国語辞典\u003C/a>を購入して言葉の意味を一緒に見たりするのが楽しいです。\u003C/p>\n\u003Ch3 id=\"読書\">読書\u003C/h3>\n\u003Cp>読み終わった本\u003C/p>\n\u003Cul>\n\u003Cli>UXグロースモデル\n\u003Cul>\n\u003Cli>とても良い本でした。そのうちブログ書くけど、UXをちゃんと事業としてやっていく上での手法や体制つくりの話でした\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>読書中\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>試して理解Linuxのしくみ\u003C/p>\n\u003Cul>\n\u003Cli>もうすぐ読み終わりそうだけどなんとなくLinuxがどうやって動いているのか理解できている気がします。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>チームトポロジー　価値あるソフトウェアをすばやく届ける適応型組織設計\u003C/p>\n\u003Cul>\n\u003Cli>読み始めたばっかりなので3月中には読み終わりたい\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"健康\">健康\u003C/h3>\n\u003Cp>睡眠時間は1月と比べると平気して40分ぐらい睡眠時間が増えていました。眠くなったら寝るというのを意識しているからかもしれません。もともと8時間寝ないと駄目な人間だったのに今は5時間半ぐらいしか寝てないのは普通に危険なのでちゃんとカイゼンしたいです。\u003C/p>\n\u003Cp>4月から放送大学に入るし、息子の幼稚園が始まるので強制的に朝起きる必要がありそうなので、3月中に矯正しておかないといけなそうなので少しずつ生活リズムを取り戻したいです。\u003C/p>\n\u003Ch3 id=\"アウトプット\">アウトプット\u003C/h3>\n\u003Cp>これと言ってないですね。。気負いせず少しずつ何かアウトプットしていきたい\u003C/p>\n\u003Ch3 id=\"3月の目標\">3月の目標\u003C/h3>\n\u003Cul>\n\u003Cli>個人のお勉強タイムを増やす\u003C/li>\n\u003Cli>仕事を減らす努力をする\u003C/li>\n\u003Cli>ちゃんと寝る！\u003C/li>\n\u003C/ul>",{"headings":2100,"localImagePaths":2110,"remoteImagePaths":2111,"frontmatter":2091,"imagePaths":2112},[2101,2103,2104,2105,2106,2107,2108],{"depth":29,"slug":2102,"text":2102},"2月どうだった",{"depth":29,"slug":2074,"text":2074},{"depth":29,"slug":2076,"text":2076},{"depth":29,"slug":2078,"text":2078},{"depth":29,"slug":2080,"text":2080},{"depth":29,"slug":2082,"text":2082},{"depth":29,"slug":2109,"text":2109},"3月の目標",[],[],[],"2022/0302.md","2022/0131",{"id":2114,"data":2116,"body":2119,"filePath":2120,"digest":2121,"rendered":2122,"legacyId":2138},{"title":2117,"publishDate":2118},"2022年1月の振り返り","2022-01-31","### 1月どうだった\n\n本業と副業、プライベートのバランスが上手く取れなかったので、中途半端になってしまった月でした。スイッチングコストが高く負荷が掛かっいるのが原因なので2月は少しやることを抑える予定です。\n\n### 技術系\n\n気づいたらGitHubの草を何故か毎日生やしていました。(仕事プライベート合わせて)\n\n![2022年1月の草](/images/20220131_github.png)\n\n中には、ブログ更新しただけの日もあって必ずしもコードを毎日コミットしたわけではないですが、毎日必ずGitHubで何かしら作業したことになります。草が１ヶ月連続で生えた経験が自分の記憶の中ではないし、折角なので続けたいと思います。\n\n仕事ではReact、Next.jsを引き続き使ってお仕事しています。このまま2月も使い続ける予定です。\n\n個人ブログをGatsby v2からv4にしました。移行自体は簡単でした。gatsby-xxのパッケージを最新にするだけで完了しました。余裕があればv4で入ったSSRとかもやってみたいです。個人ブログでもう一つOGP画像を変更しました。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">Qiitaとかzennをシェアするときに表示されるOGPを自分のブログにも自作しようかな。\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1483128704192573442?ref_src=twsrc%5Etfw\">January 17, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n当初はQiitaやZennのようなアイコン付きのものを実装しようと思いましたが、ちゃんとパッケージとして作った方がいいかなと考え、とりあえず[placehold.jp](https://placehold.jp/)で文字を埋め込めるので、JavaScriptで実装してOGPとして配信することにしました。時間があればちゃんと作ってみたいです。\n\n\n[mantine](https://mantine.dev/)というフレームワークを発見して良さそうだったのでRemixの勉強がてらアニメの一覧リストでも作ってみようと思い、ちょくちょく作り始めました。来月にはリリースしようと思います。\n\nWeb3について少し情報を仕入れはじめました。特に[mozaic.fm](https://mozaic.fm/episodes/93/web3.html)のep93の内容が技術の観点で話されていて面白かったです。スマートコントラクトもここではじめて知りました。\n\n\n### プライベート\n\n放送大学から合格通知が届きました。正直必要な書類を提出すれば受かるのでそこまで凄い話しでもないですが、後は学費を払えば晴れて4月から社会人大学生になります。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">後は学費を振り込むだけ。。 \u003Ca href=\"https://t.co/qDaPEiNPOM\">pic.twitter.com/qDaPEiNPOM\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1484803550316490752?ref_src=twsrc%5Etfw\">January 22, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n息子の語彙力が増えて会話が楽しいと感じるようになりました。「え〜とあれなんだっけ。そうだxxxだ！」みたいな言葉を普通に使うようになり、日々成長を楽しんでいます。\n\nポケモンとドラえもんを最近好きになり、一緒にアニメを見たりしています。毎日[ドラめくり](https://www.shogakukan.co.jp/books/09941697)という日めくりカレンダーを破って楽しんでいます。\n\nこのご時世なので、どこかに遠出などはせず基本は家にいることが多かったです。はやく旅行とか行きたい。。\n\n\n### 読書\n\n読み終わった本\n\n- プログラミングの基礎\n- わかる！ ドメイン駆動設計 ～もちこちゃんの大冒険～\n- Googleのソフトウェアエンジニアリング\n\n読書中\n\n- 試して理解Linuxのしくみ\n- UXグロースモデル\n\nもちこちゃんの大冒険は、絶賛されていたので読んだけどDDDの本当の最初の本としては良かったです。\n\n\n### 健康\n\n睡眠不足がひどいです。去年もそうですが、やることが多すぎなんだと思います。思い切って寝てしまう日を作って睡眠負債を解消していきたいところです。\n\n散歩しながらポッドキャスト、ラジオを聴くことをしていますが、寒くなったことで少なめになっています。外に出なくなったことで運動不足を感じるので、最近家では室内トランポリンで跳ねたりしていますww\n\nスタンディング状態で仕事することがほとんどでした。ただ立ったままが続くのもあまり身体には良くないので、たまには座って作業するように意識するのが2月の目標です。\n\n猫背が気になります。ディスプレイをモニターアームで固定していますが、使用しているものが安物のため目線が少し下になってしまい、結果として猫背になっている気がしています。エルゴトロンの購入を検討しています。\n\n\n### アウトプット\n\n読んだ本のブログしか書いていないのでもう少し技術系の記事を書きたいなと思いました。\n\n- [プログラミングの基礎を読み終えた](/blog/2022/0117/)\n- [Googleのソフトウェアエンジニアリングを読んだ](/blog/2022/0123/)\n\n今年はどこかで外部で登壇できるようにしたいなと思います。適当にLT応募して無理やりネタを作ろうかなと考えています。\n\n\n### 2月の目標\n\n- 引き続き草を生やす\n- 仕事、副業、プライベートで無理しない。\n- ちゃんと寝る！","src/content/blog/2022/0131.md","856a1204ea30809a",{"html":2123,"metadata":2124},"\u003Ch3 id=\"1月どうだった\">1月どうだった\u003C/h3>\n\u003Cp>本業と副業、プライベートのバランスが上手く取れなかったので、中途半端になってしまった月でした。スイッチングコストが高く負荷が掛かっいるのが原因なので2月は少しやることを抑える予定です。\u003C/p>\n\u003Ch3 id=\"技術系\">技術系\u003C/h3>\n\u003Cp>気づいたらGitHubの草を何故か毎日生やしていました。(仕事プライベート合わせて)\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20220131_github.png\" alt=\"2022年1月の草\">\u003C/p>\n\u003Cp>中には、ブログ更新しただけの日もあって必ずしもコードを毎日コミットしたわけではないですが、毎日必ずGitHubで何かしら作業したことになります。草が１ヶ月連続で生えた経験が自分の記憶の中ではないし、折角なので続けたいと思います。\u003C/p>\n\u003Cp>仕事ではReact、Next.jsを引き続き使ってお仕事しています。このまま2月も使い続ける予定です。\u003C/p>\n\u003Cp>個人ブログをGatsby v2からv4にしました。移行自体は簡単でした。gatsby-xxのパッケージを最新にするだけで完了しました。余裕があればv4で入ったSSRとかもやってみたいです。個人ブログでもう一つOGP画像を変更しました。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">Qiitaとかzennをシェアするときに表示されるOGPを自分のブログにも自作しようかな。\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1483128704192573442?ref_src=twsrc%5Etfw\">January 17, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>当初はQiitaやZennのようなアイコン付きのものを実装しようと思いましたが、ちゃんとパッケージとして作った方がいいかなと考え、とりあえず\u003Ca href=\"https://placehold.jp/\">placehold.jp\u003C/a>で文字を埋め込めるので、JavaScriptで実装してOGPとして配信することにしました。時間があればちゃんと作ってみたいです。\u003C/p>\n\u003Cp>\u003Ca href=\"https://mantine.dev/\">mantine\u003C/a>というフレームワークを発見して良さそうだったのでRemixの勉強がてらアニメの一覧リストでも作ってみようと思い、ちょくちょく作り始めました。来月にはリリースしようと思います。\u003C/p>\n\u003Cp>Web3について少し情報を仕入れはじめました。特に\u003Ca href=\"https://mozaic.fm/episodes/93/web3.html\">mozaic.fm\u003C/a>のep93の内容が技術の観点で話されていて面白かったです。スマートコントラクトもここではじめて知りました。\u003C/p>\n\u003Ch3 id=\"プライベート\">プライベート\u003C/h3>\n\u003Cp>放送大学から合格通知が届きました。正直必要な書類を提出すれば受かるのでそこまで凄い話しでもないですが、後は学費を払えば晴れて4月から社会人大学生になります。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">後は学費を振り込むだけ。。 \u003Ca href=\"https://t.co/qDaPEiNPOM\">pic.twitter.com/qDaPEiNPOM\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1484803550316490752?ref_src=twsrc%5Etfw\">January 22, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>息子の語彙力が増えて会話が楽しいと感じるようになりました。「え〜とあれなんだっけ。そうだxxxだ！」みたいな言葉を普通に使うようになり、日々成長を楽しんでいます。\u003C/p>\n\u003Cp>ポケモンとドラえもんを最近好きになり、一緒にアニメを見たりしています。毎日\u003Ca href=\"https://www.shogakukan.co.jp/books/09941697\">ドラめくり\u003C/a>という日めくりカレンダーを破って楽しんでいます。\u003C/p>\n\u003Cp>このご時世なので、どこかに遠出などはせず基本は家にいることが多かったです。はやく旅行とか行きたい。。\u003C/p>\n\u003Ch3 id=\"読書\">読書\u003C/h3>\n\u003Cp>読み終わった本\u003C/p>\n\u003Cul>\n\u003Cli>プログラミングの基礎\u003C/li>\n\u003Cli>わかる！ ドメイン駆動設計 ～もちこちゃんの大冒険～\u003C/li>\n\u003Cli>Googleのソフトウェアエンジニアリング\u003C/li>\n\u003C/ul>\n\u003Cp>読書中\u003C/p>\n\u003Cul>\n\u003Cli>試して理解Linuxのしくみ\u003C/li>\n\u003Cli>UXグロースモデル\u003C/li>\n\u003C/ul>\n\u003Cp>もちこちゃんの大冒険は、絶賛されていたので読んだけどDDDの本当の最初の本としては良かったです。\u003C/p>\n\u003Ch3 id=\"健康\">健康\u003C/h3>\n\u003Cp>睡眠不足がひどいです。去年もそうですが、やることが多すぎなんだと思います。思い切って寝てしまう日を作って睡眠負債を解消していきたいところです。\u003C/p>\n\u003Cp>散歩しながらポッドキャスト、ラジオを聴くことをしていますが、寒くなったことで少なめになっています。外に出なくなったことで運動不足を感じるので、最近家では室内トランポリンで跳ねたりしていますww\u003C/p>\n\u003Cp>スタンディング状態で仕事することがほとんどでした。ただ立ったままが続くのもあまり身体には良くないので、たまには座って作業するように意識するのが2月の目標です。\u003C/p>\n\u003Cp>猫背が気になります。ディスプレイをモニターアームで固定していますが、使用しているものが安物のため目線が少し下になってしまい、結果として猫背になっている気がしています。エルゴトロンの購入を検討しています。\u003C/p>\n\u003Ch3 id=\"アウトプット\">アウトプット\u003C/h3>\n\u003Cp>読んだ本のブログしか書いていないのでもう少し技術系の記事を書きたいなと思いました。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"/blog/2022/0117/\">プログラミングの基礎を読み終えた\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"/blog/2022/0123/\">Googleのソフトウェアエンジニアリングを読んだ\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>今年はどこかで外部で登壇できるようにしたいなと思います。適当にLT応募して無理やりネタを作ろうかなと考えています。\u003C/p>\n\u003Ch3 id=\"2月の目標\">2月の目標\u003C/h3>\n\u003Cul>\n\u003Cli>引き続き草を生やす\u003C/li>\n\u003Cli>仕事、副業、プライベートで無理しない。\u003C/li>\n\u003Cli>ちゃんと寝る！\u003C/li>\n\u003C/ul>",{"headings":2125,"localImagePaths":2135,"remoteImagePaths":2136,"frontmatter":2116,"imagePaths":2137},[2126,2128,2129,2130,2131,2132,2133],{"depth":29,"slug":2127,"text":2127},"1月どうだった",{"depth":29,"slug":2074,"text":2074},{"depth":29,"slug":2076,"text":2076},{"depth":29,"slug":2078,"text":2078},{"depth":29,"slug":2080,"text":2080},{"depth":29,"slug":2082,"text":2082},{"depth":29,"slug":2134,"text":2134},"2月の目標",[],[],[],"2022/0131.md","2022/0501",{"id":2139,"data":2141,"body":2144,"filePath":2145,"digest":2146,"rendered":2147,"legacyId":2163},{"title":2142,"publishDate":2143},"2022年4月の振り返り","2022-05-01","### 4月どうだった\n大学の授業が始まりました。と同時に息子の幼稚園も始まり生活リズムがガラリと変わりました。最初は、リズムになれず辛い感じでしたが徐々に慣れてきたところで4月は終了しました。今このブログを書いているのがGW真っ最中なので無事社会復帰できるのか心配です。\n\n### 技術系\n\n![2022年4月の草](/images/202204_github.png)\n\n大学の授業や、副業も減らしていっていることもあり、祝日は草を生やさなくなってきています。正直仕事だけの活動になってしまっているので、もう少し広げる個人開発もしたいのですが、中々時間が取れないでいます。\n\n大学で新しく学ぶことが多く日々楽しいです。そもそも自分は文系ということもあってコンピュータの基礎を全然理解しておらず、授業でコンピュータの原理原則を知ることができました。と同時に「今まで情報系の学校を卒業した人はこれ全部知っていながら普段仕事しているのか」とう当たり前なこと再認識して、なんだか自分が恥ずかしくなりました。エンジニアという職種に「資格とかいらん！」と思っていた派だったのですが、少し考えを改めました。\n\n特に大学の授業で面白い、ためになる授業は「ネットワーク」と「自然言語処理」です。ネットワークは、バラバラな知識しかなくあまりちゃんと理解していない部分が多かったのですが、基礎からしっかり学ぶことができて今こそ「プロフェッショナルSSL/TLS」をスラスラ読めそうな気がしています。自然言語処理は最初受ける気はなかったのですが、単位稼ぎのために受けてみることにしました。しかしいざ受けてみるとめちゃくちゃ面白く「形態素解析」や「隠れマルコフモデル」などを授業で理解できなかった箇所を詳しく調べたりしています。しかし数式などが文系の私にとっては、難しく概念までは理解できても、どうやって解析されてるのかまでの理解が、まだあまりできていないので単位取れるのか正直心配です。。\n\n仕事の方も、やっていることに変化なくそろそろ何かに挑戦したい気持ちにはなっています。（技術的に）\n\n\n### プライベート\n\n息子の幼稚園がスタートしました。毎朝の幼稚園の送りは自分が担当。帰りの迎えは妻が担当しています。実は幼稚園まで自転車で片道20-25分ほど掛かるところの幼稚園に通っています。今はまだ何とかなっていますが、夏の暑い日や、冬の寒い日、もしくは雪など自転車での送り迎えが困難な時どうするかかなり悩んでいます。一応通っている幼稚園が大学敷地内にある関係なのか車での送り迎えもOKなので、これを機に、免許を取ろうか迷っています。しかし時間がない。。\n\n渋谷にスクランブルスクエアにある[SHARE LOUNGE](https://sharelounge.jp/tbs-shibuya-scsq/)というところで仕事をしました。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">今日は渋谷で仕事してます \u003Ca href=\"https://t.co/A0DV3jhq99\">pic.twitter.com/A0DV3jhq99\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1516634241609601028?ref_src=twsrc%5Etfw\">April 20, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n1日4400円で使えるコワーキングスペースなのですが、めちゃくちゃ良かったです。駄菓子やナッツなどのお菓子が食べ放題、ドリンクも飲み放題でPCスタンドのレンタルがあったり、とにかくアメニティが充実していました。\n\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">瓶コーラ久しぶりに飲んだ \u003Ca href=\"https://t.co/IRNx3ZExCf\">pic.twitter.com/IRNx3ZExCf\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1516668747951443970?ref_src=twsrc%5Etfw\">April 20, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n普段マルチディスプレイで作業していて最初ラップトップだけで仕事できるか不安もありましたが、意外とすぐ慣れました。マウスとキーボードは普段使っている外付けのものを持ってきたのは正解でこれがなかったら作業効率は半分以下になっていたと思います。\n\n### 読書\n\n読み終わった本\n- プロジェクト・ヘイル・メアリー\n  - 火星の人を書いたアンディ・ウィアーの最新作。いつかブログに書こうと思いますが、めちゃくちゃ面白かったです。ほぼ上下巻を一気読みしてしまいました。\n- コ・デザイン\n  - 積ん読していた本だったが、読んでみるととてもいい本だった。デザイナーさんが読む本というよりロール関係なくよむべき本だった。（ブログ書かないと。）\n\n読書中\n\n- 並行プログラミング入門\n  - ちょっと読むのを中断しています。\n- ソフトウェアアーキテクチャの基礎\n  - 後もう少しで読み終わりますが、アーキテクトの仕事をするにあたってのスキルセットだったり普段の開発で気にすべきことが分かってとても参考になる本だった。\n- プロを目指す人のためのTypeScript入門\n  - 6章までスラスラ読めました。途中途中のコラムがめちゃくちゃ良く文章も分かりやすく楽しく読んでいます。\n- 脳は正解をどう見ているのか\n  - ビル・ゲイツおすすめ本ということで購入。まだ1/3ほどまでしか読んでいないが、脳を刺激される感じがしてスラスラ読める本\n\n\n### 健康\n\n朝はやく起きるようになったので夜も少し早く寝るようにしている。そのため睡眠不足は先月よりかは解消しました。ただコーヒーを摂取する回数が増えていてどうにかしたいと思っています。いきなりカフェインを抜くと頭痛がして仕事にならないぐらいの中毒者なので、徐々に減らせる努力をしないといけない。\n\n\n\n### アウトプット\n\n- 特になし。\n\n\n### 5月の目標\nアウトプットを増やす","src/content/blog/2022/0501.md","dd7e3aae7385e7c3",{"html":2148,"metadata":2149},"\u003Ch3 id=\"4月どうだった\">4月どうだった\u003C/h3>\n\u003Cp>大学の授業が始まりました。と同時に息子の幼稚園も始まり生活リズムがガラリと変わりました。最初は、リズムになれず辛い感じでしたが徐々に慣れてきたところで4月は終了しました。今このブログを書いているのがGW真っ最中なので無事社会復帰できるのか心配です。\u003C/p>\n\u003Ch3 id=\"技術系\">技術系\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/202204_github.png\" alt=\"2022年4月の草\">\u003C/p>\n\u003Cp>大学の授業や、副業も減らしていっていることもあり、祝日は草を生やさなくなってきています。正直仕事だけの活動になってしまっているので、もう少し広げる個人開発もしたいのですが、中々時間が取れないでいます。\u003C/p>\n\u003Cp>大学で新しく学ぶことが多く日々楽しいです。そもそも自分は文系ということもあってコンピュータの基礎を全然理解しておらず、授業でコンピュータの原理原則を知ることができました。と同時に「今まで情報系の学校を卒業した人はこれ全部知っていながら普段仕事しているのか」とう当たり前なこと再認識して、なんだか自分が恥ずかしくなりました。エンジニアという職種に「資格とかいらん！」と思っていた派だったのですが、少し考えを改めました。\u003C/p>\n\u003Cp>特に大学の授業で面白い、ためになる授業は「ネットワーク」と「自然言語処理」です。ネットワークは、バラバラな知識しかなくあまりちゃんと理解していない部分が多かったのですが、基礎からしっかり学ぶことができて今こそ「プロフェッショナルSSL/TLS」をスラスラ読めそうな気がしています。自然言語処理は最初受ける気はなかったのですが、単位稼ぎのために受けてみることにしました。しかしいざ受けてみるとめちゃくちゃ面白く「形態素解析」や「隠れマルコフモデル」などを授業で理解できなかった箇所を詳しく調べたりしています。しかし数式などが文系の私にとっては、難しく概念までは理解できても、どうやって解析されてるのかまでの理解が、まだあまりできていないので単位取れるのか正直心配です。。\u003C/p>\n\u003Cp>仕事の方も、やっていることに変化なくそろそろ何かに挑戦したい気持ちにはなっています。（技術的に）\u003C/p>\n\u003Ch3 id=\"プライベート\">プライベート\u003C/h3>\n\u003Cp>息子の幼稚園がスタートしました。毎朝の幼稚園の送りは自分が担当。帰りの迎えは妻が担当しています。実は幼稚園まで自転車で片道20-25分ほど掛かるところの幼稚園に通っています。今はまだ何とかなっていますが、夏の暑い日や、冬の寒い日、もしくは雪など自転車での送り迎えが困難な時どうするかかなり悩んでいます。一応通っている幼稚園が大学敷地内にある関係なのか車での送り迎えもOKなので、これを機に、免許を取ろうか迷っています。しかし時間がない。。\u003C/p>\n\u003Cp>渋谷にスクランブルスクエアにある\u003Ca href=\"https://sharelounge.jp/tbs-shibuya-scsq/\">SHARE LOUNGE\u003C/a>というところで仕事をしました。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">今日は渋谷で仕事してます \u003Ca href=\"https://t.co/A0DV3jhq99\">pic.twitter.com/A0DV3jhq99\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1516634241609601028?ref_src=twsrc%5Etfw\">April 20, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>1日4400円で使えるコワーキングスペースなのですが、めちゃくちゃ良かったです。駄菓子やナッツなどのお菓子が食べ放題、ドリンクも飲み放題でPCスタンドのレンタルがあったり、とにかくアメニティが充実していました。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">瓶コーラ久しぶりに飲んだ \u003Ca href=\"https://t.co/IRNx3ZExCf\">pic.twitter.com/IRNx3ZExCf\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1516668747951443970?ref_src=twsrc%5Etfw\">April 20, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>普段マルチディスプレイで作業していて最初ラップトップだけで仕事できるか不安もありましたが、意外とすぐ慣れました。マウスとキーボードは普段使っている外付けのものを持ってきたのは正解でこれがなかったら作業効率は半分以下になっていたと思います。\u003C/p>\n\u003Ch3 id=\"読書\">読書\u003C/h3>\n\u003Cp>読み終わった本\u003C/p>\n\u003Cul>\n\u003Cli>プロジェクト・ヘイル・メアリー\n\u003Cul>\n\u003Cli>火星の人を書いたアンディ・ウィアーの最新作。いつかブログに書こうと思いますが、めちゃくちゃ面白かったです。ほぼ上下巻を一気読みしてしまいました。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>コ・デザイン\n\u003Cul>\n\u003Cli>積ん読していた本だったが、読んでみるととてもいい本だった。デザイナーさんが読む本というよりロール関係なくよむべき本だった。（ブログ書かないと。）\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>読書中\u003C/p>\n\u003Cul>\n\u003Cli>並行プログラミング入門\n\u003Cul>\n\u003Cli>ちょっと読むのを中断しています。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>ソフトウェアアーキテクチャの基礎\n\u003Cul>\n\u003Cli>後もう少しで読み終わりますが、アーキテクトの仕事をするにあたってのスキルセットだったり普段の開発で気にすべきことが分かってとても参考になる本だった。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>プロを目指す人のためのTypeScript入門\n\u003Cul>\n\u003Cli>6章までスラスラ読めました。途中途中のコラムがめちゃくちゃ良く文章も分かりやすく楽しく読んでいます。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>脳は正解をどう見ているのか\n\u003Cul>\n\u003Cli>ビル・ゲイツおすすめ本ということで購入。まだ1/3ほどまでしか読んでいないが、脳を刺激される感じがしてスラスラ読める本\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"健康\">健康\u003C/h3>\n\u003Cp>朝はやく起きるようになったので夜も少し早く寝るようにしている。そのため睡眠不足は先月よりかは解消しました。ただコーヒーを摂取する回数が増えていてどうにかしたいと思っています。いきなりカフェインを抜くと頭痛がして仕事にならないぐらいの中毒者なので、徐々に減らせる努力をしないといけない。\u003C/p>\n\u003Ch3 id=\"アウトプット\">アウトプット\u003C/h3>\n\u003Cul>\n\u003Cli>特になし。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"5月の目標\">5月の目標\u003C/h3>\n\u003Cp>アウトプットを増やす\u003C/p>",{"headings":2150,"localImagePaths":2160,"remoteImagePaths":2161,"frontmatter":2141,"imagePaths":2162},[2151,2153,2154,2155,2156,2157,2158],{"depth":29,"slug":2152,"text":2152},"4月どうだった",{"depth":29,"slug":2074,"text":2074},{"depth":29,"slug":2076,"text":2076},{"depth":29,"slug":2078,"text":2078},{"depth":29,"slug":2080,"text":2080},{"depth":29,"slug":2082,"text":2082},{"depth":29,"slug":2159,"text":2159},"5月の目標",[],[],[],"2022/0501.md","2022/0506",{"id":2164,"data":2166,"body":2169,"filePath":2170,"digest":2171,"rendered":2172,"legacyId":2186},{"title":2167,"publishDate":2168},"カーテンをブラインドにした","2022-05-06","自分の部屋のカーテンをブラインドに替えてみました。\n\n### きっかけ\n\n特にカーテンにこだわりがあるわけもなくずっと何年も同じカーテンを使いまわしていました。引っ越しを数回していますが長さが足りなかったり、長すぎてもそのままでした。今のカーテンの状態はこんな感じです。\n\n![カーテン](/images/20220506_curtain.jpg)\n\n写真だと分からないのですが、窓の高さは右下に写っているMacのちょい上ぐらいまでの高さになっておりカーテンの高さは明らかに長い状態です。またこれも写真だと分かりづらいのですが、後ろにレースのカーテンもあり何年もずっと同じものを使用していました。\n\nレースのカーテンの生地は、かなり薄く外から見えてしまう感じでした。今住んでいるところがマンションで窓の外は渡り廊下になっているので、少し気になってはいました。\n\n風がある日に窓を開けるとカーテンが揺れる（当たり前）のとあまり気にしていなかった長さや生地が薄いのが気になりだしてきたこともあって、カーテンを辞めたくなりました。\n\n### カーテンレールにつけるタイプのブラインドええやん\n\nカーテン辞めると言ってもじゃあどうすんねん！ということで代替としてはブラインドになるのですが、賃貸だとブラインドを取り付ける際に、天井に穴あけとかはできないのでオシャレなブラインドとかはNGでした。調べてみるとカーテンにレールに装着できるタイプがあるのを知り、ニトリの[木目調ブラインド](https://www.nitori-net.jp/ec/product/7410612s/)を見つけ「これええやん！」となり購入しました。自分は165x138のサイズを購入しましたが、2,000円ちょっとだったのでかなり安いです！\n\n![買ってきたブラインド](/images/20200506_blind_before.jpg)\n\n### 取り付ける\n\n取りつけはめっちゃ簡単でした。カーテンレールって今まで固定されているものだとずっと思っていたのですが。端にストッパーが付いていてそいつを外すとフックごとカーテンを取り外せるので全部取ります。\n\nその後カーテンレールにブラインドに固定する器具を引っ掛けてブラインドを付ければ完成でした。。\n\n![ブラインド](/images/20200506_blind_after.jpg)\n\n### 付けてみて\n\n部屋の雰囲気が変わり個人的には良かったです。気になっていた長さと外から見える問題も長さは調節できること、ブラインドの隙間も調整できることから解消されました。\n\nブラインド最高！","src/content/blog/2022/0506.md","0cd0a57419f8d922",{"html":2173,"metadata":2174},"\u003Cp>自分の部屋のカーテンをブラインドに替えてみました。\u003C/p>\n\u003Ch3 id=\"きっかけ\">きっかけ\u003C/h3>\n\u003Cp>特にカーテンにこだわりがあるわけもなくずっと何年も同じカーテンを使いまわしていました。引っ越しを数回していますが長さが足りなかったり、長すぎてもそのままでした。今のカーテンの状態はこんな感じです。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20220506_curtain.jpg\" alt=\"カーテン\">\u003C/p>\n\u003Cp>写真だと分からないのですが、窓の高さは右下に写っているMacのちょい上ぐらいまでの高さになっておりカーテンの高さは明らかに長い状態です。またこれも写真だと分かりづらいのですが、後ろにレースのカーテンもあり何年もずっと同じものを使用していました。\u003C/p>\n\u003Cp>レースのカーテンの生地は、かなり薄く外から見えてしまう感じでした。今住んでいるところがマンションで窓の外は渡り廊下になっているので、少し気になってはいました。\u003C/p>\n\u003Cp>風がある日に窓を開けるとカーテンが揺れる（当たり前）のとあまり気にしていなかった長さや生地が薄いのが気になりだしてきたこともあって、カーテンを辞めたくなりました。\u003C/p>\n\u003Ch3 id=\"カーテンレールにつけるタイプのブラインドええやん\">カーテンレールにつけるタイプのブラインドええやん\u003C/h3>\n\u003Cp>カーテン辞めると言ってもじゃあどうすんねん！ということで代替としてはブラインドになるのですが、賃貸だとブラインドを取り付ける際に、天井に穴あけとかはできないのでオシャレなブラインドとかはNGでした。調べてみるとカーテンにレールに装着できるタイプがあるのを知り、ニトリの\u003Ca href=\"https://www.nitori-net.jp/ec/product/7410612s/\">木目調ブラインド\u003C/a>を見つけ「これええやん！」となり購入しました。自分は165x138のサイズを購入しましたが、2,000円ちょっとだったのでかなり安いです！\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20200506_blind_before.jpg\" alt=\"買ってきたブラインド\">\u003C/p>\n\u003Ch3 id=\"取り付ける\">取り付ける\u003C/h3>\n\u003Cp>取りつけはめっちゃ簡単でした。カーテンレールって今まで固定されているものだとずっと思っていたのですが。端にストッパーが付いていてそいつを外すとフックごとカーテンを取り外せるので全部取ります。\u003C/p>\n\u003Cp>その後カーテンレールにブラインドに固定する器具を引っ掛けてブラインドを付ければ完成でした。。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20200506_blind_after.jpg\" alt=\"ブラインド\">\u003C/p>\n\u003Ch3 id=\"付けてみて\">付けてみて\u003C/h3>\n\u003Cp>部屋の雰囲気が変わり個人的には良かったです。気になっていた長さと外から見える問題も長さは調節できること、ブラインドの隙間も調整できることから解消されました。\u003C/p>\n\u003Cp>ブラインド最高！\u003C/p>",{"headings":2175,"localImagePaths":2183,"remoteImagePaths":2184,"frontmatter":2166,"imagePaths":2185},[2176,2177,2179,2181],{"depth":29,"slug":1659,"text":1659},{"depth":29,"slug":2178,"text":2178},"カーテンレールにつけるタイプのブラインドええやん",{"depth":29,"slug":2180,"text":2180},"取り付ける",{"depth":29,"slug":2182,"text":2182},"付けてみて",[],[],[],"2022/0506.md","2022/0509",{"id":2187,"data":2189,"body":2192,"filePath":2193,"digest":2194,"legacyId":2195,"deferredRender":2196},{"title":2190,"publishDate":2191},"ソフトウェアアーキテクチャの基礎を読んだ","2022-05-09","import LinkCard from '../../../components/LinkCard.astro';\n\nGW中に読んだので感想ブログです。\n\n\u003CLinkCard url=\"https://www.oreilly.co.jp//books/9784873119823/\" />\n\n### 内容\n\nタイトルから想像が付く通りで、ソフトウェア開発におけるアーキテクトの仕事は何をするのか、アーキテクチャをどう設計していくかが書かれていました。3部構成になっており\n\n- イントロダクション\n- 1部では、ソフトウェアアーキテクチャの設計についての基礎部分\n- 2部では、様々なアーキテクチャパターンを例を交えて紹介\n- 3部では、アーキテクトのソフトスキル\n\nという順番で読み進めていきます。自分はそもそもフロントエンドしかやっていない（PMとかディレクターとかはやったことあるけど）なのでまずイントロダクションの時点で挫折しそうになりました。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">ソフトウェアアーキテクチャの基礎読み始めたけどイントロダクションの時点で一生なることのできないポジションなのが確定しました。 \u003Ca href=\"https://t.co/2kOcCUajsg\">pic.twitter.com/2kOcCUajsg\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1518578631194275840?ref_src=twsrc%5Etfw\">April 25, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\nしかし読み進めていくと開発者目線でも学びが多く、アーキテクトにもしなれることがあれば再読したい書籍でもありました。\n\n自分の今までの仕事の中で、アーキテクトというポジションの人と一緒に仕事をした経験がほぼなくどういうことしているんだろうと気になったのも読んでみようと思った理由の一つです。\n\n\n### イントロダクション\n\nここは導入部分になります。上記で挫折した図があったり、定義やアーキテクトに期待することなどが書かれていました。期待することは8項目あったのですが、技術スキルは勿論のこと「社内政治に強い」「対人スキル」「事業ドメインの理解」など技術とは別のソフトスキルも必要と書かれていました。社内政治なんて絶対やりたくないのですが、ビジネスをしている以上発生するし、プロダクトに責任を持つ職種でもあるので戦っていかないといけないんだろうな。と感じました。\n\n### 第1部\n\nここでは、アーキテクチャの基礎や用語などが紹介されていました。ここでは、「アーキテクトを考えることはトレードオフを考えること」という言葉が印象に残ります。何かを決めて何かを捨てるでも捨てたときにちゃんと理由も説明できるようにしておくというのはとても大事なことだと改めて思いました。\n\nアーキテクチャ思考の章では、アーキテクトとは「技術の深さではなく幅を知る必要がある」と書かれておりここは普段開発している側すると異なった箇所だと感じました。もちろん一定の深さを知る必要はあるのですが、それよりも日々進化する技術トレンドに追いつくためにネタを仕込んでおき、いい設計ができるようにしておくのが大事だと感じました。3部のソフトスキルの章でもアーキテクトは、1日20分技術トレンドを確認する時間を設けると言ったことも書かれていました。\n\nモジュール性、アーキテクチャ特性、コンポーネント思考なども書かれており「コナーセンス」というキーワードを初めて知りました。[コナーセンスを紹介している記事もありました](https://qiita.com/fujiharuka/items/68fadefa6dad4cf33b4d)\n\n普段開発しているときに言葉は知らないけど、意識しながら作業していたことだったので説明はわかりましたが、非常に難しいなと感じるところでした。このあたりはアーキテクトの方と一緒になって考えていければ勉強になりそうだなと感じました。\n\nコンポーネント思考は、分割の仕方やエンティティの罠、モノリスか分散かなどが書かれており、事例も紹介されていました。普段フロントエンドでもコンポーネント分割をするのですが、そのコンポーネントの責務などを考えることが多くこのコンポーネントがアーキテクト全体からみてどうかみたいなところを俯瞰して考えるといろいろと難しいなと思いました。\n\nアーキテクトは最悪じゃないトレードオフの集合だという言葉もあり最高の設計なんてないんだなと改めて感じる章でした。\n\n### 第2部\n\nここでは、アーキテクチャのデザインというか様々なパターンについて紹介されていました。数が多いので全部は書かず省きますが。モノリシックアーキテクチャと分散アーキテクチャの2つの中で更にパターンがありそれぞれ紹介されています。\n\nモノリシックアーキテクチャで、一番名前をよく耳にする「レイヤードアーキテクチャ」の紹介もありました。シンプルだけどDDDとは相性悪かったり、とメリットデメリットをしっかり抑えることができます。フロントエンドでもこういう構成で仕事したことが何回もありますが、やはり保守性とかテストとかが非常にやりにくい印象を受けます。ただこのアーキテクチャはモジュール分割さえちゃんとしておけば他のアーキテクチャへの移行はコスト低く済みそうな印象を受けますが、実際すんなり移行できた事例はあんまり見たことがありません。拡張性とか開発者体験とかを考えるとデメリットが多そうな設計だと感じました。\n\n分散アーキテクチャでは「イベント駆動アーキテクチャ」「マイクロサービスアーキテクチャ」などが紹介されていました。イベント駆動アーキテクチャは初めて耳にする単語が多くてちゃんと理解できませんでした。。とにかくスケールしやすいらしいが、イベント駆動アーキテクチャでは非同期通信に依存していることから高速に処理ができるらしいです。ただ非同期だと処理が完了したかの保証がなくrejectされたときにちゃんとエラー処理を設計しようという設計なんだなと理解しました。フロントエンドでもよくあることなのでわかるなーと思いながら読んでました。\n\n「マイクロサービスアーキテクチャ」はよく聴くアーキテクチャでしたが、マイクロフロントエンドも紹介されていて今までざっくりしか理解しかしていなかったので少しだけ理解度が上がった気がしました。ドメイン一つ一つがそれぞれでちゃんと動くように設計されている分、他のドメインのことを考えなくて良いためテストやデプロイなどもやりやすくなるんだろうなと思いました。自分はマイクロサービスアーキテクチャの構成でガッツリ開発したことがないので一度は経験してみたいと思いました。\n\n### 第3部\n\nここでは、アーキテクトの仕事をする上でのソフトスキルが紹介されていました。結局の所「対人スキルがなかったらアーキテクトにはなれない」ということがわかりました。その通りだなと思いますし、おそらくアーキテクトになるにはリードエンジニアや、テックリードなどの職種を経験しているので対人スキルがない人はいないと思いますが、ここでは立場をわきまえた言葉遣いが紹介されていました。高圧的な言葉を使うと、開発者とうまくいかないことはあるあるなので改めて気をつけていきたいところです。\n\n面白いところでは、「スケジュール管理」についても触れていました。アーキテクトはMTGが多いのでどうやってスケジューリングしていくかが書かれていて、これはアーキテクト限らずタメになる内容でした。\n\n### 読み終えて\n\nかなり重厚な内容だった分一つ一つの内容はとても参考になることが多くとても良い本でした。書籍になかったこととしてそれぞれのアーキテクチャパターンの移行方法などがもしあれば知りたいなと思いましたがそもそも移行作業で成功した事例が少ないのかなとも感じました。これからアーキテクトと仕事する機会があればもう一度この本を読み直して理解を深めようと思いました。\n\nアーキテクトに限らずエンジニアが読んでもとても面白い本です！！！","src/content/blog/2022/0509.mdx","c4e9738b6e03ec14","2022/0509.mdx",true,"2022/0605",{"id":2197,"data":2199,"body":2202,"filePath":2203,"digest":2204,"rendered":2205,"legacyId":2226},{"title":2200,"publishDate":2201},"2022年5月の振り返り","2022-06-05","### 5月どうだった\nGW中はひたすら大学の授業や、読みたかった本などを読んで過ごしました。おかげで消化することはできましたが、GWが空けると仕事に追われる日々が戻ってきた感じです。平日の夜も仕事したり、大学の授業を受けたりと余暇の時間がほとんどないような月でした。\n\n\n### 技術系\n\n![2022年5月の草](/images/2022605_github.png)\n\n休日の個人開発は減りました。。6月は少しでも時間を取って増やしていきたいところです。\n\n今月はそんな中でも全く触ったことのなかった技術を2つ触ってみました。\n\n#### Svelte\n\n今までやるやる詐欺をしていたのですが、今回始めて[チュートリアル](https://svelte.dev/tutorial/basics)をやってみました。チュートリアルを触るとある程度理解できて基本的な書き方も抑えることができるぐらいによくできたチュートリアルでした。\n特にasnc/awaitの書き方が結構好きでした。\n\n```ts\n{#await promise}\n\t\u003Cp>処理中\u003C/p>\n{:then number}\n\t\u003Cp>データ表示\u003C/p>\n{:catch error}\n\t\u003Cp style=\"color: red\">エラーです\u003C/p>\n{/await}\n\n```\n\nsvelteは、VueのようなSFCで各スタイルですが、マークアップ部分に非同期通信のUIの状態を記述できるのですがこれが結構分かりやすくて好きでした。（`#await promise`のpromiseには実際のAPI通信する処理などを変数に入れておく）\n\n状態管理についても割と好きで、ReactのuseStateのような専用のHooksがなく、let変数に代入していく方法になります。これは最初だいぶ気持ち悪さがあったのですが、慣れてしまうと依存配列の更新なども渡す必要がなく結構宣言的になるので、割と簡潔に記述することができます。\n\nReactとVueを触ったことある方であれば理解はすぐできますが、後は好みの問題なのかなと思いました。個人的には、Svelte-kitも触ってみた結果、Svelte-kitでなにかアプリケーションを作ってみたくなりました。\n\n#### Supabase\n\n[公式](https://supabase.com/)にも記述がある通りでFirebaseの代替手段で注目されていたので触ってみました。正直自分のスキルとして、Firebaseもロクに触った経験がないので比較はできないのですが、とにかく使いやすくてビビりました！\n\n無料プランだと2つプロジェクトを作成できますが、プロジェクトの作成は一瞬でテーブルの作成やレコードの追加なども全部ブラウザからできるので楽ちんです。（実際仕事だとちょっと怖いけど・・）最近データベースの授業を大学でやっていたのでリレーションデータベースの勉強（データベースのテーブルをちゃんと設計してみる）と思って触ったのがきっかけです。（実際はリレーションするの一瞬で出来てしまう。。）\n\n実際クライアントからsupabeseのデータを取得するには[supabase-js](https://github.com/supabase/supabase-js)を使えば簡単に取得できますし。Authなどの設定も楽ちんでした。とにかくドキュメントは充実しているので悩むことはなさそうです。\n\n仕事の方では、今までやっていたVideo.jsの開発は一段落して、Next.jsとTailwind CSSを使用するようなプロジェクトをしています。Tailwindについては最近個人でも積極的に触っているので、紹介というよりかは細かいTips、何故いいのか？みたいなブログを書きたいと思っているけど、Tailwindの話題はSNS界隈では、何故か燃えるような印象があってちょっと怖さを感じます。。\n\nまたスケジュール管理がだいぶ辛かった月でもあります。これはMTGが多すぎてスイッチングコストが激しすぎたのが原因です。6月は全くMTGに出ないようにするを心掛けたいと思います。\n\n\n### プライベート\n\n息子が5/31で4歳になりました。この1年は言葉のコミュニケーションがだいぶ発達したのと、読み書きも平仮名、カタカナであれば割とスムーズに理解できるようになってきていて、圧倒的成長をしていると感じます。去年の秋頃から公文式に通い始めたことに効果だと思っているので、くもんには感謝しかない！　\n\n一方で幼稚園に通いだして2ヶ月が経過しました。一応毎朝自転車で自分が、毎日息子の送りをしているが慣れてきました。感覚としては、出社するときの感覚に近くてルーチンのようになってきています。\n\n大学の中間試験的なのが、5月にあり無事全部提出をすることができました。と同時に授業を履修した中では、「これもう知っているわ」みたいな内容がチラホラ出てきました。一応復習も兼ねて授業を受けていますが、流石に面倒に思うこともあり1.5倍速で授業を聴くことも増えてきました。\n\n余暇時間があまり取れない月だったので思い切って何もしない時間を6月は作るようにしたいです。\n\n### 読書\n\n読み終わった本\n- ソフトウェアアーキテクチャの基礎\n  - [ブログ](http://localhost:8000/blog/2022/0509/)を書きましたが良かった！\n- プロを目指す人のためのTypeScript入門\n  - 自分はTypeScriptのこと何も分かってなかった！ってなる本でした。\n- 脳は正解をどう見ているのか\n  - これはブログ書きたい。とてもおもしろかったです。\n\n読書中\n\n- 良いコード/悪いコードで学ぶ設計入門\n  - ミノ駆動本。ちょっとした隙間時間に読むにはピッタリの本で、少しずつ読んでいる。\n- Google流 ダイバーシティ＆インクルージョン\n  - 積ん読にしていた本を崩した。これもとてもいい本な予感\n\n\n### 健康\n\n仕事を休むレベルで体調を崩すほどでもなかったですが、頭痛がしたり寝不足でぼーとする時間はちょいちょいありました。\n\n自分の最適な集中時間を模索するために25分ポモドーロを、少し前に廃止して色々な時間でポモドーロをしてみた結果、45分作業/10分休憩というリズムが一番集中できる気がすることがわかりました。最近はこのリズムに沿って仕事をしていますが、10分の休憩でストレッチしたり家事をすることで割とリフレッシュできて結構良いです。5分だと短いなと改めて思いました。\n\n\n### 6月の目標\n- Svelte-kitで何か作る\n- 量より質を大事にする","src/content/blog/2022/0605.md","12ec217b22fb8886",{"html":2206,"metadata":2207},"\u003Ch3 id=\"5月どうだった\">5月どうだった\u003C/h3>\n\u003Cp>GW中はひたすら大学の授業や、読みたかった本などを読んで過ごしました。おかげで消化することはできましたが、GWが空けると仕事に追われる日々が戻ってきた感じです。平日の夜も仕事したり、大学の授業を受けたりと余暇の時間がほとんどないような月でした。\u003C/p>\n\u003Ch3 id=\"技術系\">技術系\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/2022605_github.png\" alt=\"2022年5月の草\">\u003C/p>\n\u003Cp>休日の個人開発は減りました。。6月は少しでも時間を取って増やしていきたいところです。\u003C/p>\n\u003Cp>今月はそんな中でも全く触ったことのなかった技術を2つ触ってみました。\u003C/p>\n\u003Ch4 id=\"svelte\">Svelte\u003C/h4>\n\u003Cp>今までやるやる詐欺をしていたのですが、今回始めて\u003Ca href=\"https://svelte.dev/tutorial/basics\">チュートリアル\u003C/a>をやってみました。チュートリアルを触るとある程度理解できて基本的な書き方も抑えることができるぐらいによくできたチュートリアルでした。\n特にasnc/awaitの書き方が結構好きでした。\u003C/p>\n\u003Cpre class=\"language-ts\" data-language=\"ts\">\u003Ccode is:raw=\"\" class=\"language-ts\">\u003Cspan class=\"token punctuation\">{\u003C/span>#\u003Cspan class=\"token keyword\">await\u003C/span> promise\u003Cspan class=\"token punctuation\">}\u003C/span>\n\t\u003Cspan class=\"token operator\">&#x3C;\u003C/span>p\u003Cspan class=\"token operator\">>\u003C/span>処理中\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>p\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span>then \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\t\u003Cspan class=\"token operator\">&#x3C;\u003C/span>p\u003Cspan class=\"token operator\">>\u003C/span>データ表示\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>p\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span>catch error\u003Cspan class=\"token punctuation\">}\u003C/span>\n\t\u003Cspan class=\"token operator\">&#x3C;\u003C/span>p style\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"color: red\"\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>エラーです\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>p\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token keyword\">await\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>svelteは、VueのようなSFCで各スタイルですが、マークアップ部分に非同期通信のUIの状態を記述できるのですがこれが結構分かりやすくて好きでした。（\u003Ccode>#await promise\u003C/code>のpromiseには実際のAPI通信する処理などを変数に入れておく）\u003C/p>\n\u003Cp>状態管理についても割と好きで、ReactのuseStateのような専用のHooksがなく、let変数に代入していく方法になります。これは最初だいぶ気持ち悪さがあったのですが、慣れてしまうと依存配列の更新なども渡す必要がなく結構宣言的になるので、割と簡潔に記述することができます。\u003C/p>\n\u003Cp>ReactとVueを触ったことある方であれば理解はすぐできますが、後は好みの問題なのかなと思いました。個人的には、Svelte-kitも触ってみた結果、Svelte-kitでなにかアプリケーションを作ってみたくなりました。\u003C/p>\n\u003Ch4 id=\"supabase\">Supabase\u003C/h4>\n\u003Cp>\u003Ca href=\"https://supabase.com/\">公式\u003C/a>にも記述がある通りでFirebaseの代替手段で注目されていたので触ってみました。正直自分のスキルとして、Firebaseもロクに触った経験がないので比較はできないのですが、とにかく使いやすくてビビりました！\u003C/p>\n\u003Cp>無料プランだと2つプロジェクトを作成できますが、プロジェクトの作成は一瞬でテーブルの作成やレコードの追加なども全部ブラウザからできるので楽ちんです。（実際仕事だとちょっと怖いけど・・）最近データベースの授業を大学でやっていたのでリレーションデータベースの勉強（データベースのテーブルをちゃんと設計してみる）と思って触ったのがきっかけです。（実際はリレーションするの一瞬で出来てしまう。。）\u003C/p>\n\u003Cp>実際クライアントからsupabeseのデータを取得するには\u003Ca href=\"https://github.com/supabase/supabase-js\">supabase-js\u003C/a>を使えば簡単に取得できますし。Authなどの設定も楽ちんでした。とにかくドキュメントは充実しているので悩むことはなさそうです。\u003C/p>\n\u003Cp>仕事の方では、今までやっていたVideo.jsの開発は一段落して、Next.jsとTailwind CSSを使用するようなプロジェクトをしています。Tailwindについては最近個人でも積極的に触っているので、紹介というよりかは細かいTips、何故いいのか？みたいなブログを書きたいと思っているけど、Tailwindの話題はSNS界隈では、何故か燃えるような印象があってちょっと怖さを感じます。。\u003C/p>\n\u003Cp>またスケジュール管理がだいぶ辛かった月でもあります。これはMTGが多すぎてスイッチングコストが激しすぎたのが原因です。6月は全くMTGに出ないようにするを心掛けたいと思います。\u003C/p>\n\u003Ch3 id=\"プライベート\">プライベート\u003C/h3>\n\u003Cp>息子が5/31で4歳になりました。この1年は言葉のコミュニケーションがだいぶ発達したのと、読み書きも平仮名、カタカナであれば割とスムーズに理解できるようになってきていて、圧倒的成長をしていると感じます。去年の秋頃から公文式に通い始めたことに効果だと思っているので、くもんには感謝しかない！　\u003C/p>\n\u003Cp>一方で幼稚園に通いだして2ヶ月が経過しました。一応毎朝自転車で自分が、毎日息子の送りをしているが慣れてきました。感覚としては、出社するときの感覚に近くてルーチンのようになってきています。\u003C/p>\n\u003Cp>大学の中間試験的なのが、5月にあり無事全部提出をすることができました。と同時に授業を履修した中では、「これもう知っているわ」みたいな内容がチラホラ出てきました。一応復習も兼ねて授業を受けていますが、流石に面倒に思うこともあり1.5倍速で授業を聴くことも増えてきました。\u003C/p>\n\u003Cp>余暇時間があまり取れない月だったので思い切って何もしない時間を6月は作るようにしたいです。\u003C/p>\n\u003Ch3 id=\"読書\">読書\u003C/h3>\n\u003Cp>読み終わった本\u003C/p>\n\u003Cul>\n\u003Cli>ソフトウェアアーキテクチャの基礎\n\u003Cul>\n\u003Cli>\u003Ca href=\"http://localhost:8000/blog/2022/0509/\">ブログ\u003C/a>を書きましたが良かった！\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>プロを目指す人のためのTypeScript入門\n\u003Cul>\n\u003Cli>自分はTypeScriptのこと何も分かってなかった！ってなる本でした。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>脳は正解をどう見ているのか\n\u003Cul>\n\u003Cli>これはブログ書きたい。とてもおもしろかったです。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>読書中\u003C/p>\n\u003Cul>\n\u003Cli>良いコード/悪いコードで学ぶ設計入門\n\u003Cul>\n\u003Cli>ミノ駆動本。ちょっとした隙間時間に読むにはピッタリの本で、少しずつ読んでいる。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Google流 ダイバーシティ＆インクルージョン\n\u003Cul>\n\u003Cli>積ん読にしていた本を崩した。これもとてもいい本な予感\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"健康\">健康\u003C/h3>\n\u003Cp>仕事を休むレベルで体調を崩すほどでもなかったですが、頭痛がしたり寝不足でぼーとする時間はちょいちょいありました。\u003C/p>\n\u003Cp>自分の最適な集中時間を模索するために25分ポモドーロを、少し前に廃止して色々な時間でポモドーロをしてみた結果、45分作業/10分休憩というリズムが一番集中できる気がすることがわかりました。最近はこのリズムに沿って仕事をしていますが、10分の休憩でストレッチしたり家事をすることで割とリフレッシュできて結構良いです。5分だと短いなと改めて思いました。\u003C/p>\n\u003Ch3 id=\"6月の目標\">6月の目標\u003C/h3>\n\u003Cul>\n\u003Cli>Svelte-kitで何か作る\u003C/li>\n\u003Cli>量より質を大事にする\u003C/li>\n\u003C/ul>",{"headings":2208,"localImagePaths":2223,"remoteImagePaths":2224,"frontmatter":2199,"imagePaths":2225},[2209,2211,2212,2215,2218,2219,2220,2221],{"depth":29,"slug":2210,"text":2210},"5月どうだった",{"depth":29,"slug":2074,"text":2074},{"depth":150,"slug":2213,"text":2214},"svelte","Svelte",{"depth":150,"slug":2216,"text":2217},"supabase","Supabase",{"depth":29,"slug":2076,"text":2076},{"depth":29,"slug":2078,"text":2078},{"depth":29,"slug":2080,"text":2080},{"depth":29,"slug":2222,"text":2222},"6月の目標",[],[],[],"2022/0605.md","2022/0510",{"id":2227,"data":2229,"body":2232,"filePath":2233,"digest":2234,"rendered":2235,"legacyId":2246},{"title":2230,"publishDate":2231},"iframelyでブログに外部のコンテンツをいい感じに表示する","2022-05-10","自分のブログにいい感じにカードUIを表示したかったので導入しました。\n\nこんな感じです。\n\n\u003Cdiv class=\"iframely-embed\">\u003Cdiv class=\"iframely-responsive\" style=\"height: 140px; padding-bottom: 0;\">\u003Ca href=\"https://ryokatsu.dev/\" data-iframely-url=\"//iframely.net/RbqFoOL?card=small\">\u003C/a>\u003C/div>\u003C/div>\n\n\n### iframely\n\n[iframely](https://iframely.com/embed)というサービスでURLを入力するとそれっぽいカードUIを表現できるHTMLを作ってくれます。\n\n### 埋め込み\n\n後は実際のブログのMarkdown部分にこのHTMLタグを埋め込みすればOKなのですが、このまま埋め込むとscriptタグも一緒に含まれるのでReactなどで使用するとあまりよろしくないです。[ここでも書かれています。](https://iframely.com/docs/react)\n\n対応としては、react-helmet内にiframelyのCDNを読み込みすれば良さそうです。\n\n```typescript\n\n\u003CHelmet\n  htmlAttributes={{\n    lang,\n  }}\n  title={title}\n  titleTemplate={`%s | ${site.siteMetadata.title}`}\n  meta={[\n    {\n      name: `description`,\n      content: metaDescription,\n    },\n    {\n      property: `og:title`,\n      content: title,\n    },\n    {\n      property: `og:description`,\n      content: metaDescription,\n    },\n    {\n      property: `og:type`,\n      content: `website`,\n    },\n    {\n      property: `og:image`,\n      content: imageUrl,\n    },\n    {\n      name: `twitter:card`,\n      content: `summary_large_image`,\n    },\n    {\n      name: `twitter:creator`,\n      content: site.siteMetadata.social.twitter,\n    },\n    {\n      name: `twitter:title`,\n      content: titleDisp,\n    },\n    {\n      name: `twitter:description`,\n      content: metaDescription,\n    },\n  ].concat(meta)}\n>\n// ここに記述\n  \u003Cscript\n    type=\"text/javascript\"\n    src=\"https://cdn.iframe.ly/embed.js\"\n  />\n\u003C/Helmet>\n\n```\n\n後はMarkdownに埋め込みする際にscriptタグを削除してHTML部分だけにすれば完成です。\n\nしかしこのiframely画像以外にも動画も作れたりするので結構良さげです。YouTubeとかもこれで今度埋め込みしようと思います。","src/content/blog/2022/0510.md","673a193dd6a06de0",{"html":2236,"metadata":2237},"\u003Cp>自分のブログにいい感じにカードUIを表示したかったので導入しました。\u003C/p>\n\u003Cp>こんな感じです。\u003C/p>\n\u003Cdiv class=\"iframely-embed\">\u003Cdiv class=\"iframely-responsive\" style=\"height: 140px; padding-bottom: 0;\">\u003Ca href=\"https://ryokatsu.dev/\" data-iframely-url=\"//iframely.net/RbqFoOL?card=small\">\u003C/a>\u003C/div>\u003C/div>\n\u003Ch3 id=\"iframely\">iframely\u003C/h3>\n\u003Cp>\u003Ca href=\"https://iframely.com/embed\">iframely\u003C/a>というサービスでURLを入力するとそれっぽいカードUIを表現できるHTMLを作ってくれます。\u003C/p>\n\u003Ch3 id=\"埋め込み\">埋め込み\u003C/h3>\n\u003Cp>後は実際のブログのMarkdown部分にこのHTMLタグを埋め込みすればOKなのですが、このまま埋め込むとscriptタグも一緒に含まれるのでReactなどで使用するとあまりよろしくないです。\u003Ca href=\"https://iframely.com/docs/react\">ここでも書かれています。\u003C/a>\u003C/p>\n\u003Cp>対応としては、react-helmet内にiframelyのCDNを読み込みすれば良さそうです。\u003C/p>\n\u003Cpre class=\"language-typescript\" data-language=\"typescript\">\u003Ccode is:raw=\"\" class=\"language-typescript\">\n\u003Cspan class=\"token operator\">&#x3C;\u003C/span>Helmet\n  htmlAttributes\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n    lang\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n  title\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>title\u003Cspan class=\"token punctuation\">}\u003C/span>\n  titleTemplate\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">%s | \u003C/span>\u003Cspan class=\"token interpolation\">\u003Cspan class=\"token interpolation-punctuation punctuation\">${\u003C/span>site\u003Cspan class=\"token punctuation\">.\u003C/span>siteMetadata\u003Cspan class=\"token punctuation\">.\u003C/span>title\u003Cspan class=\"token interpolation-punctuation punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n  meta\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">description\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> metaDescription\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      property\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">og:title\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> title\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      property\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">og:description\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> metaDescription\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      property\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">og:type\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">website\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      property\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">og:image\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> imageUrl\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">twitter:card\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">summary_large_image\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">twitter:creator\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> site\u003Cspan class=\"token punctuation\">.\u003C/span>siteMetadata\u003Cspan class=\"token punctuation\">.\u003C/span>social\u003Cspan class=\"token punctuation\">.\u003C/span>twitter\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">twitter:title\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> titleDisp\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">{\u003C/span>\n      name\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token template-string\">\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003Cspan class=\"token string\">twitter:description\u003C/span>\u003Cspan class=\"token template-punctuation string\">`\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n      content\u003Cspan class=\"token operator\">:\u003C/span> metaDescription\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n  \u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">concat\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>meta\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token comment\">// ここに記述\u003C/span>\n  \u003Cspan class=\"token operator\">&#x3C;\u003C/span>script\n    type\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"text/javascript\"\u003C/span>\n    src\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token string\">\"https://cdn.iframe.ly/embed.js\"\u003C/span>\n  \u003Cspan class=\"token operator\">/\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token operator\">/\u003C/span>Helmet\u003Cspan class=\"token operator\">>\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>後はMarkdownに埋め込みする際にscriptタグを削除してHTML部分だけにすれば完成です。\u003C/p>\n\u003Cp>しかしこのiframely画像以外にも動画も作れたりするので結構良さげです。YouTubeとかもこれで今度埋め込みしようと思います。\u003C/p>",{"headings":2238,"localImagePaths":2243,"remoteImagePaths":2244,"frontmatter":2229,"imagePaths":2245},[2239,2241],{"depth":29,"slug":2240,"text":2240},"iframely",{"depth":29,"slug":2242,"text":2242},"埋め込み",[],[],[],"2022/0510.md","2022/0527",{"id":2247,"data":2249,"body":2252,"filePath":2253,"digest":2254,"rendered":2255,"legacyId":2290},{"title":2250,"publishDate":2251},"好きなギタリスト10人","2022-05-27","### 青木裕\n\n今は亡き人だが、僕がおそらく日本人ギタリストの中で一番好きな人物。亡くなった時は、かなりショックだった。確かdownyのライブ直前とかで亡くなったんだよな。。青木ロビンさんのTwitterだったかdownyの公式Tサイトで知り、2,3日ぐらいは気分が重かったのを覚えている。あの座ってひしゃげた格好でギターを弾く様は、自分も真似した。Syrup16gでのサポートでも見たし、unkie、VOLAでも生で見たときも青木裕だけを見てた。\n\n### アベフトシ\n\nこちらも今は亡き人。めちゃくちゃショックだったし、一度でいいから生で見たかった。。。ウィルコ・ジョンソンに影響受けているのは知っていたけど誰にも真似できないあのカッティングは今でもたまに動画で見ることがある。鬼の形相でギターをかき鳴らす姿は最高にかっこいい\n\n### 平沢進\n\nギタリストの分類でいいか謎だがかなり好き。[togetter](https://togetter.com/li/568856)に使用されたギターがまとまっているけど全部かっこいい。[デストロイギター](https://trompe-l-oreille.tumblr.com/post/118115678412/%E3%83%87%E3%82%B9%E3%83%88%E3%83%AD%E3%82%A4%E3%81%AE%E6%96%B9%E6%B3%95)の弾き方真似をして（ちゃんと弾けないけど）平沢進になりきってストレス発散してた。\n\n### デヴィッド・ギルモア\n\nそもそもピンク・フロイドの大ファンなのもあるが、ギターソロはいつ聴いても美しい。弾いてる時の表情も良くブルーススケールを練習したのもデヴィッド・ギルモアの影響が大きい。\n\n### ケヴィン・シールズ\n\nギターアームを動かしながらコード・ストロークを行うのは結構簡単に見えるし、ファズを極限まで歪ませて演奏するにも簡単そうに見えるがあの音は出せない。生で見たことがあるけど、聴いているこっちが鼓膜イカれそうになるぐらいの爆音なのにs本人大丈夫か？ってなる。\n\n### ウェス・モンゴメリー\n\n親指一本でなんであんなに弾けるの？オクターブ奏法難しくてあんまり得意じゃないからだただた凄いの一言に尽きる。今でも休日の昼とかに流しながら本読んだりする。休日には欠かせないギタリスト\n\n### 和嶋慎治\n\nSGギターがよく似合う人に坂本慎太郎もいるが、個人的には和嶋慎治がナンバーワン。こういうカッコいいおじさんになりたい。\n\n### 山本精一\n\nとにかくジャンルが広く奥深い。ボアダムスやROVOで激しく弾いていると思いきや、アコースティックな曲弾いているなど多彩なイメージ。彼の携わっていたバンドはほとんど好きだけど中でも羅針盤が一番好き。\n\n### ジョージ・ハリスン\n\n単純にビートルズが好きだし、その中でもジョージが一番好きだからと理由。[ジョージ・ハリスン／リヴィング・イン・ザ・マテリアル・ワールド](https://www.amazon.co.jp/%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%B8%E3%83%BB%E3%83%8F%E3%83%AA%E3%82%B9%E3%83%B3%EF%BC%8F%E3%83%AA%E3%83%B4%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%BB%E3%82%A4%E3%83%B3%E3%83%BB%E3%82%B6%E3%83%BB%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%BB%E3%83%AF%E3%83%BC%E3%83%AB%E3%83%89-DVD-%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%B8%E3%83%BB%E3%83%8F%E3%83%AA%E3%82%B9%E3%83%B3/dp/B005O88C3K)は好きな映画トップ10に入る。リッケンバッカーはジョン・レノンのイメージだけどジョージも忘れないで！\n\n### ピーター・バック\n\nR.E.M.のギタリスト。この人もリッケンバッカーのイメージがあるけど色々なギターを使っているっぽい。一時期めちゃくちゃ聴いていてあの美しい音色でよく眠れる。\n\n\n### なんで急に書いたの？\n\n2時間ぐらい好きなギタリスト10人選ぶとしたら誰だろう？って考えてたら紹介したくなりました（笑）","src/content/blog/2022/0527.md","aeb3756a7890cbe1",{"html":2256,"metadata":2257},"\u003Ch3 id=\"青木裕\">青木裕\u003C/h3>\n\u003Cp>今は亡き人だが、僕がおそらく日本人ギタリストの中で一番好きな人物。亡くなった時は、かなりショックだった。確かdownyのライブ直前とかで亡くなったんだよな。。青木ロビンさんのTwitterだったかdownyの公式Tサイトで知り、2,3日ぐらいは気分が重かったのを覚えている。あの座ってひしゃげた格好でギターを弾く様は、自分も真似した。Syrup16gでのサポートでも見たし、unkie、VOLAでも生で見たときも青木裕だけを見てた。\u003C/p>\n\u003Ch3 id=\"アベフトシ\">アベフトシ\u003C/h3>\n\u003Cp>こちらも今は亡き人。めちゃくちゃショックだったし、一度でいいから生で見たかった。。。ウィルコ・ジョンソンに影響受けているのは知っていたけど誰にも真似できないあのカッティングは今でもたまに動画で見ることがある。鬼の形相でギターをかき鳴らす姿は最高にかっこいい\u003C/p>\n\u003Ch3 id=\"平沢進\">平沢進\u003C/h3>\n\u003Cp>ギタリストの分類でいいか謎だがかなり好き。\u003Ca href=\"https://togetter.com/li/568856\">togetter\u003C/a>に使用されたギターがまとまっているけど全部かっこいい。\u003Ca href=\"https://trompe-l-oreille.tumblr.com/post/118115678412/%E3%83%87%E3%82%B9%E3%83%88%E3%83%AD%E3%82%A4%E3%81%AE%E6%96%B9%E6%B3%95\">デストロイギター\u003C/a>の弾き方真似をして（ちゃんと弾けないけど）平沢進になりきってストレス発散してた。\u003C/p>\n\u003Ch3 id=\"デヴィッドギルモア\">デヴィッド・ギルモア\u003C/h3>\n\u003Cp>そもそもピンク・フロイドの大ファンなのもあるが、ギターソロはいつ聴いても美しい。弾いてる時の表情も良くブルーススケールを練習したのもデヴィッド・ギルモアの影響が大きい。\u003C/p>\n\u003Ch3 id=\"ケヴィンシールズ\">ケヴィン・シールズ\u003C/h3>\n\u003Cp>ギターアームを動かしながらコード・ストロークを行うのは結構簡単に見えるし、ファズを極限まで歪ませて演奏するにも簡単そうに見えるがあの音は出せない。生で見たことがあるけど、聴いているこっちが鼓膜イカれそうになるぐらいの爆音なのにs本人大丈夫か？ってなる。\u003C/p>\n\u003Ch3 id=\"ウェスモンゴメリー\">ウェス・モンゴメリー\u003C/h3>\n\u003Cp>親指一本でなんであんなに弾けるの？オクターブ奏法難しくてあんまり得意じゃないからだただた凄いの一言に尽きる。今でも休日の昼とかに流しながら本読んだりする。休日には欠かせないギタリスト\u003C/p>\n\u003Ch3 id=\"和嶋慎治\">和嶋慎治\u003C/h3>\n\u003Cp>SGギターがよく似合う人に坂本慎太郎もいるが、個人的には和嶋慎治がナンバーワン。こういうカッコいいおじさんになりたい。\u003C/p>\n\u003Ch3 id=\"山本精一\">山本精一\u003C/h3>\n\u003Cp>とにかくジャンルが広く奥深い。ボアダムスやROVOで激しく弾いていると思いきや、アコースティックな曲弾いているなど多彩なイメージ。彼の携わっていたバンドはほとんど好きだけど中でも羅針盤が一番好き。\u003C/p>\n\u003Ch3 id=\"ジョージハリスン\">ジョージ・ハリスン\u003C/h3>\n\u003Cp>単純にビートルズが好きだし、その中でもジョージが一番好きだからと理由。\u003Ca href=\"https://www.amazon.co.jp/%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%B8%E3%83%BB%E3%83%8F%E3%83%AA%E3%82%B9%E3%83%B3%EF%BC%8F%E3%83%AA%E3%83%B4%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%BB%E3%82%A4%E3%83%B3%E3%83%BB%E3%82%B6%E3%83%BB%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB%E3%83%BB%E3%83%AF%E3%83%BC%E3%83%AB%E3%83%89-DVD-%E3%82%B8%E3%83%A7%E3%83%BC%E3%82%B8%E3%83%BB%E3%83%8F%E3%83%AA%E3%82%B9%E3%83%B3/dp/B005O88C3K\">ジョージ・ハリスン／リヴィング・イン・ザ・マテリアル・ワールド\u003C/a>は好きな映画トップ10に入る。リッケンバッカーはジョン・レノンのイメージだけどジョージも忘れないで！\u003C/p>\n\u003Ch3 id=\"ピーターバック\">ピーター・バック\u003C/h3>\n\u003Cp>R.E.M.のギタリスト。この人もリッケンバッカーのイメージがあるけど色々なギターを使っているっぽい。一時期めちゃくちゃ聴いていてあの美しい音色でよく眠れる。\u003C/p>\n\u003Ch3 id=\"なんで急に書いたの\">なんで急に書いたの？\u003C/h3>\n\u003Cp>2時間ぐらい好きなギタリスト10人選ぶとしたら誰だろう？って考えてたら紹介したくなりました（笑）\u003C/p>",{"headings":2258,"localImagePaths":2287,"remoteImagePaths":2288,"frontmatter":2249,"imagePaths":2289},[2259,2261,2263,2265,2268,2271,2274,2276,2278,2281,2284],{"depth":29,"slug":2260,"text":2260},"青木裕",{"depth":29,"slug":2262,"text":2262},"アベフトシ",{"depth":29,"slug":2264,"text":2264},"平沢進",{"depth":29,"slug":2266,"text":2267},"デヴィッドギルモア","デヴィッド・ギルモア",{"depth":29,"slug":2269,"text":2270},"ケヴィンシールズ","ケヴィン・シールズ",{"depth":29,"slug":2272,"text":2273},"ウェスモンゴメリー","ウェス・モンゴメリー",{"depth":29,"slug":2275,"text":2275},"和嶋慎治",{"depth":29,"slug":2277,"text":2277},"山本精一",{"depth":29,"slug":2279,"text":2280},"ジョージハリスン","ジョージ・ハリスン",{"depth":29,"slug":2282,"text":2283},"ピーターバック","ピーター・バック",{"depth":29,"slug":2285,"text":2286},"なんで急に書いたの","なんで急に書いたの？",[],[],[],"2022/0527.md","2022/0611",{"id":2291,"data":2293,"body":2296,"filePath":2297,"digest":2298,"rendered":2299,"legacyId":2317},{"title":2294,"publishDate":2295},"RSSリーダーをSlackからinoreaderに変えた","2022-06-11","RSSの取得をinoreaderというRSSリーダーにしました。\n\n![inoreader](/images/20200611.png)\n\n### 何故？\n\n今まで個人のSlackにチャンネルをいくつか用意してRSSをフィードして読んでいました。しかし他のワークスペースにも入っていることから通知や未読が気になるようになってしまい効率が悪いなと思い始めて来ました。そこで10年ぶりぐらいにRSSリーダーに乗り換えようと思いました。以前は、[Feedly](https://feedly.com/)を使っていましたが、調べてみると類似のもので[Inoreader](https://www.inoreader.com/)というのがありUIが良さそうだったので試してみました。\n\n### RSSの登録\n\nURLを入れるとRSS対応しているサイトであれば、検索結果に表示されそのまま登録ができるのでSlackのRSSより遥かに登録が楽でした。\n\n### 使い勝手\n\nとりあえず無料版で開始しましたが、有料にするとIFTTT連携や翻訳、カスタムなCSSでUIを変更、テキスト読み上げなどかなり高機能なので、手放せなくなってきたら課金することも考えようかなと思います。\n\n### RSSで何を読んでるの？\n\n基本的に仕事に関連しそうなWEB技術の情報を取得しています。決め事として「すべてを読むことはしない」と決めています。\n\n必ず読むのは\n- 各種ブラウザのリリースノート\n- JavaScript Weekly\n- Web.dev\n\nぐらいで後は流し見で気になるタイトルがあれば読む程度です。Inoreaderは、未読にするUIが良くて「2週間前のもの」「1日前」「すべて」みたいな感じで細かく未読にすることができます。\n\n![inoreader](/images/20220611_2.png)\n\nslackもいいが、専用のリーダーもいいものだ。RSS最高！","src/content/blog/2022/0611.md","91a7fe90fa5f3856",{"html":2300,"metadata":2301},"\u003Cp>RSSの取得をinoreaderというRSSリーダーにしました。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20200611.png\" alt=\"inoreader\">\u003C/p>\n\u003Ch3 id=\"何故\">何故？\u003C/h3>\n\u003Cp>今まで個人のSlackにチャンネルをいくつか用意してRSSをフィードして読んでいました。しかし他のワークスペースにも入っていることから通知や未読が気になるようになってしまい効率が悪いなと思い始めて来ました。そこで10年ぶりぐらいにRSSリーダーに乗り換えようと思いました。以前は、\u003Ca href=\"https://feedly.com/\">Feedly\u003C/a>を使っていましたが、調べてみると類似のもので\u003Ca href=\"https://www.inoreader.com/\">Inoreader\u003C/a>というのがありUIが良さそうだったので試してみました。\u003C/p>\n\u003Ch3 id=\"rssの登録\">RSSの登録\u003C/h3>\n\u003Cp>URLを入れるとRSS対応しているサイトであれば、検索結果に表示されそのまま登録ができるのでSlackのRSSより遥かに登録が楽でした。\u003C/p>\n\u003Ch3 id=\"使い勝手\">使い勝手\u003C/h3>\n\u003Cp>とりあえず無料版で開始しましたが、有料にするとIFTTT連携や翻訳、カスタムなCSSでUIを変更、テキスト読み上げなどかなり高機能なので、手放せなくなってきたら課金することも考えようかなと思います。\u003C/p>\n\u003Ch3 id=\"rssで何を読んでるの\">RSSで何を読んでるの？\u003C/h3>\n\u003Cp>基本的に仕事に関連しそうなWEB技術の情報を取得しています。決め事として「すべてを読むことはしない」と決めています。\u003C/p>\n\u003Cp>必ず読むのは\u003C/p>\n\u003Cul>\n\u003Cli>各種ブラウザのリリースノート\u003C/li>\n\u003Cli>JavaScript Weekly\u003C/li>\n\u003Cli>Web.dev\u003C/li>\n\u003C/ul>\n\u003Cp>ぐらいで後は流し見で気になるタイトルがあれば読む程度です。Inoreaderは、未読にするUIが良くて「2週間前のもの」「1日前」「すべて」みたいな感じで細かく未読にすることができます。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20220611_2.png\" alt=\"inoreader\">\u003C/p>\n\u003Cp>slackもいいが、専用のリーダーもいいものだ。RSS最高！\u003C/p>",{"headings":2302,"localImagePaths":2314,"remoteImagePaths":2315,"frontmatter":2293,"imagePaths":2316},[2303,2306,2309,2311],{"depth":29,"slug":2304,"text":2305},"何故","何故？",{"depth":29,"slug":2307,"text":2308},"rssの登録","RSSの登録",{"depth":29,"slug":2310,"text":2310},"使い勝手",{"depth":29,"slug":2312,"text":2313},"rssで何を読んでるの","RSSで何を読んでるの？",[],[],[],"2022/0611.md","2022/0609",{"id":2318,"data":2320,"body":2323,"filePath":2324,"digest":2325,"rendered":2326,"legacyId":2342},{"title":2321,"publishDate":2322},"ピーズ35周年Live行ってきた","2022-06-09","行ってきました。ライブ自体も2,3年ぶりだと思います。\n\n![ピーズ35周年](/images/20220609.jpg)\n\n\n### 久しぶりのライブハウス\n\n豊洲PITに行ってきました。新橋から歩いて1時間ほどだったので、散歩がてら歩いて行きました。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">SL工事中だった。。 \u003Ca href=\"https://t.co/mhHwj2gAUh\">pic.twitter.com/mhHwj2gAUh\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1534434956864196608?ref_src=twsrc%5Etfw\">June 8, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\nコロナ以降ライブハウスは行ってなかったので、全部がそうではないと思いますが今回は指定席でした。実際はライブハウスに番号付きの椅子が敷き詰められておりそこでライブを見る感じでした。以前までは荷物があればコインロッカーに閉まっていたりしましたが、椅子があるので椅子の上にも下にも荷物置けるのし、以前は一度トイレに行って帰ってくると、その場所に誰か違う人が立っているみたいなことがあったのですが、席が決められているのでそんなこともなく体験が良かったです。\n\n中に入ると中規模ぐらいかなと思っていたのですが、そんなことはなくZepp Tokyoよりも多かった。。\n\n### ピーズと私\n\n最初は、高校の同級生にピーズの熱狂的なファンがいて当時は、「ふーん。そんなバンドもいるんだ」ぐらいな感じでしたが、大学に入って様々なアーティストがピーズをリスペクトしている情報を耳にして聴いてみることに。最初に「The ピーズ」というバンド名そのままのアルバムの1曲目「行きのばし」の出だしを聴いてファンになったのを今でも覚えています。そこからと言うもの何度かライブに足を運ぶようになりました。\n\n\n### 5年ぶりのピーズ\n\n30周年記念武道館ライブ以来でした。いい意味でハルさん、アビさんは何も変わっておらず、カッコいい歳の取り方をしていました。40周年手前で還暦になると聴いてちょっとびっくりでしたが、色々休止期間や病気、メンバーの入れ替えも行いながら継続できていることに尊敬します。\n\n5年前と変わったことがいくつかありました。\n\n- 4人体制になった（ベースとドラムが加入した。シンちゃん（ピロウズのドラム）は脱退している）\n- ハルさんがベースからギターになっている\n- バンド名が「Theピーズ」ではなく「ピーズ」\n\nベースが加入したのが意外でした。今までベースはハルさんのみだったのに歳なのでちゃんと弾きなくなったとか？もしかしたらインタビュー記事とかライブのMCとかで発言しているかもだけど。。\n\n### どうだった。\n\n一言で言うと最高でした。「35周年なので35曲やります」とハルさんが最初言ってて結果として本当に35曲（多分）やってました。ライブ自体も3時間弱やっていたのでボリュームがありました。もう35周年もなるとライブは慣れたもので、適度にふざけたりしながら演奏している姿が、最高に良かったです。\n\n1曲目のドロ舟でいきなりテンションあがり、その後も比較的新し目の曲から実験4号、脱線、サマー記念日のようなナンバーを交互に演奏しながら前半は終わりました。ハルさんの声量は本当に56際なん？と思うぐらい出ていて凄かった。\n\n後半は盛り上がる曲が多く特に「体にやさしいパンク」「日が暮れて〜」「行きのばし」の流れはちょっと目頭が熱くなりました。\n\nアンコールは怒涛のナンバーが続いて普段盛り上がる「ラブホ」はしっとりエロティックバージョンで演奏していて新鮮な感じもありつつ、赤羽ドリーミンから最後グライダーまでの流れはめちゃくちゃ良かった。。欲を言えば「シニタイヤツハシネ」の長尺バージョンが聴きたかったが、あれは演奏する側は相当体力使うもんな。。。次回に期待です。（トモフスキーも来てくれるといいな。）\n\n\n40周年、その前に還暦も控えているのでそれまで「せいぜい生きいきのびてくれ」\n\n\u003Ciframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/0TP9SyIKlvD5pGCJ9LYvl5?utm_source=generator\" width=\"100%\" height=\"380\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\">\u003C/iframe>\n\nそういえばライブハウスについても色々と語りたいことがあるのでいずれブログに書こう。","src/content/blog/2022/0609.md","aeb59f2fde81032a",{"html":2327,"metadata":2328},"\u003Cp>行ってきました。ライブ自体も2,3年ぶりだと思います。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/20220609.jpg\" alt=\"ピーズ35周年\">\u003C/p>\n\u003Ch3 id=\"久しぶりのライブハウス\">久しぶりのライブハウス\u003C/h3>\n\u003Cp>豊洲PITに行ってきました。新橋から歩いて1時間ほどだったので、散歩がてら歩いて行きました。\u003C/p>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">SL工事中だった。。 \u003Ca href=\"https://t.co/mhHwj2gAUh\">pic.twitter.com/mhHwj2gAUh\u003C/a>\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1534434956864196608?ref_src=twsrc%5Etfw\">June 8, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>コロナ以降ライブハウスは行ってなかったので、全部がそうではないと思いますが今回は指定席でした。実際はライブハウスに番号付きの椅子が敷き詰められておりそこでライブを見る感じでした。以前までは荷物があればコインロッカーに閉まっていたりしましたが、椅子があるので椅子の上にも下にも荷物置けるのし、以前は一度トイレに行って帰ってくると、その場所に誰か違う人が立っているみたいなことがあったのですが、席が決められているのでそんなこともなく体験が良かったです。\u003C/p>\n\u003Cp>中に入ると中規模ぐらいかなと思っていたのですが、そんなことはなくZepp Tokyoよりも多かった。。\u003C/p>\n\u003Ch3 id=\"ピーズと私\">ピーズと私\u003C/h3>\n\u003Cp>最初は、高校の同級生にピーズの熱狂的なファンがいて当時は、「ふーん。そんなバンドもいるんだ」ぐらいな感じでしたが、大学に入って様々なアーティストがピーズをリスペクトしている情報を耳にして聴いてみることに。最初に「The ピーズ」というバンド名そのままのアルバムの1曲目「行きのばし」の出だしを聴いてファンになったのを今でも覚えています。そこからと言うもの何度かライブに足を運ぶようになりました。\u003C/p>\n\u003Ch3 id=\"5年ぶりのピーズ\">5年ぶりのピーズ\u003C/h3>\n\u003Cp>30周年記念武道館ライブ以来でした。いい意味でハルさん、アビさんは何も変わっておらず、カッコいい歳の取り方をしていました。40周年手前で還暦になると聴いてちょっとびっくりでしたが、色々休止期間や病気、メンバーの入れ替えも行いながら継続できていることに尊敬します。\u003C/p>\n\u003Cp>5年前と変わったことがいくつかありました。\u003C/p>\n\u003Cul>\n\u003Cli>4人体制になった（ベースとドラムが加入した。シンちゃん（ピロウズのドラム）は脱退している）\u003C/li>\n\u003Cli>ハルさんがベースからギターになっている\u003C/li>\n\u003Cli>バンド名が「Theピーズ」ではなく「ピーズ」\u003C/li>\n\u003C/ul>\n\u003Cp>ベースが加入したのが意外でした。今までベースはハルさんのみだったのに歳なのでちゃんと弾きなくなったとか？もしかしたらインタビュー記事とかライブのMCとかで発言しているかもだけど。。\u003C/p>\n\u003Ch3 id=\"どうだった\">どうだった。\u003C/h3>\n\u003Cp>一言で言うと最高でした。「35周年なので35曲やります」とハルさんが最初言ってて結果として本当に35曲（多分）やってました。ライブ自体も3時間弱やっていたのでボリュームがありました。もう35周年もなるとライブは慣れたもので、適度にふざけたりしながら演奏している姿が、最高に良かったです。\u003C/p>\n\u003Cp>1曲目のドロ舟でいきなりテンションあがり、その後も比較的新し目の曲から実験4号、脱線、サマー記念日のようなナンバーを交互に演奏しながら前半は終わりました。ハルさんの声量は本当に56際なん？と思うぐらい出ていて凄かった。\u003C/p>\n\u003Cp>後半は盛り上がる曲が多く特に「体にやさしいパンク」「日が暮れて〜」「行きのばし」の流れはちょっと目頭が熱くなりました。\u003C/p>\n\u003Cp>アンコールは怒涛のナンバーが続いて普段盛り上がる「ラブホ」はしっとりエロティックバージョンで演奏していて新鮮な感じもありつつ、赤羽ドリーミンから最後グライダーまでの流れはめちゃくちゃ良かった。。欲を言えば「シニタイヤツハシネ」の長尺バージョンが聴きたかったが、あれは演奏する側は相当体力使うもんな。。。次回に期待です。（トモフスキーも来てくれるといいな。）\u003C/p>\n\u003Cp>40周年、その前に還暦も控えているのでそれまで「せいぜい生きいきのびてくれ」\u003C/p>\n\u003Ciframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/track/0TP9SyIKlvD5pGCJ9LYvl5?utm_source=generator\" width=\"100%\" height=\"380\" frameborder=\"0\" allowfullscreen allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\">\u003C/iframe>\n\u003Cp>そういえばライブハウスについても色々と語りたいことがあるのでいずれブログに書こう。\u003C/p>",{"headings":2329,"localImagePaths":2339,"remoteImagePaths":2340,"frontmatter":2320,"imagePaths":2341},[2330,2332,2334,2336],{"depth":29,"slug":2331,"text":2331},"久しぶりのライブハウス",{"depth":29,"slug":2333,"text":2333},"ピーズと私",{"depth":29,"slug":2335,"text":2335},"5年ぶりのピーズ",{"depth":29,"slug":2337,"text":2338},"どうだった","どうだった。",[],[],[],"2022/0609.md","2022/0613",{"id":2343,"data":2345,"body":2348,"filePath":2349,"digest":2350,"legacyId":2351,"deferredRender":2196},{"title":2346,"publishDate":2347},"中学校3年間の数学が1冊でしっかりわかる本を読んだ","2022-06-13","import LinkCard from '../../../components/LinkCard.astro';\n\n重い腰を上げて数学と向き合ってみようと思いました。大学の授業でアルゴリズムや数学的な話が出てくる時に、数式が必ずと言っていい程出現するためその時毎回「数学嫌や〜」なっていました。苦手意識を克服できるか注目です。\n\n### 感想\n\n10万部超のロングセラーということもあって、説明はかなり分かりやすかったです。方程式までは楽しくできていた中学時代を懐かしみながら授業を受けていました。因数分解、平面図形を求める箇所などは、当時の授業ではは全く理解できず正直テストの点も酷かったなという思い出があります。高校受験の時に通っていた塾で、最後にとにかく問題集をひたすら説いて脳みそに詰め込んで合格した経緯があるので今でも苦手でした。\n\nこの本で途中途中に差し込まれているポイントの部分で記載されている要点が、分かりやすくて今勉強するとすんなり理解できました。これが教科書だったら良かったのに。。\n\nただ、この本は「何故そうなるのか？」「いつ使うのか？」のようなプロセスに結構フォーカスしている所があるので、問題とかは比較的優しいので物足りなさはありました。多分この本で解き方が分かるので、次に問題集を買ってひたすら解くのが良さそうでした。\n\n問題集を買って慣れてきたら文系でほぼ何も分からないけど高校数学にチャレンジしたいです。\n\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/%E4%B8%AD%E5%AD%A6%E6%A0%A13%E5%B9%B4%E9%96%93%E3%81%AE%E6%95%B0%E5%AD%A6%E3%81%8C1%E5%86%8A%E3%81%A7%E3%81%97%E3%81%A3%E3%81%8B%E3%82%8A%E3%82%8F%E3%81%8B%E3%82%8B%E6%9C%AC-%E5%B0%8F%E6%9D%89-%E6%8B%93%E4%B9%9F/dp/4761272031\" />","src/content/blog/2022/0613.mdx","85ba1253db19cafd","2022/0613.mdx","2022/0617",{"id":2352,"data":2354,"body":2357,"filePath":2358,"digest":2359,"legacyId":2360,"deferredRender":2196},{"title":2355,"publishDate":2356},"overflow-y:autoから要素をはみ出させる","2022-06-17","import LinkCard from '../../../components/LinkCard.astro';\n\n\n今まで知らなかったことだったので備忘のために書きます。\n\n### 要素がはみ出ない\n\n例えばリストがスクロールするようなUIがあるとします。\n\n\u003Cp class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"YzegmVb\" data-user=\"ryokatsuse\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  \u003Cspan>See the Pen \u003Ca href=\"https://codepen.io/ryokatsuse/pen/YzegmVb\">\n  Untitled\u003C/a> by ryokatsuse (\u003Ca href=\"https://codepen.io/ryokatsuse\">@ryokatsuse\u003C/a>)\n  on \u003Ca href=\"https://codepen.io\">CodePen\u003C/a>.\u003C/span>\n\u003C/p>\n\u003Cscript async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\">\u003C/script>\n\n\nこの例では、ツールチップっぽいものをリストの途中にある「ツールチップ出現」をホバーした時にリストの外側に出現させたいとします。しかしこの例では、外側には配置することが出来ません。このツールチップは```position: absolute;```で配置しているのですが、大枠のリストには```overflow-y:auto```が指定してあるのでスクロール領域の外側に要素をはみ出すことができないような状態になっています。\n\nここで考えたのは、「じゃあ```overflow-x:visible```すればいけるかも？」と思いscroll-navのクラスに追加しました。しかしこれでも表示することができません。\n\n調べてみると[MDN](https://developer.mozilla.org/ja/docs/Web/CSS/overflow#%E8%A7%A3%E8%AA%AC)に記載がありました。\n\n> 一方の軸をvisible (既定値) に設定して、もう一方を他の値に設定すると、 visible は auto として動作する結果になります。\n\nどうやら片方にvisibleをしても計算的にはautoになってしまうっぽいです。\n\n### 解決策\n\nscroll-navの直下のliタグについている```position: relative```を外すと外側にはみ出して表示することができます。この時ツールチップは、absoluteをしているため一番近い祖先に基づいてツールチップが配置されます。例ではul要素しかないためbodyタグの相対配置に表示されます。はみ出したら後はなんとかCSSで位置調整する感じになります。\n\n参照記事\n\u003CLinkCard url=\"https://css-tricks.com/popping-hidden-overflow/\" />\n\noverflowって深く考えたことがなく、xとyをそれぞれ指定したときの挙動までは把握していなかったので勉強になりました。\n\n\n### overflow-clip-margin(おまけ)\n\n何か面白そうなCSSプロパティを、overflowを調べた流れで見つけました。\n\n\u003CLinkCard url=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin\" />\n\nこれは、```overflow: clip;```が指定された時に使えるものです。clipはほとんどhiddenと変わらないのですが、clipを指定すると要素内での全てのスクロール（自動のスクロールバーも含む）を禁止するという違いがあります。\n\noverflow-clip-marginには、普通のmarginのように20pxなどの単位が指定できます。指定した単位がコンテンツがclipを超えて表示できる範囲になるようです。\n\n正直言うとユースケースが想像できないのと、現状Firefoxが未対応ということもあり使うことはなさそうですが、面白かったので紹介しました。\n\n以下の参照記事にあるCodePenのサンプルを見ると動きが確認できます。\n\n\u003CLinkCard url=\"https://css-tricks.com/almanac/properties/o/overflow-clip-margin/\" />","src/content/blog/2022/0617.mdx","09c1c82565ab162f","2022/0617.mdx","2022/0713",{"id":2361,"data":2363,"body":2366,"filePath":2367,"digest":2368,"legacyId":2369,"deferredRender":2196},{"title":2364,"publishDate":2365},"こち亀は最強のポモドーロタイマー","2022-07-13","import LinkCard from '../../../components/LinkCard.astro';\n\n### ポモドーロテクニックにアニメは最高なソリューション\n25分の作業＋5分の休憩を1ポモドーロとし、4ポモドーロ（2時間）ごとに30分間の休憩を取るのが一般的です。自分の場合は、50分作業＋10分の休憩を繰り返しています。この25分という時間に適したソリューションとしてアニメ1本流すというのがあります。（自論）アニメはオープニングとエンディングを抜くと大体が1本25分の構成なのでピッタリです。\n\n言わずもがな国民的アニメですね。このこち亀をポモドーロの作業用BGMとして採用したところこれが最高でした。そして本日全344話が全部終わりましたので振り返ります。\n\n### 何が良かったか\n1話完結。これに付きます。続きが気になるアニメだとアニメの方ばっかりに集中してしまい本末転倒になりますが、こち亀の場合は、1話完結に加えて\n- 起承転結があるので話がワンパターン\n- 声優の声が聴きやすい（慣れてしまうので心地よい）\n- 見なくても話の内容が入ってくる\n\nという点があります。大体両さんが金儲けに失敗して借金作って終わりなので展開が読める話が多く作業に集中できます。\n\nただたまに神回があり、ちょっと感動する話などもあるのでその時は凄い難しくない作業に切り替えることで作業しながら話も楽しめるのでとても良いです。\n\n結論、話がワンパターンなアニメはポモドーロに向いています。作業BGMを探している方は是非こち亀を流しましょう！！\n\n\n\u003CLinkCard url=\"https://animestore.docomo.ne.jp/animestore/ci_pc?workId=20622\" />","src/content/blog/2022/0713.mdx","479b2c444e810196","2022/0713.mdx","2022/0702",{"id":2370,"data":2372,"body":2375,"filePath":2376,"digest":2377,"rendered":2378,"legacyId":2393},{"title":2373,"publishDate":2374},"2022年6月の振り返り","2022-07-02","### 6月どうだった\n気づいたらあっという間に過ぎ去りました。日中は仕事、夜は少し仕事と大学の授業という日々をひたすら繰り返していました。\n\n\n### 技術系\n\n![2022年6月の草](/images/20220702.png)\n\n引き続きあまり個人開発に時間を割けていません。7月は大学の試験があるので8月以降で時間見つけてやっていきたい。\n\n仕事の方は、oveflowに悩まされたり（[記事](https://ryokatsu.dev/blog/2022/0617/)をかきました。）Next.jsの[Middleware](https://nextjs.org/docs/advanced-features/middleware)がよく理解できていなかったので、コードを読んだり書いたりしていました。\n\n社内的にVue3やNuxt3の話題が何故か多くなってきたこともあったので復習がてらドキュメント読んだりしていました。つい先日に、[Vue2.7](https://blog.vuejs.org/posts/vue-2-7-naruto.html)がリリースされていよいよVue3移行に向けた動きみたいなのが始まって来そうな予感がしています。Nuxt3ももうすぐ安定版のリリースっぽいですが、このあたりも情報は追っていきたいです。正直普段React触っている人からするとSFCは使わずに全部TSXで書いてしまえば参入障壁低いのでは？とは感じています。\n\n大学の方は前期がいよいよ大詰めです。正直詰め込みすぎたこともあって落としそうな科目もあるのですが、7月中旬から下旬にかけて試験期間なので気合いれなきゃと思っています。情報ネットワークの授業が自分の中では一番良くて、公開鍵暗号、共通鍵暗号。PKIの他にもブロックチェーン技術についての講義もあってためになることが多かったです。\n\n\n### プライベート\n\n久しぶりにライブに行きましたが、それ以外は、ほぼなかったと言ってよいでしょう。唯一言えるとしたら[ありがとう！7000系 東京メトロスタンプラリー](https://www.tokyometro.jp/news/images_h/metroNews220519_1.pdf)を息子とやってきました。このスタンプラリーは、有楽町線の「池袋」「飯田橋」「有楽町」「豊洲」の４つのスタンプを集めると限定缶バッジがもらえるものでした。この日は35度の猛暑日でしたが、地下鉄なので基本暑さを感じることもなく快適に進めることができました。\n\n\n### 読書\n\n読み終わった本\n- 良いコード/悪いコードで学ぶ設計入門\n  - みんな言ってるけどフロントエンド版が欲しい！\n- Google流 ダイバーシティ＆インクルージョン\n  - これは[ブログ](http://localhost:8000/blog/2022/0619/)に書きました。とっても良い本でした。\n- センスメイキング\n  - アンチITみたいな本でした。一応全部読みましたが、要約されたブログとか記事を見るだけでも良さそうかと思います。大事なのは以下です。\n- WEB+DB PRESS Vol.129\n  - 「Reactの深層」を読み終わりました。すぐ読めるし内容もわかりやすいのでめちゃくちゃおすすめ。\n\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">技術書も大事だけど人文科学、社会科学、哲学も読もうね。\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1540709680510803970?ref_src=twsrc%5Etfw\">June 25, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n\n読書中\n\n- デカルト的省察\n  - センスメイキングを読んだ後に読みたくなったので読んでいますが現象学の入門としてはとても読みやすいです。もうすぐ読み終わります。\n\n\n### 健康\n\nポモドーロ（45分、10分）は続けることができています。休憩中は筋トレしたり目を瞑ってぼーとしたりしているのですが、10分もあると結構リフレッシュできるのでとても良いです。続けていきます。\n\nカフェインの量を大幅に減らしています。今までは、コーヒー3~4杯飲んで、更に夜授業を受ける時に、モンスターエナジーを飲んだりしていた程のカフェイン中毒ですが、今は朝1杯のコーヒーだけ飲んで後は摂取しないようにしています。2週間前から始めたのですが。最初の1週間ぐらいは完全に抜いているわけでもないのに午後は頭痛がしたり身体がダルい感じがありました。今は禁断症状が収まったのか平気です。次のステップとして１ヶ月脱カフェインをやってみたいとは思っていますが、まだ勇気が出ずといった感じです。\n\n仕事にちょっと疲れを感じることもあって、モチベーションが下がり気味ということもあるので、9月と10月の2ヶ月間で会社を休もうと計画しています。本当は半年ぐらい休みたい気持ちもあるのですが、ひとまず2ヶ月ぐらいで今まで時間がなくて出来ていなかったことを色々やろうと思っています。\n\n### 7月の目標\n- 大学の試験を無事終わらせる","src/content/blog/2022/0702.md","0e0445fbef556c4b",{"html":2379,"metadata":2380},"\u003Ch3 id=\"6月どうだった\">6月どうだった\u003C/h3>\n\u003Cp>気づいたらあっという間に過ぎ去りました。日中は仕事、夜は少し仕事と大学の授業という日々をひたすら繰り返していました。\u003C/p>\n\u003Ch3 id=\"技術系\">技術系\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/20220702.png\" alt=\"2022年6月の草\">\u003C/p>\n\u003Cp>引き続きあまり個人開発に時間を割けていません。7月は大学の試験があるので8月以降で時間見つけてやっていきたい。\u003C/p>\n\u003Cp>仕事の方は、oveflowに悩まされたり（\u003Ca href=\"https://ryokatsu.dev/blog/2022/0617/\">記事\u003C/a>をかきました。）Next.jsの\u003Ca href=\"https://nextjs.org/docs/advanced-features/middleware\">Middleware\u003C/a>がよく理解できていなかったので、コードを読んだり書いたりしていました。\u003C/p>\n\u003Cp>社内的にVue3やNuxt3の話題が何故か多くなってきたこともあったので復習がてらドキュメント読んだりしていました。つい先日に、\u003Ca href=\"https://blog.vuejs.org/posts/vue-2-7-naruto.html\">Vue2.7\u003C/a>がリリースされていよいよVue3移行に向けた動きみたいなのが始まって来そうな予感がしています。Nuxt3ももうすぐ安定版のリリースっぽいですが、このあたりも情報は追っていきたいです。正直普段React触っている人からするとSFCは使わずに全部TSXで書いてしまえば参入障壁低いのでは？とは感じています。\u003C/p>\n\u003Cp>大学の方は前期がいよいよ大詰めです。正直詰め込みすぎたこともあって落としそうな科目もあるのですが、7月中旬から下旬にかけて試験期間なので気合いれなきゃと思っています。情報ネットワークの授業が自分の中では一番良くて、公開鍵暗号、共通鍵暗号。PKIの他にもブロックチェーン技術についての講義もあってためになることが多かったです。\u003C/p>\n\u003Ch3 id=\"プライベート\">プライベート\u003C/h3>\n\u003Cp>久しぶりにライブに行きましたが、それ以外は、ほぼなかったと言ってよいでしょう。唯一言えるとしたら\u003Ca href=\"https://www.tokyometro.jp/news/images_h/metroNews220519_1.pdf\">ありがとう！7000系 東京メトロスタンプラリー\u003C/a>を息子とやってきました。このスタンプラリーは、有楽町線の「池袋」「飯田橋」「有楽町」「豊洲」の４つのスタンプを集めると限定缶バッジがもらえるものでした。この日は35度の猛暑日でしたが、地下鉄なので基本暑さを感じることもなく快適に進めることができました。\u003C/p>\n\u003Ch3 id=\"読書\">読書\u003C/h3>\n\u003Cp>読み終わった本\u003C/p>\n\u003Cul>\n\u003Cli>良いコード/悪いコードで学ぶ設計入門\n\u003Cul>\n\u003Cli>みんな言ってるけどフロントエンド版が欲しい！\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Google流 ダイバーシティ＆インクルージョン\n\u003Cul>\n\u003Cli>これは\u003Ca href=\"http://localhost:8000/blog/2022/0619/\">ブログ\u003C/a>に書きました。とっても良い本でした。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>センスメイキング\n\u003Cul>\n\u003Cli>アンチITみたいな本でした。一応全部読みましたが、要約されたブログとか記事を見るだけでも良さそうかと思います。大事なのは以下です。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>WEB+DB PRESS Vol.129\n\u003Cul>\n\u003Cli>「Reactの深層」を読み終わりました。すぐ読めるし内容もわかりやすいのでめちゃくちゃおすすめ。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">技術書も大事だけど人文科学、社会科学、哲学も読もうね。\u003C/p>— Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1540709680510803970?ref_src=twsrc%5Etfw\">June 25, 2022\u003C/a>\u003C/blockquote>\n\u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\u003Cp>読書中\u003C/p>\n\u003Cul>\n\u003Cli>デカルト的省察\n\u003Cul>\n\u003Cli>センスメイキングを読んだ後に読みたくなったので読んでいますが現象学の入門としてはとても読みやすいです。もうすぐ読み終わります。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"健康\">健康\u003C/h3>\n\u003Cp>ポモドーロ（45分、10分）は続けることができています。休憩中は筋トレしたり目を瞑ってぼーとしたりしているのですが、10分もあると結構リフレッシュできるのでとても良いです。続けていきます。\u003C/p>\n\u003Cp>カフェインの量を大幅に減らしています。今までは、コーヒー3~4杯飲んで、更に夜授業を受ける時に、モンスターエナジーを飲んだりしていた程のカフェイン中毒ですが、今は朝1杯のコーヒーだけ飲んで後は摂取しないようにしています。2週間前から始めたのですが。最初の1週間ぐらいは完全に抜いているわけでもないのに午後は頭痛がしたり身体がダルい感じがありました。今は禁断症状が収まったのか平気です。次のステップとして１ヶ月脱カフェインをやってみたいとは思っていますが、まだ勇気が出ずといった感じです。\u003C/p>\n\u003Cp>仕事にちょっと疲れを感じることもあって、モチベーションが下がり気味ということもあるので、9月と10月の2ヶ月間で会社を休もうと計画しています。本当は半年ぐらい休みたい気持ちもあるのですが、ひとまず2ヶ月ぐらいで今まで時間がなくて出来ていなかったことを色々やろうと思っています。\u003C/p>\n\u003Ch3 id=\"7月の目標\">7月の目標\u003C/h3>\n\u003Cul>\n\u003Cli>大学の試験を無事終わらせる\u003C/li>\n\u003C/ul>",{"headings":2381,"localImagePaths":2390,"remoteImagePaths":2391,"frontmatter":2372,"imagePaths":2392},[2382,2384,2385,2386,2387,2388],{"depth":29,"slug":2383,"text":2383},"6月どうだった",{"depth":29,"slug":2074,"text":2074},{"depth":29,"slug":2076,"text":2076},{"depth":29,"slug":2078,"text":2078},{"depth":29,"slug":2080,"text":2080},{"depth":29,"slug":2389,"text":2389},"7月の目標",[],[],[],"2022/0702.md","2022/0619",{"id":2394,"data":2396,"body":2399,"filePath":2400,"digest":2401,"legacyId":2402,"deferredRender":2196},{"title":2397,"publishDate":2398},"Google流 ダイバーシティ＆インクルージョンを読んだ","2022-06-19","import LinkCard from '../../../components/LinkCard.astro';\n\n### ダイバーシティ＆インクルーシブとは何か\n\nざっくり言うと「仲間はずれにしない」「全人類と支えながら共生社会を作っていこう」的な感じかなと思います。壮大すぎるのでかなりざっくりですが、組織のダイバーシティが事業活動として活発になり、事業と組織の活動が結果として、社会をより良くなると言った理解をしました。\n\n### お互いのこと、本当の価値を知らない。\n\n何かプロダクトを作る際に、ペルソナを決めてターゲティングして開発することがほとんどだと思います。しかしペルソナを作る段階でターゲティングを無意識に誤るというか、無視するというか実は、物凄い数のユーザーが本来潜在的にいたのにプロダクトがリリースされてしまっているというケースが発生しているんだなと改めて感じました。\n\nこれは類似正バイアスというもので、自分自身によく似た人たちのことをすぐに思い浮かぶことから起きる現象で、対象ユーザーを絞りすぎると多くの利益を無意識に取りこぼしてしまうことになってしまう可能性があります。そりゃ同じ目標というか同じ理念を持った人がその組織にいるわけなのでそうなってしまうのがほとんどなのは、容易に想像できます。\n\n本の中でも固定概念に縛られて気付けないことがあると書いてありました。本書は、Google内のプロダクトや世の中のプロダクトがどういう形でインクルーシブにプロダクトを正しく作るのかのケーススタディが多数あって、どれもなるほどと頷く内容ばかりでした。\n\n### 大事なこと\n\n本書読み進めている中で、結局の所以下のことが大事なんだなと感じました。\n\n- 職位関係なく全員がダイバーシティ＆インクルージョンを理解すること（お互いが尊重しあうこと）\n  - この理解があると、普段接しないユーザーの考えることがわかる\n- ダイバーシティ＆インクルージョンを組織に根付かせるには、生半可だとうまくいかない\n- 特別な知識は不要で、配慮と意識をもつこと\n\n役員だったりPMだったりとどうせ僕らの考えなんて分かってもらえないみたいな感情を持つことが自分はたまにあったりしますし、同じような人は多いような気がしています。しかしこれでは本当にそのプロダクトが正しく、社会を良くするものなのかが分からないままになってしまいます。\n\n特にダイバーシティとかってとにかく相互理解が必要不可欠で、コミュニケーションコストがバカ高いです。ここが生半可ではうまくいかない理由の1つだと思います。意図的に包括していかないと浸透しないし、何も変わらないんだなと思いました。\n\n### 考え方\n\n自分はフロントエンドエンジニアですが、「アクセシビリティは重要」と考えてはいるものの、実務としてしっかりと「アクセシビリティ」に向き合う機会がありませんでした。最近は業界的にも、重視され始めてきている印象を受けますが、この本を読んで「視野が狭かった」と反省しました。アクセシビリティってそもそも「ダイバーシティ＆インクルージョン」があって初めて成立するもので、もっとインクルーシブな考え方が必要で、職位など関係なくまず関わる人全ての意識を揃える所から始めないと「中途半端なアクセシビリティ対応」になってしまうと感じました。\n\n実際に本書では、ダイバーシティ＆インクルージョンの導入の方法も記載されていますが、物凄く大変そうな内容に感じました。特別なスキルは必要ないという特性上、配慮と意識を全員持ってもらうのは、導入する方は、人間性を見られるなと感じたからです。最初は、軽く雑談ベースでみたいな感じではなくその人の成果と態度が大きく影響しそうです。（実際には1人でやるわけではないですが。。）\n\nこの本を読んで、よく企業とかにダイバーシティのページがありますが、今度からちゃんと見ようと思いました。\n\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/Google%E6%B5%81-%E3%83%80%E3%82%A4%E3%83%90%E3%83%BC%E3%82%B7%E3%83%86%E3%82%A3-%E3%82%A4%E3%83%B3%E3%82%AF%E3%83%AB%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3-%E3%82%A4%E3%83%B3%E3%82%AF%E3%83%AB%E3%83%BC%E3%82%B7%E3%83%96%E3%81%AA%E8%A3%BD%E5%93%81%E9%96%8B%E7%99%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%96%B9%E6%B3%95%E3%81%A8%E5%AE%9F%E8%B7%B5-%E3%82%A2%E3%83%8B%E3%83%BC%E3%83%BB%E3%82%B8%E3%83%A3%E3%83%B3/dp/4802512163\" />","src/content/blog/2022/0619.mdx","03f93eb16d3a71ca","2022/0619.mdx","2022/0828",{"id":2403,"data":2405,"body":2409,"filePath":2410,"digest":2411,"rendered":2412,"legacyId":2427},{"title":2406,"publishDate":2407,"ogImageURL":2408},"放送大学前期の振り返り","2022-08-28","/assets/daigaku-toudai.png","8月中旬頃に放送大学の前期の成績が発表された。結果は以下でした。\n\n![放送大学の結果](/images/blog20220828.png)\n\n実は途中まで学習したけど勉強時間の確保ができず、後期に試験を回したものもあるが、基本試験を受けた科目については、全て合格で履修できた。\n\n### 学習方法の振り返り\n子供の寝かしつけ後の2-3時間は、授業を聴く時間にしていました。週2,3日程度でしたが割と継続的にできていました。\n\nNotionに放送大学のIndexページを作成して、科目ごとのページの中に授業を聴きながらひたすらメモる感じです。\n\n![Notionのページ](/images/blog2022082801.png)\n\n最初は、テキストを購入しないで授業を受けていたのですが、授業を受けていくと「これは、テキストないと無理やな」ということに気づきAmazonで購入しました。テキストがあるのとないのとでは、かなり理解度に差が出てしまうので、***絶対にテキストはあった方が良い***と思います。\n\n途中通信指導と題した、中間試験的なのと学期末にテストがあります。基本はマークシート形式で4択問題になりますが、ちゃんと理解していないと解けない感じです。\n\n授業を視聴している最中で出てくるスライドなどを後で見返したい時に、スクショしても背景が真っ黒になり、スクショできないようになっています。（オンライン授業の方はスクショできた。）なので放送授業の方では、スマホからPCの画面を撮影してNotionのページに、貼り付ける作業をしていました。これが地味に面倒だったので、PCで簡単にスクショできるようにしてほしいところです。\n\nアルゴリズムなど情報系の授業では、必ずと言っていいほど数式が出てきます。数式が出てきた場合は、NotionではなくiPadのメモ機能に数式を書いて理解を深めました。流石に何か計算したりする際は手書き or iPadメモが有能でした。\n\n知っている内容だったりすることもあるので、その場合は、授業の動画を1.5倍速にして聴いていました。割と知らない内容でも、1.5倍速ではあればかなり集中してメモも素早く取ることができれば、頭には入ってくるので時間短縮になります。アルゴリズムの同じような授業を今回受講していたのですが、一部重複する内容とかがあってその時は1.5倍速をしていました。\n\n\n### モチベーションの維持\n\n特にモチベーションが大きく下がったことはなかったです。（仕事の方では、大きく下がったけどww）ただ最初の方は、ゲームをする時間が圧倒的に減り、若干ストレスに感じることがありましたが、今は慣れてきました。\n\n体調不良や、仕事の疲れで、授業受けるのがしんどい日というのはどうしても発生します。その時は全然違うことをして無理しないようにしました。\n\n### 学んでみて\n\n授業の中には、知っていることもいくつかありましたが、ほとんどははじめての事ばかりで色々刺激になったと同時に職場で、情報系の出身の人と一緒に仕事していることが、非常に恥ずかしくなりました。\n\n今自分が学んでいることを、既に大学時に勉強しているって凄いことだなと改めて感じました。文系エンジニアが悪いとは全く思いませんが、基本を学ぶ意味でも価値は十分にありました。すぐに学んだことを業務に活かせるかは微妙ですが、用語だったり、アルゴリズムの考え方だったり、種類だったりは知識として知っておくことで、仕事には活かされると思います。\n\n特に情報ネットワークの授業が個人的には一番タメになりました。公開鍵や秘密鍵がどういったものなのか、当然知識として知っていましたが、どういうアルゴリズムで動いているのかなどを知ることができてより解像度があがりました。\n\n### 後期\n前期は割とアルゴリズムの基礎だったり、コンピュータそのものの原理だったりと基礎寄りの授業が多かったので、後期は少し応用的な内容になるので更に理解が深まれば良いなと思います。","src/content/blog/2022/0828.md","db99d6b53a372748",{"html":2413,"metadata":2414},"\u003Cp>8月中旬頃に放送大学の前期の成績が発表された。結果は以下でした。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/blog20220828.png\" alt=\"放送大学の結果\">\u003C/p>\n\u003Cp>実は途中まで学習したけど勉強時間の確保ができず、後期に試験を回したものもあるが、基本試験を受けた科目については、全て合格で履修できた。\u003C/p>\n\u003Ch3 id=\"学習方法の振り返り\">学習方法の振り返り\u003C/h3>\n\u003Cp>子供の寝かしつけ後の2-3時間は、授業を聴く時間にしていました。週2,3日程度でしたが割と継続的にできていました。\u003C/p>\n\u003Cp>Notionに放送大学のIndexページを作成して、科目ごとのページの中に授業を聴きながらひたすらメモる感じです。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/blog2022082801.png\" alt=\"Notionのページ\">\u003C/p>\n\u003Cp>最初は、テキストを購入しないで授業を受けていたのですが、授業を受けていくと「これは、テキストないと無理やな」ということに気づきAmazonで購入しました。テキストがあるのとないのとでは、かなり理解度に差が出てしまうので、\u003Cem>\u003Cstrong>絶対にテキストはあった方が良い\u003C/strong>\u003C/em>と思います。\u003C/p>\n\u003Cp>途中通信指導と題した、中間試験的なのと学期末にテストがあります。基本はマークシート形式で4択問題になりますが、ちゃんと理解していないと解けない感じです。\u003C/p>\n\u003Cp>授業を視聴している最中で出てくるスライドなどを後で見返したい時に、スクショしても背景が真っ黒になり、スクショできないようになっています。（オンライン授業の方はスクショできた。）なので放送授業の方では、スマホからPCの画面を撮影してNotionのページに、貼り付ける作業をしていました。これが地味に面倒だったので、PCで簡単にスクショできるようにしてほしいところです。\u003C/p>\n\u003Cp>アルゴリズムなど情報系の授業では、必ずと言っていいほど数式が出てきます。数式が出てきた場合は、NotionではなくiPadのメモ機能に数式を書いて理解を深めました。流石に何か計算したりする際は手書き or iPadメモが有能でした。\u003C/p>\n\u003Cp>知っている内容だったりすることもあるので、その場合は、授業の動画を1.5倍速にして聴いていました。割と知らない内容でも、1.5倍速ではあればかなり集中してメモも素早く取ることができれば、頭には入ってくるので時間短縮になります。アルゴリズムの同じような授業を今回受講していたのですが、一部重複する内容とかがあってその時は1.5倍速をしていました。\u003C/p>\n\u003Ch3 id=\"モチベーションの維持\">モチベーションの維持\u003C/h3>\n\u003Cp>特にモチベーションが大きく下がったことはなかったです。（仕事の方では、大きく下がったけどww）ただ最初の方は、ゲームをする時間が圧倒的に減り、若干ストレスに感じることがありましたが、今は慣れてきました。\u003C/p>\n\u003Cp>体調不良や、仕事の疲れで、授業受けるのがしんどい日というのはどうしても発生します。その時は全然違うことをして無理しないようにしました。\u003C/p>\n\u003Ch3 id=\"学んでみて\">学んでみて\u003C/h3>\n\u003Cp>授業の中には、知っていることもいくつかありましたが、ほとんどははじめての事ばかりで色々刺激になったと同時に職場で、情報系の出身の人と一緒に仕事していることが、非常に恥ずかしくなりました。\u003C/p>\n\u003Cp>今自分が学んでいることを、既に大学時に勉強しているって凄いことだなと改めて感じました。文系エンジニアが悪いとは全く思いませんが、基本を学ぶ意味でも価値は十分にありました。すぐに学んだことを業務に活かせるかは微妙ですが、用語だったり、アルゴリズムの考え方だったり、種類だったりは知識として知っておくことで、仕事には活かされると思います。\u003C/p>\n\u003Cp>特に情報ネットワークの授業が個人的には一番タメになりました。公開鍵や秘密鍵がどういったものなのか、当然知識として知っていましたが、どういうアルゴリズムで動いているのかなどを知ることができてより解像度があがりました。\u003C/p>\n\u003Ch3 id=\"後期\">後期\u003C/h3>\n\u003Cp>前期は割とアルゴリズムの基礎だったり、コンピュータそのものの原理だったりと基礎寄りの授業が多かったので、後期は少し応用的な内容になるので更に理解が深まれば良いなと思います。\u003C/p>",{"headings":2415,"localImagePaths":2424,"remoteImagePaths":2425,"frontmatter":2405,"imagePaths":2426},[2416,2418,2420,2422],{"depth":29,"slug":2417,"text":2417},"学習方法の振り返り",{"depth":29,"slug":2419,"text":2419},"モチベーションの維持",{"depth":29,"slug":2421,"text":2421},"学んでみて",{"depth":29,"slug":2423,"text":2423},"後期",[],[],[],"2022/0828.md","2022/0824",{"id":2428,"data":2430,"body":2434,"filePath":2435,"digest":2436,"legacyId":2437,"deferredRender":2196},{"title":2431,"publishDate":2432,"ogImageURL":2433},"ブログをGatsbyからAstroに変更した","2022-08-24","/assets/placeholder-hero.jpg","import LinkCard from '../../../components/LinkCard.astro';\n\nブログを長年愛用していたGatsbyから[Astro](https://astro.build/)に変更しました。\n\n![トップページ](/images/20220823blog.png)\n\n### Astro\n\nAstroは、静的サイトビルダーで、最近[V1](https://astro.build/blog/astro-1/)がリリースされたばかりで比較的新しいです。SSRのサポートも対応しています。Gatsbyと近いイメージがありますが、Astroは、最終的なビルドの際にJavaScriptを全て抜いた状態でデプロイされるために高速なサイトが構築できます。（一部の場合を除く）\n\n### Astro Islands\n\nAstroの特徴として[アイランドアーキテクチャ](https://jasonformat.com/islands-architecture/)を採用している点があります。Astro以外だとDenoの[Fresh](https://fresh.deno.dev/)とかもアイランドアーキテクチャでしょうか。Astro自体は、アイランドアーキテクチャという呼び方はせず「Astro Islands」と読んでいますが、ほぼ同じ意味です。\n\nアイランドアーキテクチャは、マイクロフロントエンドと近い印象なのですが、静的なHTML上に様々なコンポーネント（React、Vue、Svelteなど）が島のように浮かんでいるイメージです。Astroでは設定ファイルに```@astro/react```など設定ファイルにアタッチすることで内部でReactやVueが使えます。\n\n\n### 移行と移行前からの変更点\n\n移行自体は、特に手こずることなくスムーズにできました。ルーティング機能もあるため旧ブログの階層をそのままに記事の移植も問題なくできます。またAstroは、デフォルトでmarkdownのパースや、Syntax Highlightなどがデフォルトで付いているので記事の移行は本当に画像のパスを修正したぐらいでかなり楽でした。\n\nほとんど以前のGatsbyのブログの時のUIから変更をしていませんが、以下のような機能追加や削除を行いました。\n\n- RSSの導入\n- ヒーローイメージの導入\n- ダークモード切り替えボタンの廃止（システム環境設定に応じて自動で変更される）\n- アイコンの変更\n- CSSをTailwindCSSに変更\n- SNSシェアボタンを廃止(復活されるかも)\n\nまたこのタイミングで、ホスティング先もNetlifyからVercelに移行しました。~お名前ドットコムという改悪サービス~の管理画面からDNSサーバーを変更するのだけちょっとUI分かりづらく手こずりましたが、それ以外はすんなり移行できました。Astroは、色々なホスティング先に対応しているので、定期的にホスティング先を変えてみても良いかもなと思いました。（でもまずはドメインを移行をしたい。。）\n\n\n### Astroについての所感\n\n個人的にはかなり気に入っています。環境構築が秒でできる点、自分の手慣れたフレームワークでコンポーネントを記述できる点、サイトが爆速になるなどが主な理由です。\nコンポーネントについては、触ったことないフレームワークでちょっとコンポーネント書いてみたいという学習目的でも使えます。\n\nアプリケーション開発でAstroを使うと言われるとイメージが沸かないですが、ブログだったり企業のコーポレートサイトであればAstroで全然OKだと思います。以下のZennの記事などが参考になります。\n\n\u003CLinkCard url=\"https://zenn.dev/offers/articles/20220704-offers-hr-lab-tech-explainer\" />\n\n### 今後\n\n折角なので機能を追加して色々なコンポーネントを作ってみようと思います。","src/content/blog/2022/0824.mdx","d1f99e43e4502d3b","2022/0824.mdx","2022/0903",{"id":2438,"data":2440,"body":2443,"filePath":2444,"digest":2445,"legacyId":2446,"deferredRender":2196},{"title":2441,"publishDate":2442},"2022年8月の振り返り","2022-09-05","import LinkCard from '../../../components/LinkCard.astro';\n\n\n### 8月どうだった\n\n特に、何か成し遂げたとか頑張ったとかはなく、気づいたら8月は過ぎ去っていた感じです。\n\n\n### 技術系\n\n![2022年8月の草](/images/github202208.png)\n\nお盆休みもあってかコミットしない日もありました。そんな中このブログ自体のフレームワークをGatsbyからAstroに変更しました。\n\n\u003CLinkCard url=\"https://ryokatsu.dev/blog/2022/0824\" />\n\nホスティングについても、NetlifyからVercelへ移行しました。実はHerokuにしていた時期もあったのですが、Vercelにしたことで若干パフォーマンスが向上しました。\n\n仕事では、大きな開発があまりなくバグ対応をすることが多かったです。\n\n大学も夏休みのため授業を受けることは特になかったのですが、「コンピュータシステムの理論と実装」という本をずっと積ん読ししていたのですが、ある程度大学で基礎を学び始めて理解できるかもと思い少しずつ読み始めました。やっと半分ぐらいまで来たので9月までには終わらせてブログを書く予定です。\n\n\u003CLinkCard url=\"https://www.oreilly.co.jp//books/9784873117126/\" />\n\n\n\n### プライベート\n\n横瀬にある[小松沢レジャー農園](http://www.komatsuzawa.co.jp/)というところに行って夏っぽいことをしてきました。\n\n- マスを掴み取りしてその場で焼いて食べる\n- カブトムシ採集\n- BBQ\n\nなどをしました。カブトムシは、採集して家に持ち帰ったその日の夜に虫かごから脱出して、捕獲するという事件がありましたが未だに生きていて元気です。\n\nポケモンカードを相変わらず子供と対戦していて、上達しています。ダメカンを乗せる個数と、後どのくらいのダメージできぜつするのかを計算するので子供にはとても良い遊びだなと改めて思います。\n\n\n### 読書\n- コンピュータシステムの理論と実装\n  - 引く続き読書中\n- 事業をエンジニアリングする技術者たち\n  - もうすぐ読み終わるのでブログ書きます。\n\n\n### 健康\n\n比較的に寝れる日は、寝れていたかなと思いつつ運動不足が顕著です。普段の散歩だけだと物足りなさを感じるので、何か身体を動かすことを始めようか悩んでいます。\n\nちょっと精神的に、キツイのが続くのもあって病院に行ってきたところ「仕事抑えて、とにかく寝ろ。じゃないとやばいぞ」とかなり真剣な目で医者に言われました。個人的には、まだやれるなーと思ってはいましたが、第三者に言われると「ヤバいのかも」と気づくことができてよかったです。\n\n一応10月と11月に前々から考えていた勉学のための休職をすることになるので、仕事のことなんか一切忘れて健康的な身体に戻していきたいです。","src/content/blog/2022/0903.mdx","dae0c80042dd26df","2022/0903.mdx","2022/0810",{"id":2447,"data":2449,"body":2452,"filePath":2453,"digest":2454,"rendered":2455,"legacyId":2470},{"title":2450,"publishDate":2451},"2022年7月の振り返り","2022-08-10","### 7月どうだった\n大学の試験期間があって仕事以外はほとんど試験勉強をしていました。そのためあっという間に過ぎ去ってしまったなという月でした。\n\n\n\n### 技術系\n\n![2022年7月の草](/images/github202207.png)\n\n試験期間中に少しアルゴリズムなどを実装することがあり、ほぼ毎日ようにGitのコミットしていました。\n\n仕事では、携わっているプロダクトのReactのバージョンを18にアップデートする対応がありそのレビューなどをしていました。細かいバグはあったものの移行自体はすんなりできていました。ここで学びになったのがNext.jsの[Middleware](https://nextjs.org/docs/advanced-features/middleware)の仕組みです。正直概念しか知らなかったのですが、ドキュメントとソースコードを読んで何をしているのか理解できました。\n\nこれは、8月に入ってからにはなるのですが、Nuxt3の仕事ができることになりました。技術調査込みではありますが、キャッチアップできるのは嬉しいことです。\n\n\n\n### プライベート\n\n試験期間でほぼなかったです。そんな中、34歳の誕生日を迎えました。特に変わらないといえば変わらないですが、最近自分のキャリアを見つめ直す時期に来ているかもと感じています。\n\n久しぶりにゲームをしてStrayという猫ゲーを時間ない中だったけどクリアしました。総合的には良かったのですが、インディーゲームあるあるの謎のミニゲームが多くてかったるさはありました。サイバーパンクの世界観やBGMが良くSoundtrackは仕事中に最近聴いてます。\n\n息子とは、ポケモンカードをするようになりました。まだ4歳なのでお互いの手札を見せた状態でサポートしながら対戦していますが、何度かやっているとルールを覚えて今では、かなり出来るようになってきました。自分も小学生の時ぶりにカードゲームをやってみてハマってしまいポケカに自分の少ないお小遣いを使うようになっています。（これはまずい）\n\n\n### 読書\n\n- デカルト的省察\n  - 正直言うと理解ができない部分が多くて解説ブログとか読み漁って1ミリぐらいは理解できましたww\n\n読書中\n\n- コンピュータシステムの理論と実装\n  - 2年ぐらい積ん読していたのですが、大学で情報系学び始めたし大丈夫でしょというノリで少しずつ初めています。ゆっくり読んでるのでいつ読み終わるかは不明\n\n### 健康\n\n睡眠時間は平均で5時間でした。これはまずい。8月は少し余裕ができるので早めに寝ようと思います。\n\nアーロンチェアのヘッドレストを購入したのですが、最初は首が楽になったと思って喜んでいたのは束の間、座り方と姿勢が本来のアーロンチェアの座り方とは異なるようで、腰の痛みが出るようになりました。椅子を見直すのもありかもと思いますが、ひとまず正しい姿勢は常に意識したい。\n\n連日暑いこともあって身体を全く動かさなかった月でした。散歩もあまり行かなかったのが原因か足の疲れが結構酷かったです。（サウナも行っていないのが原因かも。コロナめ。。）8月も同じ感じが続きそうなので夜の散歩頻度を増やそうと思います。\n\n\n\n\n### 8月の目標\n- 9月から休職を予定しているからちゃんと休職できるように仕事を整理する","src/content/blog/2022/0810.md","30c95653991f58d0",{"html":2456,"metadata":2457},"\u003Ch3 id=\"7月どうだった\">7月どうだった\u003C/h3>\n\u003Cp>大学の試験期間があって仕事以外はほとんど試験勉強をしていました。そのためあっという間に過ぎ去ってしまったなという月でした。\u003C/p>\n\u003Ch3 id=\"技術系\">技術系\u003C/h3>\n\u003Cp>\u003Cimg src=\"/images/github202207.png\" alt=\"2022年7月の草\">\u003C/p>\n\u003Cp>試験期間中に少しアルゴリズムなどを実装することがあり、ほぼ毎日ようにGitのコミットしていました。\u003C/p>\n\u003Cp>仕事では、携わっているプロダクトのReactのバージョンを18にアップデートする対応がありそのレビューなどをしていました。細かいバグはあったものの移行自体はすんなりできていました。ここで学びになったのがNext.jsの\u003Ca href=\"https://nextjs.org/docs/advanced-features/middleware\">Middleware\u003C/a>の仕組みです。正直概念しか知らなかったのですが、ドキュメントとソースコードを読んで何をしているのか理解できました。\u003C/p>\n\u003Cp>これは、8月に入ってからにはなるのですが、Nuxt3の仕事ができることになりました。技術調査込みではありますが、キャッチアップできるのは嬉しいことです。\u003C/p>\n\u003Ch3 id=\"プライベート\">プライベート\u003C/h3>\n\u003Cp>試験期間でほぼなかったです。そんな中、34歳の誕生日を迎えました。特に変わらないといえば変わらないですが、最近自分のキャリアを見つめ直す時期に来ているかもと感じています。\u003C/p>\n\u003Cp>久しぶりにゲームをしてStrayという猫ゲーを時間ない中だったけどクリアしました。総合的には良かったのですが、インディーゲームあるあるの謎のミニゲームが多くてかったるさはありました。サイバーパンクの世界観やBGMが良くSoundtrackは仕事中に最近聴いてます。\u003C/p>\n\u003Cp>息子とは、ポケモンカードをするようになりました。まだ4歳なのでお互いの手札を見せた状態でサポートしながら対戦していますが、何度かやっているとルールを覚えて今では、かなり出来るようになってきました。自分も小学生の時ぶりにカードゲームをやってみてハマってしまいポケカに自分の少ないお小遣いを使うようになっています。（これはまずい）\u003C/p>\n\u003Ch3 id=\"読書\">読書\u003C/h3>\n\u003Cul>\n\u003Cli>デカルト的省察\n\u003Cul>\n\u003Cli>正直言うと理解ができない部分が多くて解説ブログとか読み漁って1ミリぐらいは理解できましたww\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>読書中\u003C/p>\n\u003Cul>\n\u003Cli>コンピュータシステムの理論と実装\n\u003Cul>\n\u003Cli>2年ぐらい積ん読していたのですが、大学で情報系学び始めたし大丈夫でしょというノリで少しずつ初めています。ゆっくり読んでるのでいつ読み終わるかは不明\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"健康\">健康\u003C/h3>\n\u003Cp>睡眠時間は平均で5時間でした。これはまずい。8月は少し余裕ができるので早めに寝ようと思います。\u003C/p>\n\u003Cp>アーロンチェアのヘッドレストを購入したのですが、最初は首が楽になったと思って喜んでいたのは束の間、座り方と姿勢が本来のアーロンチェアの座り方とは異なるようで、腰の痛みが出るようになりました。椅子を見直すのもありかもと思いますが、ひとまず正しい姿勢は常に意識したい。\u003C/p>\n\u003Cp>連日暑いこともあって身体を全く動かさなかった月でした。散歩もあまり行かなかったのが原因か足の疲れが結構酷かったです。（サウナも行っていないのが原因かも。コロナめ。。）8月も同じ感じが続きそうなので夜の散歩頻度を増やそうと思います。\u003C/p>\n\u003Ch3 id=\"8月の目標\">8月の目標\u003C/h3>\n\u003Cul>\n\u003Cli>9月から休職を予定しているからちゃんと休職できるように仕事を整理する\u003C/li>\n\u003C/ul>",{"headings":2458,"localImagePaths":2467,"remoteImagePaths":2468,"frontmatter":2449,"imagePaths":2469},[2459,2461,2462,2463,2464,2465],{"depth":29,"slug":2460,"text":2460},"7月どうだった",{"depth":29,"slug":2074,"text":2074},{"depth":29,"slug":2076,"text":2076},{"depth":29,"slug":2078,"text":2078},{"depth":29,"slug":2080,"text":2080},{"depth":29,"slug":2466,"text":2466},"8月の目標",[],[],[],"2022/0810.md","2022/0726",{"id":2471,"data":2473,"body":2476,"filePath":2477,"digest":2478,"rendered":2479,"legacyId":2491},{"title":2474,"publishDate":2475},"Object.{pick, omit}のプロポーザルが良さそう","2022-07-26","### Object.{pick, omit}\n\nTC39のプロポーザルで[Object.{pick, omit}](https://github.com/tc39/proposal-object-pick-or-omit)がStage1に昇格していて使えたら便利そうだったので紹介します。\n\n***※提案段階なので変更される可能性があります***\n\nプロポーザル通りですが、あるオブジェクトの中から選択したkeyからなる新しいオブジェクトまたは、選択した以外のオブジェクトを新たに作成することができます。現状では、以下のような関数を作って行っていました。\n\n```js\n\nconst pick = (obj, keys) => Object.fromEntries(\n    keys.map(k => obj.hasOwnProperty(k) && [k, obj[k]]).filter(x => x)\n);\n\nconst omit = (obj, keys) => Object.fromEntries(\n    keys.map(k => !obj.hasOwnProperty(k) && [k, obj[k]]).filter(x => x)\n);\n\n```\n関数的にはこれでも読めば理解できますが、直感的ではないのでこれを解決する提案です。かの有名なLodashでも、```_.pick```と```_.omit```のメソッドが用意されているのでこちらを使うケースが多いかもです。\n\n```js\n// Pickする例\nconst object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pick(object, ['a', 'c']);\n// { 'a': 1, 'c': 3 }\n```\n今回提案されているプロポーザルでもほぼLodashと同じような構文になっています。\n\n```js\n\nObject.pick({a : 1, b : 2}, ['a']); // => {a: 1}\nObject.omit({a : 1, b : 2}, ['b']); // => {a: 1}\n\n```\n\n### 細かい箇所\n\n- プロトタイプチェーンは省略できます。\n- ```__proto__```になっていても使えるが非推奨なのであんまり使わない方がいいかも\n- 戻り値はプレーンなオブジェクト\n- Symbolで使いたい時はSymbol.iteratorをpickかomitした後にkeyを指定して実行（一度プロパティとして定義する）\n- エラーをthrowする場合はまだどうするか検討する必要ありそうだけど一旦は以下を想定しているっぽい\n\n```js\nObject.pick(Object.defineProperty({}, 'key', {\n   get() { throw new Error() }\n}), ['key']);\n```\n\n- Lodashの`_.pickby`とかは引数として組み合わせることで再現可能\n\n```js\nObject.pick({a : 1, b : 2}, v => v);\n\n```\n\n- プロポーザルの中にGoとかで既にある[スライスのプロポーザル](https://github.com/tc39/proposal-slice-notation)のリンクがあってJavaSriptでも検討しているようでした。","src/content/blog/2022/0726.md","f0f57d4e96d515bf",{"html":2480,"metadata":2481},"\u003Ch3 id=\"objectpick-omit\">Object.{pick, omit}\u003C/h3>\n\u003Cp>TC39のプロポーザルで\u003Ca href=\"https://github.com/tc39/proposal-object-pick-or-omit\">Object.{pick, omit}\u003C/a>がStage1に昇格していて使えたら便利そうだったので紹介します。\u003C/p>\n\u003Cp>\u003Cem>\u003Cstrong>※提案段階なので変更される可能性があります\u003C/strong>\u003C/em>\u003C/p>\n\u003Cp>プロポーザル通りですが、あるオブジェクトの中から選択したkeyからなる新しいオブジェクトまたは、選択した以外のオブジェクトを新たに作成することができます。現状では、以下のような関数を作って行っていました。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\n\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">pick\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">obj\u003Cspan class=\"token punctuation\">,\u003C/span> keys\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> Object\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fromEntries\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    keys\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">k\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> obj\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">hasOwnProperty\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>k\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">&#x26;&#x26;\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>k\u003Cspan class=\"token punctuation\">,\u003C/span> obj\u003Cspan class=\"token punctuation\">[\u003C/span>k\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">x\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> x\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">omit\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">obj\u003Cspan class=\"token punctuation\">,\u003C/span> keys\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> Object\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fromEntries\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\n    keys\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">map\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">k\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token operator\">!\u003C/span>obj\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">hasOwnProperty\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>k\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">&#x26;&#x26;\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>k\u003Cspan class=\"token punctuation\">,\u003C/span> obj\u003Cspan class=\"token punctuation\">[\u003C/span>k\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">x\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> x\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cp>関数的にはこれでも読めば理解できますが、直感的ではないのでこれを解決する提案です。かの有名なLodashでも、\u003Ccode>_.pick\u003C/code>と\u003Ccode>_.omit\u003C/code>のメソッドが用意されているのでこちらを使うケースが多いかもです。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token comment\">// Pickする例\u003C/span>\n\u003Cspan class=\"token keyword\">const\u003C/span> object \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token string-property property\">'a'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string-property property\">'b'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'2'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string-property property\">'c'\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">3\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n_\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">pick\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>object\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'a'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'c'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003Cspan class=\"token comment\">// { 'a': 1, 'c': 3 }\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>今回提案されているプロポーザルでもほぼLodashと同じような構文になっています。\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\nObject\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">pick\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">a\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">b\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'a'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// => {a: 1}\u003C/span>\nObject\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">omit\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">a\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">b\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'b'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// => {a: 1}\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Ch3 id=\"細かい箇所\">細かい箇所\u003C/h3>\n\u003Cul>\n\u003Cli>プロトタイプチェーンは省略できます。\u003C/li>\n\u003Cli>\u003Ccode>__proto__\u003C/code>になっていても使えるが非推奨なのであんまり使わない方がいいかも\u003C/li>\n\u003Cli>戻り値はプレーンなオブジェクト\u003C/li>\n\u003Cli>Symbolで使いたい時はSymbol.iteratorをpickかomitした後にkeyを指定して実行（一度プロパティとして定義する）\u003C/li>\n\u003Cli>エラーをthrowする場合はまだどうするか検討する必要ありそうだけど一旦は以下を想定しているっぽい\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">Object\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">pick\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>Object\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">defineProperty\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">'key'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n   \u003Cspan class=\"token function\">get\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \u003Cspan class=\"token keyword\">throw\u003C/span> \u003Cspan class=\"token keyword\">new\u003C/span> \u003Cspan class=\"token class-name\">Error\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">'key'\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>Lodashの\u003Ccode>_.pickby\u003C/code>とかは引数として組み合わせることで再現可能\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">Object\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">pick\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token literal-property property\">a\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token literal-property property\">b\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token parameter\">v\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> v\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\n\u003C/code>\u003C/pre>\n\u003Cul>\n\u003Cli>プロポーザルの中にGoとかで既にある\u003Ca href=\"https://github.com/tc39/proposal-slice-notation\">スライスのプロポーザル\u003C/a>のリンクがあってJavaSriptでも検討しているようでした。\u003C/li>\n\u003C/ul>",{"headings":2482,"localImagePaths":2488,"remoteImagePaths":2489,"frontmatter":2473,"imagePaths":2490},[2483,2486],{"depth":29,"slug":2484,"text":2485},"objectpick-omit","Object.${pick, omit}",{"depth":29,"slug":2487,"text":2487},"細かい箇所",[],[],[],"2022/0726.md","2022/0917",{"id":2492,"data":2494,"body":2498,"filePath":2499,"digest":2500,"legacyId":2501,"deferredRender":2196},{"title":2495,"publishDate":2496,"ogImageURL":2497},"眼精疲労専門店「目トロスカッと」に行ってきた","2022-09-17","/assets/massage-chair.png","import LinkCard from '../../../components/LinkCard.astro';\n\n久しぶりにマッサージに行ってきました。特に、首と目の疲れがひどかったので、重点的にマッサージできるところないかなと探していたところ、眼精疲労専門店を発見しました。\n\n\u003CLinkCard url=\"https://www.marunouchi.com/tenants/10259/index.html\" />\n\nお値段も安く、10~30分でお手軽だなと思い予約して行きました。予約自体は専用のアプリをダウンロードする必要がありますが、一瞬でできました。\n\n## 機械によるマッサージ\n\n予約の時間に到着したら、すぐに案内されマッサージが始まりました。東京駅の近くということもあり、退社した人たちが多くいました。実は、マッサージが始まる直前まで、てもみん的なマッサージなんだろうと思っていたのですが、「***1秒間で5400回も振動する謎のスティック***」で施術が始まります。（[公式サイト](https://metorosukatto.hp.peraichi.com/)に謎のスティックのイメージが載っています。自分がちゃんと見ていないのが悪い。。）\n\n初回だというのを伝えると、「最初びっくりするのと、痛いかもしれないので痛かったら遠慮なく行ってくださいね！」と言われ「？？？」となりました。\n\n説明が終わったら、ジェルのようなものを肩につけて、そのまま謎のスティックによって首と肩周りを10分、目のマッサージ10分の内容で施術スタート。\n\n最初肩に謎のスティックを当てられた時、もの凄いゾクゾクします。文章で説明するのが難しいのですが、とにかく1秒間に5400回振動があるので、思わず声が出てしまう程のゾクゾク感です。その後肩、首周りを中心に謎のスティックが当たるのですが、これがめちゃくちゃ痛く、奇声が出ちゃうぐらいでした。思いっきり手で肩と首を引っ張られる感じです。この引っ張られている時は、どうやら「コリ固まっている箇所をほぐしていて血流を良くしている」とのことらしく固まっていない人だと全然引っ張られずに終わることもあるみたいです。\n\n\n次は、目のマッサージで、眼精疲労に効く目のツボの場所を教えていもらいながら、謎のスティックで頭皮マッサージ込みで施術を受けました。これも首、肩と同じで痛かった。。\n\n## マッサージが終わってどうなったか\n\n目についてはマッサージ直後からスッキリした感じになりました。首と肩については少し軽くなったかなーってぐらいで速効性はなかったです。ただその日はぐっすり眠れた感がありました。スリープトラッキングの数字をみると、深い眠りがいつもより1.25倍も増えていたので、効果はあったのかなと思いました。エンジニアは、普段から目を駆使する職業なので辛くなる前に定期的にマッサージなどをして体調を整えたいところです。\n\n今回行った「目トロスカッと」は、まず体験してみてほしい感じです。自分の身体がどれぐらい凝っているのかを確かめにいくだけでも良いかもしれませんし、目は速効性があるので、疲れ目だなと思ったらサクッと20分でできるので良いと思います（東京近辺にしかないけど。。。）","src/content/blog/2022/0917.mdx","4d259e9b17af4c64","2022/0917.mdx","2022/0930",{"id":2502,"data":2504,"body":2508,"filePath":2509,"digest":2510,"legacyId":2511,"deferredRender":2196},{"title":2505,"publishDate":2506,"ogImageURL":2507},"有給で2ヶ月間休職します","2022-09-30","/assets/hammock.png","import LinkCard from '../../../components/LinkCard.astro';\n\n10月から11月末まで、2ヶ月休職します。\n\n\n所属している会社にこんな制度があるので、これを使って有給を2ヶ月取得しました。\n\u003CLinkCard url=\"https://notion.yumemi.co.jp/84c0a2ca079f420291f6a19c406356d2\" />\n\n休職期間中、日中は大学の授業だったり、今までやりたくてできなかった事だったり、本読んだり、家族と遊んで過ごす予定で、夜はひたすらゲームをしようと思います。\n\n\n本当は、半年ぐらい無給で休みたいなーとも思いましたが、半年も仕事しないでいると、環境を変えたくなって転職活動とかしそうな気がしたので、ミニマムな2ヶ月にしました。\n\n無事社会復帰できたら、休職生活を振り返りブログ書こうと思います。","src/content/blog/2022/0930.mdx","34b67781dc1f0077","2022/0930.mdx","2022/0922",{"id":2512,"data":2514,"body":2517,"filePath":2518,"digest":2519,"legacyId":2520,"deferredRender":2196},{"title":2515,"publishDate":2516},"「コンピュータシステムの理論と実装」を読んだ","2022-09-22","import LinkCard from '../../../components/LinkCard.astro';\n\n名著を読みました。\n\n\u003CLinkCard url=\"https://www.oreilly.co.jp//books/9784873117126/\" />\n\n「コンピュータ・サイエンスを独学で学ぶのにおすすめする本」として割と有名な本で、2,3年前ぐらいに購入しました。当時最初の何ページだけ読んで、挫折してそのまま読まなかったのですが、今年から放送大学で情報コースを学び始めたこともあり「今なら読めるのでは？」と思って読み始めました。\n\nこの本は、ハードウェアからソフトウェアを構築を行うことができる書籍で、電子回路によるブール論理、ブール算術からはじまり、最終的にはアプリケーションを開発するまでがゴールです。\n\n## 感想\n\nめちゃくちゃ良かったです。とにかくコンピュータの各モジュールがどうやって動いているのか、何をしているのかを把握することができました。今までコンピュータは「0,1の世界」「ブラックボックス」という印象があり、ただひたすらとんでもないスピードで計算している理解しかなかったのですが、低レイヤーの入門として実際どういうモジュールがあるのかを知れたので、ブラックボックス感はこの本を読んだことでなくなりコンピュータの見方が変わりました。もちろん大学の授業で近いことは学んでいたのですが、自分が、本書を読むモチベーションとして、「ざっくりコンピュータの中身って何をやっているのかを知りたい」だったのでより解像度が上がった気がします。\n\n基本的なNANDゲート、条件分岐、順序回路、機械語、コンピュータアーキテクチャを学び、アセンブラがあってVMがあってプログラミング言語をコンパイルするためのコンパイラがあってみたいな感じで、章ごとに順番になっているのもとても理解がしやすかったです。逆に言うと章ごとに機能が独立しているので、興味がある分野だけ学ぶでも有意義だと思います。\n\n各章ごとに実践があるのですが、自分はアセンブラあたりまでしかやっていないです。しかも結構カンニングしながら写経していました。（実装に使うツールや答えもネットに公開されています）最初の方は頑張ってやってみたのですが、設計して実装するのにかなりの時間が掛かるので諦めました。実践に関しては、手を動かせば更に理解できるかなと思いますが、無理をしてやる必要はないと個人的には感じます。ただ読むだけでもかなり学びになります。アルゴリズムを事前に学んでおくと良さそうです。（大学で学んでおいてよかった。。）\n\n特に個人的に良かった章は、「5章:コンピュータアーキテクチャ」「6章:アセンブラ」「10~11章:コンパイラ」の3つです。\n\nコンピュータアーキテクチャは、ノイマン型アーキテクチャのを知ることができ、メモリ、CPUなどを実際に手を動かしながら実装することができます。\n\n\u003CLinkCard url=\"https://ja.wikipedia.org/wiki/%E3%83%8E%E3%82%A4%E3%83%9E%E3%83%B3%E5%9E%8B\" />\n\n\nそして実装したメモリ、CPUを使ってHackコンピュータを作っていきます。今まで図しか知らなかったことがそれぞれメモリとCPUやレジスタがお互いどういう役割をしているのかを知れたことが良かったです。（レジスタにも更に色々な種類があることも知れた。）\n\n\nアセンブラについては、具体的な流れを知れたことが良かったです。パースをしてアセンブリをビットコードにしてみたいな今まで知らなかった流れを知ることができました。（シンボルテーブルというものも初めて知りました。）\n\nコンパイラの章は、一番難しい箇所でした。当然実装も無理だと思って最初から諦めてました。ただ構文解析するにあたってトークナイザ、パーサというモジュールがあってそれぞれ何をするものなのかや、再帰下降構文解析などの手法で構文解析していくことなど内容としては、一番面白いところではありました。（自然言語処理の授業を受講していたことで、概念的なことは理解できた状態で読めていたこともありますが。。）\n\n自分は、普段当たり前のようにTypeScriptを使っていますが、実際にコンパイルしてくれるコンパイラはどうやって構文解析しているのか興味はあるけれども、深くは知れていないし、普段意識することもないなと思っていました。ただこの章を読んで、コンパイラを作ったり内部実装を知ることはエンジニアにとって大事なことで、スキルも一気に伸ばせるなと感じました。","src/content/blog/2022/0922.mdx","b1950fe79d9ead44","2022/0922.mdx","2022/0911",{"id":2521,"data":2523,"body":2526,"filePath":2527,"digest":2528,"legacyId":2529,"deferredRender":2196},{"title":2524,"publishDate":2525},"事業をエンジニアリングする技術者たちを読んだ（改訂版）","2022-09-11","import LinkCard from '../../../components/LinkCard.astro';\n\n読みました。2年前の初版も読んだのですが、改めて全部読み直しました。とにかく全エンジニアは読んで損はない本です。\n\n## 改訂版\n\n今回2年経っていることもあり、それぞれのプロジェクトの後日談が追記されています。更に、新規で2つ「テレシー」と会社統合にあたっての「基盤システム統合プロジェクト」の2つが追加されています。\n\n後日談については、どれも当時の現場担当者の退職、コロナによる状況の変化、方針の転換など生々しい状況が書かれていました。後日談の、内容はどれも10ページいかない程度で、簡素な内容だったので、詳しい経緯などは書かれていませんでしたが、***エンジニアリングなんてものは、日々変化していくのが当たり前でそれを受け入れないと前に進むことのできない職業***というのを、改めて感じました。\n\n自分の身の回りでも主担当が退職したり、プロジェクトを去ったりすることがありました。そんな時「あの人いなくなったらこのプロジェクト終わったわ。。」って最初は思うのですが、少し時間が、経つと自分の振る舞いや立ち位置などを考えるようになり、周りのメンバーについてもどうすればよいか考えるように自然になります。そして行動するのですが、これは、その状況を受け入れて前に進む覚悟をしているんだなと思いました。（たまに前ではなく後ろに進むこともあるけども）\n\n新しく追加された「テレシー」と「基盤システム統合プロジェクト」についても現場の状況が想像できる内容で、とても読み応えがありました。テレシーは、データサイエンスのエンジニアがいない！からはじまり、最終的には、適任者をみつけ更には、新卒のエンジニアに教育までして少数チームでうまく周るようになるまでを描いているが、「休んだらバックアップする人間がいない状況は辛かった」という言葉が生々しく本当にそうだろうなと思った。\n\n基盤システム統合プロジェクトは、バックオフィスの統合では、失敗が許されないプロジェクトということで、かなりのストレスが掛かりそうなプロジェクトで正直自分は耐えられるか分からないなと思いながらも、全職種の協力を得ながらエンジニアリングしていく姿には、感動しました。これこそ「真のエンジニアリング」という気がしました。\n\n\n## 良かったところ\n\n初版からの箇所で特に良いなと思った箇所が、3つあります。\n\n- 「新しくジョインしたメンバーにはその日に、環境構築からリリースまでを行う」\n- 「ドキュメントはなく全てGithubのissueで管理している」\n- 「ビジネスと開発の距離の縮める」\n\nです。\n\n## 新しくジョインしたメンバーにはその日に、環境構築からリリースまでを行う\n\nこれは、あるあるですが、新しい職場だったり、プロジェクトに参画した際に初日は大体環境構築で終わることが多く、終業時には、慣れていないのもあっていつもより疲れたなと感じることがあります。それを、ジョインしたその日に、環境構築→実装→レビュー→デプロイまでしてリリースまでしてしまうという内容を、Zucksというプロダクトでは行われているようでかなり驚きました。（第2章より）\n\nそもそも文化として、みんなが、フルサイクルエンジニア思考である文化だったり、何か起きた時に、すぐに切り戻しができるようになっていたりと環境が整っているからこそできる芸当なのですが、とっても良い取り組みだなと感じました。リリースまでは無理でもリリースまでを、誰でも簡単に行える環境にしておくという意識をメンバー全員が持つことってすごく大切なことだと改めて思いました。\n\n## ドキュメントはなく全てGithubのissueで管理している\n\nこれも2章のZucksの中で語られていることで、所謂ドキュメントというものを書くことはなく、全てGithubのissueベースになっているらしくこれも良いなと思いました。issueが、良いかというより***一箇所に全てまとまっている***ことがとても大事で、検索のヒットのしやすさでも、issueは適していそうです。会議の議事録も全部PRベースになっていれば差分も見れますし、機会があればやってみたいなと思いました。ただ、どうしてもエンジニア以外も巻き込むのが、ハードルが高くてこれは3つめの良いところを実践していく必要がありそうです。\n\n## ビジネスと開発の距離の縮める\n\n第5章サポーターズの中で出てきた話で、Bizとdevで考え方が共有されておらず、既存システムが負債になってしまったところから、お互い時間を作って認識合わせのMTGをしてお互いの意見を述べながらプロダクトをリプレースする動きになったり、お互い歩み寄るために組織ごと再定義するまで行っていました。\n\nこれも結構あるあるな話で、エンジニアと非エンジニアの間での歪みというか、認識違いというかは結構あるなと思います。お互い腹を割って話すことが果たしてできているのかが肝になりそうですが、何かモヤモヤ感じていることがあったりしたまま仕事を進めるのは、非常に良くないことだなと改めて思いました。\n\n受託とかだと、営業とエンジニア間で特に歪みが生まれそうなので、定期的にコミュニケーションする必要があります。結構受け身になってしまいがちですが、エンジニアの方からアプローチを掛けていくことができると良さそうです。\n\n\n## 次回作に期待\n\nこの本の良いところは、twadaさんがリアルな現場で起きていることをインタビューすることで、実際のエンジニアリングの様子を俯瞰して見ることができることなので、是非また違う企業などをインタビューして次回作があると嬉しいなと思います。\n\n\n\u003CLinkCard url=\"https://www.lambdanote.com/products/carta\" />","src/content/blog/2022/0911.mdx","f169c3002fe3a990","2022/0911.mdx","2022/1004",{"id":2530,"data":2532,"body":2535,"filePath":2536,"digest":2537,"legacyId":2538,"deferredRender":2196},{"title":2533,"publishDate":2534},"BudouXがいい感じだった","2022-10-04","import LinkCard from '../../../components/LinkCard.astro';\n\n[BudouX](https://github.com/google/budoux)をブログに入れてみました。\n\n適用箇所は以下です。（ブラウザの幅を縮めたりしてご確認ください）\n\n- TOPページ上部の、自己紹介\n- 記事タイトル部分\n\nBudouXは、日本語と中国語の改行を自動でいい感じにしてくれるライブラリです。以下のzennの記事がよくまとまっています。（僕もこれで知りました。）\n\u003CLinkCard url=\"https://zenn.dev/junseinagao/articles/f4fd3bf790ef189f8c74\" />\n\n日本語の改行問題は、WEB業界では悩みのタネでレスポンシブサイトなどではSPのレイアウト時に、区切りの良いところで改行させたいというオーダーがよくあります。この時改行させたい箇所で、```\u003Cbr class=\"sp-only\">\u003C/br>```みたいなクラス（もしくは```span```タグとかで```display:inline-block```をつける）を表示してSP時にだけ改行させるみたいなことを、行っていました。\n\nしかし、これは本質的な解決ではありません。ユーザーのデバイスの幅はそれぞれ異なるので、自然に改行されることが望ましいです。この自然な改行がしてくれるのがBudouXなのです。機械学習で実行されしかもバンドルサイズも小さく使いやすいです。\n\n### 使い方\n\nCDN or YarnなどのパッケージマネージャでBudouXを読み込みます。自分は、最初yarnでインストールしたのですが、何故かいい感じに動いてくれなかったので、ひとまずCDNから使用しました。\n\n\n```html\n\u003Cscript type=\"module\" src=\"https://unpkg.com/budoux/bundle/budoux-ja.min.js\">\u003C/script>\n\n```\n\nあとは、自動改行を適用した箇所に専用のタグで囲います。\n\n```jsx\n\n\u003Cul class=\"space-y-12\">\n  {\n    items.map(item => (\n      \u003Cli class=\"space-y-[0.125rem]\">\n        {item.meta && \u003Cp class=\"text-dynamic-muted text-sm\" set:html={item.meta} />}\n        \u003Cp>\n          \u003Ca class=\"text-black dark:text-white underline hover:hover:no-underline\" href={item.link} rel=\"prefetch\">\u003Cbudoux-ja>{item.title}\u003C/budoux-ja>\u003C/a>\n        \u003C/p>\n        {item.description && \u003Cp class=\"text-dynamic-muted text-sm\">\u003Cbudoux-ja>{item.description}\u003C/budoux-ja>\u003C/p>}\n      \u003C/li>\n    ))\n  }\n\u003C/ul>\n\n```\n\n```\u003Cbudoux-ja>```タグで囲うと、ライブラリからWeb Componentが提供されており文節の途中で```\u003Cwbr>```タグが生成されます。\n\n![budoux](/images/budoux.png)\n\n詳しい使い方は[こちら](https://github.com/google/budoux/blob/main/javascript/README.md#web-components)に書かれています。もちろんnode.jsからも扱えるので、色々なシーンで使えそうです。\n\n- OGP画像をcanvasから出力するときにいい感じ改行された状態で画像を生成できる\n- ドキュメントとかをプログラムから生成する時にフォーマット用にいい感じで見やすく出力してくれる\n\n自分のブログは、mdxでも書けるようになっているので若干面倒ですが、mdx内でいい感じに改行したい箇所がでてきたら```\u003Cbudoux-ja>```で囲えば文章中でも使えるも良いです。\n\nNext.jsとかで使用する場合も```loadDefaultJapaneseParser```をimportしてきて文節を改行する用のHooksを作れば、汎用的に使えますし、「改行は全てbudouxに任せます！！」という調整ができれば普通に、プロダクトとかでも使えそうな雰囲気は感じます。","src/content/blog/2022/1004.mdx","ef0df88d1ca639b1","2022/1004.mdx","2022/1005",{"id":2539,"data":2541,"body":2544,"filePath":2545,"digest":2546,"legacyId":2547,"deferredRender":2196},{"title":2542,"publishDate":2543},"2022年9月の振り返り","2022-10-05","import LinkCard from '../../../components/LinkCard.astro';\n\n### 9月どうだった\n\n[休職前](/blog/2022/0930)ということもあり、仕事は控えめにしつつ休職中にやりたいことを整理したり自分のキャリアを見つめ直したりする日々を過ごしていました。\n\n### 技術系\n\n![2022年9月の草](/images/202209_github.png)\n\n仕事以外は、ほとんどコミットしなかったです。\n\n仕事では、[Slate.js](https://www.slatejs.org/examples/richtext)というリッチエディターの機能追加などをしていました。今までバグ対応なでしたかコードに触れる機会がありませんでした。今回機能追加することによってドキュメントを読んで理解が深まりました。Quill.jsは前職で触ったことがあったのですが、ツラミが多かったイメージでSlate.jsはその点クセはあるものの提供されている機能やHooksなども扱いやすく慣れてしまえばストレスなく開発ができました。\n\nまた9月を持って今のプロジェクトから休職の関係もあり離れることになりました。12月から仕事を再開しますが、このまま次の仕事が決まらないと社内ニートの状態なので何か仕事を見つけないと思っています。\n\n\u003Cp>\u003Cbudoux-ja>8月から読書中だった「コンピュータシステムの理論と実装」を読み終わりました。（[ブログ書きました](/blog/2022/0922)）\u003C/budoux-ja>\u003C/p>\n\nこの本を読んで、コンパイラに凄い興味が湧きました。自分で実装してみると学びがありそうなので、チャレンジしたい気持ちがあるのですがそもそもスキルもそうだし設計とかもわかっていないので今はネタを探しています。\n\nその中でもruiさんの[低レイヤを知りたい人のためのCコンパイラ作成入門](https://www.sigbus.info/compilerbook)というのを見つけ丁度C言語を大学で受講したこともあり、流し読みしてみようと思います。また、[TypeScriptのコンパイラ](https://github.com/Microsoft/TypeScript/tree/main/src/compiler)もソースコードを読むだけでも勉強になりそうなので、これも見てみようと思います。\n\n\n### プライベート\n夏休みが終わり、息子の幼稚園が再開しました。ただ体調不良が続いたりして1/3ぐらいはお休みしていました。寒暖差が結構あったからも知れません。\n\n高校生ぶりぐらいに、髪を染めてみました。市販の脱色とヘアカラー剤を買いました。（色はネイビーブルー）\n\n\u003CLinkCard url=\"https://www.cosme.net/product/product_id/10213002/sku/1099630\" />\n\n脱色はいい感じにできました。しかしネイビーブルーのヘアカラー剤をつけて30分放置してから、シャワーしたのですが、まさかの黒髪に戻ってしまいました!!!（光の当たり具合で薄く青色に見えないこともない）多分ヘアカラー剤をもう少しちゃんと隅々まで付けなかったのと、時間ももう少し長めに放置すれば良かったのかなと思います。\n\n2週間ぐらい経過したのですが、髪色が落ちてきて茶色になってきました。もう少し色落ちしたら再チャレンジしてみたいと思います。\n\n### 読書\n\n- 型システム入門 プログラミング言語と型の理論\n  - ついにこの本に手を出してみました。かなり難しいので挫折しそうですが、ゆっくり読んでいきます\n- ヘルプサイトの作り方\n  - まだ読み始めたばかりですが、良書の予感です。正しく伝える技術が貧弱な僕には、うってつけの本かも知れません。\n\n### 健康\n\n久しぶりに風邪かな？という感じで、喉だけが痛かった時期が1週間続きました。声も出せない感じで辛かったですが、コロナは陰性だったので謎です。妻も体調不良で一日だけ高熱が出て、その後に喉が痛くて自分と同じ症状になっていました。妻もコロナは陰性で病名が不明なままです。息子の体調不良も含め寒暖差に弱い家族なのが確定しました。\n\n睡眠不足が少し続いたので、休職中は睡眠時間を増やして体調を整えたいです。","src/content/blog/2022/1005.mdx","a30d5acdbfcddd15","2022/1005.mdx","2022/1018",{"id":2548,"data":2550,"body":2553,"filePath":2554,"digest":2555,"rendered":2556,"legacyId":2564},{"title":2551,"publishDate":2552},"スマホのアプリを最小限にすると気分がいい","2022-10-18","外出もほとんどしないし、無駄に起動しないアプリも多かった（数えたら40個もあった。）ので思い切って断捨離した。\n\n![スマホ画面](/images/sp_window.jpg)\n\nもちろん設定アプリやカメラアプリなどの標準のやつと、フォトアプリ、LINE（家族との連絡網）だけはそのまま残したが、画面には表示しないようにした。\n\nその他残ったアプリはスクショ通りで以下になり、それ以外のアプリは問答無用で削除した。\n\n- Google Pay\n  - Suica、クレカなどを一元管理しているため\n- radiko\n  - 散歩中のお供\n- Podcast\n  - 散歩中のお供\n- Fitbit\n  - Versa3を使用しているため管理用\n- Audible\n  - 散歩中のお供\n- Chrome\n  - 調べ物\n- Notion\n  - 普段のライフログ、簡易メモ、スマホからはほぼ見ないがタスクの確認\n- Calendar\n  - 念の為。通知用\n- Spotify\n  - 散歩中のお供\n- Pocket\n  - ストックしておいた記事を消化。Pocketにストックすること自体はPC or iPadでやっている\n\n普段の散歩時に必須となる耳で聴く系のアプリは、アンインストールできなかった。\n\nSlackほぼPCからなのでスマホからはアンインストールした。前までは会社のSlackをスマホから見ていたが、セキュリティの観点と、常にSlackを見る必要はないので削除した。Gmailも削除した。\n\nTwitterは、PCではTweetDeckを常時起動している。アンインストールしたことで、スマホからTwitter見ることがなくなり、外出時もiPadや書籍を持っていくことで、読書の時間が圧倒的に増えた。（iPadはwifiモデルなので、家以外ではほぼネット接続していない）\n\nちょっと困ったことで言うと、近くの薬局やスーパーのアプリでポイントカード提示を、スマホから出来なくなったことぐらいだが、物理のポイントカードを持っていけば、問題ないしひとまずこの運用で良さそうだった。\n\n家族との共有アプリでNotionを使いこなせばLINEも削除できるかもと一瞬考えたが、利便性が明らかに下がるので断念した。\n\n## 感想\nスマホなんて見なくても本があれば時間は潰せるし、時間も有効活用できるのでおすすめ。","src/content/blog/2022/1018.md","a6b0917236fce136",{"html":2557,"metadata":2558},"\u003Cp>外出もほとんどしないし、無駄に起動しないアプリも多かった（数えたら40個もあった。）ので思い切って断捨離した。\u003C/p>\n\u003Cp>\u003Cimg src=\"/images/sp_window.jpg\" alt=\"スマホ画面\">\u003C/p>\n\u003Cp>もちろん設定アプリやカメラアプリなどの標準のやつと、フォトアプリ、LINE（家族との連絡網）だけはそのまま残したが、画面には表示しないようにした。\u003C/p>\n\u003Cp>その他残ったアプリはスクショ通りで以下になり、それ以外のアプリは問答無用で削除した。\u003C/p>\n\u003Cul>\n\u003Cli>Google Pay\n\u003Cul>\n\u003Cli>Suica、クレカなどを一元管理しているため\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>radiko\n\u003Cul>\n\u003Cli>散歩中のお供\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Podcast\n\u003Cul>\n\u003Cli>散歩中のお供\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Fitbit\n\u003Cul>\n\u003Cli>Versa3を使用しているため管理用\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Audible\n\u003Cul>\n\u003Cli>散歩中のお供\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Chrome\n\u003Cul>\n\u003Cli>調べ物\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Notion\n\u003Cul>\n\u003Cli>普段のライフログ、簡易メモ、スマホからはほぼ見ないがタスクの確認\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Calendar\n\u003Cul>\n\u003Cli>念の為。通知用\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Spotify\n\u003Cul>\n\u003Cli>散歩中のお供\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Pocket\n\u003Cul>\n\u003Cli>ストックしておいた記事を消化。Pocketにストックすること自体はPC or iPadでやっている\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>普段の散歩時に必須となる耳で聴く系のアプリは、アンインストールできなかった。\u003C/p>\n\u003Cp>SlackほぼPCからなのでスマホからはアンインストールした。前までは会社のSlackをスマホから見ていたが、セキュリティの観点と、常にSlackを見る必要はないので削除した。Gmailも削除した。\u003C/p>\n\u003Cp>Twitterは、PCではTweetDeckを常時起動している。アンインストールしたことで、スマホからTwitter見ることがなくなり、外出時もiPadや書籍を持っていくことで、読書の時間が圧倒的に増えた。（iPadはwifiモデルなので、家以外ではほぼネット接続していない）\u003C/p>\n\u003Cp>ちょっと困ったことで言うと、近くの薬局やスーパーのアプリでポイントカード提示を、スマホから出来なくなったことぐらいだが、物理のポイントカードを持っていけば、問題ないしひとまずこの運用で良さそうだった。\u003C/p>\n\u003Cp>家族との共有アプリでNotionを使いこなせばLINEも削除できるかもと一瞬考えたが、利便性が明らかに下がるので断念した。\u003C/p>\n\u003Ch2 id=\"感想\">感想\u003C/h2>\n\u003Cp>スマホなんて見なくても本があれば時間は潰せるし、時間も有効活用できるのでおすすめ。\u003C/p>",{"headings":2559,"localImagePaths":2561,"remoteImagePaths":2562,"frontmatter":2550,"imagePaths":2563},[2560],{"depth":22,"slug":249,"text":249},[],[],[],"2022/1018.md","2022/1007",{"id":2565,"data":2567,"body":2570,"filePath":2571,"digest":2572,"legacyId":2573,"deferredRender":2196},{"title":2568,"publishDate":2569},"自分なりのゼロ秒思考","2022-10-07","import LinkCard from '../../../components/LinkCard.astro';\n\n普段ハウツー本とかは読まないんですが、タイトルだけに惹かれて「ゼロ秒思考」という本を読みました。（2時間あれば読み終わります）\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/-/en/%E8%B5%A4%E7%BE%BD-%E9%9B%84%E4%BA%8C-ebook/dp/B00HQ6O7BO\" />\n\nこの本はざっくり言うと「***とにかくどんなことでもいいからA4用紙に思ったことを気にせずメモしろ***」という内容でした。1テーマを1ページで1分、1日10ページを基本としてメモを書いていく。そうするとモヤモヤが整理されてスッキリしてストレスが減るということでした。このメモというのは、人に見せるものではないので\n\n- 「さっきあの人不機嫌だったけどなんでだろう」\n- 「自分のキャリア心配」\n- 「上司に相談しにくいのなんでだろう」\n\nなどとにかく今感じて思っているモヤモヤだったり、考えたいことがある時に後回しにせずその場で感情を書きなぐるイメージです。\n\n確かに書くことでスッキリすることはあるので良さそうだと思いました。Slackのtimesチャンネルだったり、Twitterでも適当に考えていることなどをつぶやくことはありますが、感情むき出しで書かずに一度頭で考えて投稿しているのでフィルターが一応あります。その前段階という意味でもとにかく思ったとおりに書きなぐることで思考が整理されるのは同意です。\n\nしかし、本書のような方法を試そうとすると、紙でメモすることになります。大量の紙が必要なのと、自分は超絶字が下手くそなので何を書いたか分からん状態になり、違うところでストレスになりそうだと感じました。自分は普段からNotionを使っているので、Notionでゼロ秒思考を取り入れてみます。\n\n## Notionで整理する\n\n基本メモはNotionで行うことがほとんです。毎日dailyというデータベースから1つだけページを生成してその日のメモを書いています。生成した時に、予め用意したテンプレートで作ると、今日やるタスク一覧（別のタスク管理しているデータベースからリレーションしたもの）や、気になったリンク記事（同じくリレーションしたもの）などいつも使っている他のNotionページの情報を出しています。しかし。日によっては気になったリンク記事がない日があったり、メモ中にタスクの表示が目線に入り気になったりと若干モヤモヤしていました。\n\n本書を読んでから、毎日生成しているdailyページをテンプレートから作るのではなく、真っ更なページを作るようにしたら、結構スッキリした状態でメモや思ったことを、ストレスなく書き殴れるようになりました。（まだ2日ぐらいしか経ってないけど）やはりシンプルに越したことはないようです。メモには、本当に人に見せれないことを書いてしまっています。一つだけ注意事項があるとするとMTG時など、でうっかり画面共有してしまうと大変なことになりますww\n\n1テーマを1ページで1分という方法については、1テーマごとにNotionの区切り線を使って、5分間箇条書きで書いています。(1分は流石に短いと感じます...)とにかく考えずに書くので誤字脱字がめちゃくちゃ多いですが、たしかに訓練すれば、もっと沢山書けそうだなと思いました。\n\n本書では、「メモは見返さないし、常に思考は上書きするものなので、同じことを何回も書くことはOK」と紹介されていました。確かに気持ちは分かるのですが、自分は毎週日曜日の夜に時間を取って、今週書いたdailyのメモを見返して、振り返りを行う時間を設けています。この振り返りの時間で来週のアクションを決めたりしておりとても有意義な時間なので、本書とは異なるけど1週間でメモを見返すようにしています。ただ振り返りが終わるとその後はほとんどそのメモを見ることはありません。\n\nメモを書くタイミングについては、今までは「これ考えなきゃ」と思った時にタスク管理しているNotionページに「〇〇について考える」ようなタスクを追加していました。GTDでタスク管理しているので、そうしていたのですが、余計なタスクが増えるだけで割と後回しにしていました。とりあえず5分思ったまま書きなぐることで整理されることもあればもう少し明確なタスクにできる時もあるので、なるべく後回しにしないように心がけようと思いました。\n\n## おわりに\nまあメモの取り方やタスク管理などについては自分が飽き性なこともありやり方を結構変えては来ているのでまた変わるかもしれませんが、ひとまず1-2か月ぐらいは続けてみようと思います。","src/content/blog/2022/1007.mdx","f347f375a0c20672","2022/1007.mdx","2022/1008",{"id":2574,"data":2576,"body":2579,"filePath":2580,"digest":2581,"legacyId":2582,"deferredRender":2196},{"title":2577,"publishDate":2578},"preactのsignalsのドキュメントとソースコードを少し読んだ","2022-10-08","import LinkCard from '../../../components/LinkCard.astro';\n\nこれを読みました。\n\n\u003CLinkCard url=\"https://preactjs.com/guide/v10/signals\" />\n\n\n### signalによる最適化\n今までuseStateで書いていた部分をsignal()と書くことで状態管理を行えます。signalには```.value```というプロパティがあり、この```.value```が更新される時だけ再レンダリングが走る仕組みになっています。setState的なのは、内部的には[このあたりでやってます](https://github.com/preactjs/signals/blob/main/packages/core/src/index.ts#L275)\n\nつまりpropsで渡ってきた時などでは、参照のみになるため再レンダリングが走らないようです。（useStateだと毎回再レンダリングされる）\n\n値更新時に、現在の値を同じ値を代入してもsignal自体は更新されません。\n\n以下ベーシックな記述を公式からそのまま拝借\n```jsx\nimport { signal } from \"@preact/signals\";\n\n// Create a signal that can be subscribed to:\nconst count = signal(0);\n\nfunction Counter() {\n  // Accessing .value in a component automatically re-renders when it changes:\n  const value = count.value;\n\n  const increment = () => {\n    // A signal is updated by assigning to the `.value` property:\n    count.value++;\n  }\n\n  return (\n    \u003Cdiv>\n      \u003Cp>Count: {value}\u003C/p>\n      \u003Cbutton onClick={increment}>click me\u003C/button>\n    \u003C/div>\n  );\n}\n\n```\n\n### API\n状態管理系で必要そうなAPIは、以下のように揃っていそうです。\n\n- 他のsignalを元に計算して、新しいsignalを作るときは```computed()```を使用できます。\n- signalが変更した時に何か処理をしたいときは、```effect()```を使用できます。(useEffectと似ていますが若干違いそう。)\n- 複数の値の更新を1つにまとめて行う関数として、```batch(() => {})```が使用できます。\n\nまた、signalは、セッターを叩けば値が更新される仕様上、グローバルな状態管理（useContextみたいな使い方）として使用できます。なのでコンポーネントだけに状態を、閉じたい場合は```useSignal()```のようなHookが用意されています。内部実装的には、coreに各種APIのビジネスロジックがあり、preactとreactそれぞれHooksとして提供できるように、別ファイルに切り分けられていました。\n\nhttps://github.com/preactjs/signals/tree/main/packages\n\n実は、[Reactでも使用](https://github.com/preactjs/signals/tree/main/packages/react#react-integration)できるんですね。。。\n\n### 感想\n\nやっぱり値の更新の記述が、一番気になる感じでしょうか。useStateだとset関数を必ず使うことで、なんとなく分かりやすかったですが、signalの場合は```.value```に代入する書き方になるので慣れるかどうかです。ただ今までも、オブジェクトや配列の一部の値を更新したい時は、useStateで似たような書き方はしていたので、あまり気にならないかも。\n\nグローバルなsignalだけちょっと怖さもあるのですが、個人的には、結構良いなと思いました。\n\n後実際のソースコードの量がかなりシンプルなので、読むだけでお勉強になりました。\n\n\n\u003CLinkCard url=\"https://github.com/preactjs/signals/blob/main/packages/core/src/index.ts\" />","src/content/blog/2022/1008.mdx","3aaa5906b25e4716","2022/1008.mdx","2022/1020",{"id":2583,"data":2585,"body":2588,"filePath":2589,"digest":2590,"legacyId":2591,"deferredRender":2196},{"title":2586,"publishDate":2587},"子育てしながら新しい技術習得する不安の記事を読んだ","2022-10-20","import LinkCard from '../../../components/LinkCard.astro';\n\n以下を読んだ。\n\u003CLinkCard url=\"https://starhoshi.hatenablog.com/entry/2022/10/18/162433\" />\n\n自分は、現在4歳になる息子がいる。最近は幼稚園に通い出し、その時間は子供がいなかったり、ちょっとずつ1人で遊びだしたりして、以前より少し余裕が出てきたかなと思う時はある。ただそれでも寝かしつけだったり、息子の世話などそれなりに時間を使っている。\n\n確かに、0歳から3歳ぐらいまでは時間がなく勉強もそうだし、自分の時間すらもあまり取れなかった。コロナになってから今の会社に入るまではリモートではなかったし、日中は、ずっと息子の世話をしていたので、妻の負担も相当大きかったはず。\n\n今の会社に転職してから完全フルリモート、フルフレックスで子供の世話もしやすくなった反面、常に近くに家族がいるので、家族のことが気になったりして仕事に集中できなかったり、夜になってふと「昼間ご飯食べる前に、嫌だ〜ってグズってたな」とか振り返ったりするようになって考えだすと自分の時間が取れないなんてこともある。会社の環境って凄い大事だなと感じた瞬間でもあった。\n\n自分は、勉強熱心なタイプではないので「まあいっか！」って感じで向上心が人より高いタイプではないと思っているが、この先のキャリアとかに不安がないわけではない。だから今も睡眠時間を削って、社会人大学生をやっているのかもしれない。\n\n> 最近は21時に寝て4時に起きて、4~6時の間になんとか自分の時間を作ろうとしている。\n\n自分のタイムスケジュールは、大体19時からご飯を食べて19:30からお風呂に入り、20:00から20:30の間には、子供と一緒に布団に入って寝かしつけをする。必ず絵本を3冊まで読むことを決めていて読み聞かせをして、大体21:00から21:30までに子供が寝て自分も一緒に寝てしまう。22:00に妻に起こしてもらうようにしていて起きたら自由時間って感じにしている。\n\nそこからは大学の授業をしたり、本読んだり、ゲームしたり、仕事があれば仕事したりと日によって異なるが、3:00か遅くても4:00に寝て、8:00に起きる生活をしている。（最近は休職中なのでもう少しはやく寝ている。）\n\n妻は今働いていないが、この先やりたい仕事を見つけて共働きとかになったら、更にドタバタして時間なくなるだろうなーとは思う。\n\n家にはルンバもないし、食洗機などQOLがあがる家電がないけどなんとかなってる。（誰か買ってください！！）投資して、ある程度自動化すれば負担は減らせるので、検討はしている。\n\nグダグダ書いたけどそもそも自分は、***息子と遊ぶ時間が一番幸せな時間かつ一番楽しい***と思っているので、勉強ができなくても全然平気な人間ではある。4歳になればポケモンカードのルールも覚えてちゃんと対戦できるし、ガンプラも一緒に作れる。ゲームは、コントローラーがちゃんと握れないけど、簡単なゲームだったらできるしとにかく一緒に何かやるのは楽しい。\n\n今の時間を大切にしたいと思っているので、少なくても小学校入学までは、多分この生活を続けるんだろうなと思っている。\n\n> モバイルアプリエンジニアはこの先オワコンになると思っており、\n\nあまりアプリ界隈に詳しくないんですが、そうなんですか？","src/content/blog/2022/1020.mdx","bbc9683fa4207e0b","2022/1020.mdx","2022/1021",{"id":2592,"data":2594,"body":2597,"filePath":2598,"digest":2599,"legacyId":2600,"deferredRender":2196},{"title":2595,"publishDate":2596},"エンジニアリングマネージャーのしごとを読んだ","2022-10-21","import LinkCard from '../../../components/LinkCard.astro';\n\n\u003CLinkCard url=\"https://www.oreilly.co.jp/books/9784873119946/\" />\n\n\n自分は、エンジニアリングマネージャー（以下EM）ではないし目指しているわけではないけど、年齢的にも読んでおいた方が良いかなと思ったので読みました。\n\n一言でいうとこれからEMになる人に取っては、心構えができるというか準備ができるいい本でした。自分もリードエンジニアっぽいポジションにはいるので共感する部分もありました。\n\n特に印象に残ったものを紹介します。\n\n## 委譲の難しさ\nEMになれば、タスクをエンジニアにお願いすることになりますが、それ例外にもEMはハードワークになりがちで割り込みも多いです。可能な限りタスクを他の誰かにお願いするべきですが、この委譲の仕方がめちゃくちゃ難しいです。丸投げにしない程度にいい感じで、タスクを渡す方法を迷ったりすることもあります。\n\n本書では、委譲の物差しが掲載されており、委譲した後に自分がどう関わるかを段階によって分けていました。「このタスクは、サポートが必要だから時々自分がチェックするか」「このタスクは、この人だったら前やったしアウトカムもいいから自分のサポートはいらないか」と言った具合です。結局の所メンバーの状況やスキルなどを把握した上で整理して委譲するということです。\n\nまたやってはいけないこととして、「一度お願いしたタスクを取り返すこと」が書かれており、学習の機会を与えるのもEMの仕事というのは確かにと思いました。\n\n\n## 自分のコントロールではないものへの不安\nコントロールの三分法というのがあり\n\n- コントロールできるもの。自分たちの願望やゴール\n- まったくコントロールできないもの。天候など\n- ある程度コントロールできるもの。テニスの試合に勝ちたいのような願望\n\nというのがありEMに取って大事なのは、***ある程度コントロールできるもの***ということです。コントロールできないものについては結果について心配しないという整理にすることで平静を保ち、「ある程度コントロールできるもの」については、「内部ゴールを設定してベストを尽くす」ことでコントロールを分類するのが大事ということが、書かれておりなるほどと共感しました。\n\n自分は、結果については全体的に振り返りしたいタイプだったのですが、コントロール自体を先に分類しておくことで心配しないようにすれば、本当に振り返りが必要なものが見えてくると本書を読んで感じました。\n\n## 自己管理\n\nEMは全体のキャパいっぱいまで仕事を埋めてはいけないという話で、これは納得というか共感する部分でした。\n\n自分も仕事する時に、稼働を100%以上にしてしまう癖というか業務時間に仕事がないのはあまり好きではない人間なのでキャパを埋めたがる傾向にあります。しかし、最近やっと「非効率だ！」ということに気づき次から少し余裕を持って何か緊急対応や突発的な仕事に身体を空けておくことに決めたので本書には完全に同感です。精神的にもいいはずですし...\n\nそもそも複数のプロジェクトのリードするのってかなり高度なことだと思うので、うまくバランスを取らないとメンバーにも迷惑をかけることにもなりますからね...\n\n\n## アウトプットをどう見せるか\n\nEMのアウトプットってエンジニアみたいに成果物が見えにくいとずっと思っていたのですが、言語化というか方程式が書かれていました。\n\n> マネージャのアウトプット = あなたのチームのアウトプット ＋ あなたが影響を与えた他のチームのアウトプット\n\nまさにそうだなと思いました。エンジニア個人個人の頑張りも当然ありますが、チームで開発しないといいプロダクトは作れないと思っているので、この方程式は頭に刻んでおきたいです。\n\n他にも、以下のように色々いいなと思うことがあったので、箇条書きで紹介します。\n\n- マネジメントバグを解消するために目安箱を用意する。この目安箱はすべての人が閲覧、書き込みができるので透明性を保つことができる\n- コーチングは答えではなくその人の方向を誘導するものである\n- 1on1などで、相手がしんどそうな時は決してセラピー的なことはしていけない（EMはセラピストではないので適切な産業医などに相談を促す）\n\nギルドを作ったりすることで関係性を構築したり、採用についてもフレームワークを使って効率化するなど今の業務に関連する内容もあったので実践できる箇所は、実践してみたいと思いました。","src/content/blog/2022/1021.mdx","c0c96d2eca0ec04b","2022/1021.mdx","2022/1027",{"id":2601,"data":2603,"body":2606,"filePath":2607,"digest":2608,"rendered":2609,"legacyId":2628},{"title":2604,"publishDate":2605},"情報のインプット 2022","2022-10-22","ここ最近の技術のインプットについてまとめる\n\n- Twitter\n- RSS\n- Podcast\n\n取得した情報は、以下の方法で消化している\n- とにかく[Pocket](https://getpocket.com/)にSAVE（あとで読む方式）\n- 1日3回時間を使って消化\n- 良かった記事は、Pocketでお気に入りする→IFTTT経由でNotionのDBへ。\n- 読んだ記事の感想とかは毎日の日記になぐり書き\n\n\n## Twitter\n- 今までと大きく変わらない。TweetDeckを使ってリストごとに表示して取得\n- 大体著名なエンジニアが発信するツイートしているのでそこで取得（ありがたい）\n- Reactのコアメンバーや、関係者をリスト化しておくと割と情報がはやい\n- TwitterのURLのままPocketに保存している\n\n\n## RSS\n- [Inoreader](https://www.inoreader.com/)を使って取得\n  - Inoreaderについては、[こちらの記事で紹介した](https://www.ryokatsu.dev/blog/2022/0611)\n- Twitterの内容と重複することはある\n- 基本的には、各種ブラウザやのリリース情報だったり興味のあるブログだったりをRSSしている\n- 全部読み切れないのは承知の上で運用している。\n\n## Podcast\n- フロントエンドに関しては、[mozaic.fm](https://mozaic.fm/)を欠かさず聴いている\n  - 少し前から「Monthly Platform」「Monthly Ecosystem」と分割されたことで更に聴きやすくなった。\n  - ショーノートを眺めるだけでも勉強になる。かなり深い所まで話されておりmozaic.fmでかなり補完できている。\n- その他にも定番の「Rebuild」「fukabori.fm」など。最近はテック系のPodcastが充実している。\n\n\n## Pocket\n\nNotionにとにかく保存していたが、最近はPocketに溜め込む運用に落ち着いてる。理由としては、Pocketの機能で音声読み上げがあり、これがかなり精度がいい。（多分SPアプリ限定）散歩しながら消化できる\n\n読み終わった後はPocket内で、スターを押したタイミング（お気に入り）でIFTTT経由で、NotionのDBに気に入った記事だけ放り込んでいる。\n\n## 意識していること\n- 無理にインプットしない\n- その場で記事を読まない（集中力がなくなるので）\n- 時間ができた時でも極力読まない。1日3回までと決めている","src/content/blog/2022/1027.md","63554bf857e627a1",{"html":2610,"metadata":2611},"\u003Cp>ここ最近の技術のインプットについてまとめる\u003C/p>\n\u003Cul>\n\u003Cli>Twitter\u003C/li>\n\u003Cli>RSS\u003C/li>\n\u003Cli>Podcast\u003C/li>\n\u003C/ul>\n\u003Cp>取得した情報は、以下の方法で消化している\u003C/p>\n\u003Cul>\n\u003Cli>とにかく\u003Ca href=\"https://getpocket.com/\">Pocket\u003C/a>にSAVE（あとで読む方式）\u003C/li>\n\u003Cli>1日3回時間を使って消化\u003C/li>\n\u003Cli>良かった記事は、Pocketでお気に入りする→IFTTT経由でNotionのDBへ。\u003C/li>\n\u003Cli>読んだ記事の感想とかは毎日の日記になぐり書き\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"twitter\">Twitter\u003C/h2>\n\u003Cul>\n\u003Cli>今までと大きく変わらない。TweetDeckを使ってリストごとに表示して取得\u003C/li>\n\u003Cli>大体著名なエンジニアが発信するツイートしているのでそこで取得（ありがたい）\u003C/li>\n\u003Cli>Reactのコアメンバーや、関係者をリスト化しておくと割と情報がはやい\u003C/li>\n\u003Cli>TwitterのURLのままPocketに保存している\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"rss\">RSS\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.inoreader.com/\">Inoreader\u003C/a>を使って取得\n\u003Cul>\n\u003Cli>Inoreaderについては、\u003Ca href=\"https://www.ryokatsu.dev/blog/2022/0611\">こちらの記事で紹介した\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Twitterの内容と重複することはある\u003C/li>\n\u003Cli>基本的には、各種ブラウザやのリリース情報だったり興味のあるブログだったりをRSSしている\u003C/li>\n\u003Cli>全部読み切れないのは承知の上で運用している。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"podcast\">Podcast\u003C/h2>\n\u003Cul>\n\u003Cli>フロントエンドに関しては、\u003Ca href=\"https://mozaic.fm/\">mozaic.fm\u003C/a>を欠かさず聴いている\n\u003Cul>\n\u003Cli>少し前から「Monthly Platform」「Monthly Ecosystem」と分割されたことで更に聴きやすくなった。\u003C/li>\n\u003Cli>ショーノートを眺めるだけでも勉強になる。かなり深い所まで話されておりmozaic.fmでかなり補完できている。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>その他にも定番の「Rebuild」「fukabori.fm」など。最近はテック系のPodcastが充実している。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"pocket\">Pocket\u003C/h2>\n\u003Cp>Notionにとにかく保存していたが、最近はPocketに溜め込む運用に落ち着いてる。理由としては、Pocketの機能で音声読み上げがあり、これがかなり精度がいい。（多分SPアプリ限定）散歩しながら消化できる\u003C/p>\n\u003Cp>読み終わった後はPocket内で、スターを押したタイミング（お気に入り）でIFTTT経由で、NotionのDBに気に入った記事だけ放り込んでいる。\u003C/p>\n\u003Ch2 id=\"意識していること\">意識していること\u003C/h2>\n\u003Cul>\n\u003Cli>無理にインプットしない\u003C/li>\n\u003Cli>その場で記事を読まない（集中力がなくなるので）\u003C/li>\n\u003Cli>時間ができた時でも極力読まない。1日3回までと決めている\u003C/li>\n\u003C/ul>",{"headings":2612,"localImagePaths":2625,"remoteImagePaths":2626,"frontmatter":2603,"imagePaths":2627},[2613,2614,2617,2620,2623],{"depth":22,"slug":209,"text":210},{"depth":22,"slug":2615,"text":2616},"rss","RSS",{"depth":22,"slug":2618,"text":2619},"podcast","Podcast",{"depth":22,"slug":2621,"text":2622},"pocket","Pocket",{"depth":22,"slug":2624,"text":2624},"意識していること",[],[],[],"2022/1027.md","2022/1130",{"id":2629,"data":2631,"body":2634,"filePath":2635,"digest":2636,"legacyId":2637,"deferredRender":2196},{"title":2632,"publishDate":2633},"2ヶ月休職の振り返り（2022年 10-11月の振り返り）","2022-11-30","import LinkCard from '../../../components/LinkCard.astro';\n\n毎月恒例（？）の振り返り記事を2ヶ月合併版として振り返ります。\n\n## 大学\n\nデータベース、記号論理学、自然言語処理、計算の科学と手引きの授業を全て終えました。\n\nデータベースは、リレーショナルデータベースや、NoSQLなどのDB設計を学ぶことができました。SQLは触ったことがあるので、知っている内容もありましたが、様々なDBの設計方法やアーキテクチャを知れたのはとても良かったです。この授業を受けたことで一度挫折した「データ指向アプリケーションデザイン」が割とスラスラ読めるになったという副次的な効果がありました。（まだ半分ぐらいですが読んだらブログを書こうと思います）\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/-/en/Martin-Kleppmann/dp/4873118700\" />\n\n記号論理学の授業は、一応全部受講終わったものの内容の50%ぐらいしか理解できないぐらい難しかったです。とにかく手を動かして演習問題を解かないといけなそうです。（自然言語処理も同じ）記号論理学を読んだことで「記号と再帰」という気になっていた本を読むことができたのでこれも副次的な効果がありました。\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/-/en/%E7%94%B0%E4%B8%AD-%E4%B9%85%E7%BE%8E%E5%AD%90/dp/4130802569\" />\n\n計算の科学と手引きは、計算機科学の授業で、ほぼ数学でした。まだあまり進んでいませんが、「初歩からの数学」という授業も受講しているので、まずは高校数学を理解しないと履修は難しそうでした。。\n\n## 技術系\n\ntype-challengesの初級だけ実施しました。type-challengesでTypeScriptを書いたのと、Haskellを最近はじめたのでそれ以外でコードをガッツリ書くことはしませんでした。\n\n\n\u003CLinkCard url=\"https://ryokatsu.dev/blog/2022/1017\" />\n\n[DIST.37 「マークアップな夜」](https://dist.connpass.com/event/261960/)の勉強会に参加しました。久しぶりのオフライン勉強会でなんだか懐かしい感じがしました。とても勉強になる内容だったとともに、自分も登壇したくなりました。\n\n\n以下は戦利品です。\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">じゃんけん買ったー！\u003Ca href=\"https://twitter.com/hashtag/dist37?src=hash&amp;ref_src=twsrc%5Etfw\">#dist37\u003C/a> \u003Ca href=\"https://t.co/kjN03wpCWp\">pic.twitter.com/kjN03wpCWp\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1585962166838263808?ref_src=twsrc%5Etfw\">October 28, 2022\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n## プライベート\n\n仕事のことを全く考えることがなくなったことで、精神的にかなりいい状態のまま日々を過ごすことができました。普段できない息子の幼稚園のお迎えなどもすることができたりお迎えしてそのまま夕ご飯の時間まで息子と遊んだりできました。\n\n基本的に日中は、大学の授業と読書をして夕方からは家族との時間、息子の寝かしつけが終わったら自由時間という感じです。自由時間は、ガンプラ作ったりゲームしたりのんびりしていました。\n\n仕事がなかったことで、Rebuild Meetupに参加することができました。（生で宮川さんが見れて感動〜）\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">チェックイン\u003Ca href=\"https://twitter.com/hashtag/rebuildfm?src=hash&amp;ref_src=twsrc%5Etfw\">#rebuildfm\u003C/a> \u003Ca href=\"https://t.co/UiyQhFA0nL\">pic.twitter.com/UiyQhFA0nL\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1584474524392640512?ref_src=twsrc%5Etfw\">October 24, 2022\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n\n## 転職ドラフト\n自分のキャリアを見つめ直す機会でもありました。仕事の案件でも一区切りしたことも自分の市場価値をもう一度確認したくなった（暇だったこともある）ので転職ドラフトに参加してみました。ありがたいことに18社から希望年収を上回るご指名をいただきました！\n\nその中でも、特に気になる3社とカジュアル面談をさせていただきました。どれも魅力的でしたが、その中でも1社自分のやりたいことだったり、雰囲気だったり、プロダクトも興味あったりとかなり志望度が高くなりました。今は、休職期間ということもあり社会復帰して2,3ヶ月で今の会社で自分が本当にやりたいことができるかなどを見極めてから改めて考えたいと思います。\n\n自分のキャリアで言うと、ずっとフロントエンドエンジニアとしてやってきたのですが、「本当にこれでいいのか？」という長年のモヤモヤについても真剣に向き合ってみました。そもそも自分は当たり障りのない感じで今までキャリアを積み重ねてきたこともあって、「強み」というのがずっとないなと感じていました。\n\nひとつ答えが出たこととして前々からずっと興味があった「アクセシビリティ」の分野を本気で頑張ってみようと決めました。決めたものの何から始めようと思い色々調べた所[Trusted Tester](https://training.section508testing.net/)を見つけました。（Trusted Testerについてはブログを書きます。）なので放送大学の授業を一時中断してTrusted Testerに全振りしました。後は本試験を残すのみなのでしっかり時間を取って望みたいです。\n\n## 健康\n\n休職に入ってから毎日筋トレをするようになりました。腕立て、腹筋、スクワット、背筋をそれぞれ30回ずつという内容ですが、今の所毎日続けることができています。習慣化すると毎日やらないと気持ち悪くなりますね。ただ一度でもやらない日ができるとそのまま一生やらない性格なので、仕事が始まっても続けたいです。\n\n睡眠時間が仕事しているときと比べて増えました。また昼寝を毎日30分してました。大学の授業をずっと聴いていると眠くなるので一旦リフレッシュすることで眠くならずに授業を聴くことができました。\n\n## 復帰に向けて\n\nひとまず12/6から社会復帰します！　心機一転頑張ります。","src/content/blog/2022/1130.mdx","41a1103e5e714a0a","2022/1130.mdx","2022/1017",{"id":2638,"data":2640,"body":2643,"filePath":2644,"digest":2645,"legacyId":2646,"deferredRender":2196},{"title":2641,"publishDate":2642},"type-challenges初級からの学び","2022-10-17","import LinkCard from '../../../components/LinkCard.astro';\n\nいつかやろうと思って全然できていなかったtype-challengesの初級を終えました。\n\n\u003CLinkCard url=\"https://github.com/type-challenges/type-challenges\" />\n\n全体通しての感想としては、「これ初級なの？」というものから初級らしくイージーなものまで幅広くありました。初級は、全13問あります。自分で解けなかった問題もありましたが、順番にやってみました。\n\n## Pick\n\n```ts\ntype MyPick\u003CT, K extends keyof T> = {[P in K]:T[P] } // Pick\u003CT,K>を使用した時に推論される型\n// or\ntype MyPick\u003CT, K extends keyof T> = { [key in K] : T[key] };// 上記をヒントに作った型\n```\n\nTypeScriptの組み込み```Pick\u003CT,K>```を使わずに、指定した型を抽出する型を自作する問題でした。普段Pickを使って実装してきたので、どうやるのか調べながらやらないと解けませんでした。\nここで知らないといけない知識は、Generics、keyof演算子、extends、Mapped Typesあたりでしょうか。（Genericsの説明は割愛します）\n\n### keyof演算\n\n[ドキュメント](https://www.typescriptlang.org/docs/handbook/2/keyof-types.html)によるとオブジェクトのkeyとして含まれるstringまたはnumberのユニオン型を返します。普段の業務でもよく使います。\n\n```ts\ntype Point = { x: number; y: string };\ntype P = keyof Point; // x | y\n```\n\n### extends\n\n説明は以下が分かりやすいです。説明どおりで、Genericsの型引数を特定の型に制限できます。\n\u003CLinkCard url=\"https://typescriptbook.jp/reference/generics/type-parameter-constraint\" />\n\n### Mapped Types\n\nこちらも以下が分かりやすい。inを使うとオブジェクトのキーをユニオン型で定義した値に限定することができます、\n\u003CLinkCard url=\"https://typescriptbook.jp/reference/type-reuse/mapped-types\" />\n\nこれらを使って今回の問題に取り組むとKは、オブジェクトTが持つキーの値のいずれかであることが判別できます。\n\n## readonly\n\n```ts\ntype MyReadonly\u003CT> = { readonly [P in keyof T]: T[P]}\n// or\ntype MyReadonly\u003CT> = {readonly [key in keyof T]: T[key]};\n\n```\nPickが分かればほとんどできてあとはreadonly修飾子をつければ完成です。readonlyは、プロパティへの代入を禁止することができます。これと良く似たconst assertion(```as const```)もありますが、const assertionは、再帰的にreadonlyしてくれます。つまりオブジェクトの内のすべてのプロパティを固定することができます。\n\n余談ですが、[プロを目指す人のためのTypeScript入門](https://gihyo.jp/book/2022/978-4-297-12747-3)の中で第4章のコラム18でreadonlyの部分型についてコンパイラーによる型チェックが不完全な例があるので、読んでみると面白いです。\n\n## Tuple to Object\n\n```ts\ntype TupleArrayData = string | number;\ntype TupleToObject\u003CT extends readonly TupleArrayData[]> = {\n  [key in T[number]]: key\n}\n```\n多分もっとスマートな書き方があると思います... タプルを受け取りそのままオブジェクトにする型です。（TupleArrayDataとか定義しなくてもany[]でいいかもです。）\n\n## First of Array\n\n```ts\ntype First\u003CT extends unknown[]> = T[number] extends never ? never : T[0]\n```\n\n配列を受け取って最初のプロパティを返す型です。ここでconditional typesの知識が必要です。\n\n### conditional types\n構文を見れば分かると思いますが、三項演算子を型定義で利用できるものです。trueだった場合に、型Aが決定してfalseだった場合は型Bに決まります。\n\n```\nT extends U ? A : B\n```\n\n今回のケースでは、テストケースにneverがあったので条件分岐を続けてnever以外だった場合はT[0]を取得するようにしました。ただこの時は気づきませんでしたが、後述するinferを使うともう少しいい感じに書けそうだなと感じました。\n\nちなみにnever型を改めて確認しようとしたとき、uhyoさんの[この記事](https://qiita.com/uhyo/items/e2fdef2d3236b9bfe74a#never%E5%9E%8B)が神すぎたので参照として載せておきます。\n\n\n## Length of Tuple\n\n```ts\ntype Length\u003CT extends readonly unknown[]> = T['length']\n```\n\n```T['length']```と書くことで、lengthが取れるのは知りませんでした。T[number]とかを雰囲気で書いてましたが、この書き方自体は[Indexed Access Types\n](https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html)という書き方なのもこの時に調べて理解ができました。\n\n\n## Exclude\n\n```ts\ntype MyExclude\u003CT, U> = T extends U ? never : T\n```\nExclude`\u003CT, U>`自体は、ユニオン型のTからUで指定した値を取り除いたユニオン型を返します。先程のFirst of Arrayに近いです。\n\n参照：[Distributive Conditional Types](https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types)\n\n\n## Awaited\n\n```ts\ntype MyAwaited\u003CT extends Promise\u003Cunknown>> = T extends Promise\u003Cinfer P>\n  ? P extends Promise\u003Cunknown>\n  ? MyAwaited\u003CP>\n  : P : T\n```\n\nこの問題は、自分では解けなかったため解答を見ました。そもそも型を作る時に再帰をうまく使う方法の知見がなかったことや、inferについて若干理解が乏しかったことが理由になります。\n上記の型は、Promiseで内包している型を取得する型ですが、MyAwaitedを再帰しているのがわかります。\n\n### infer\n\nやめ太郎さんの[こちらの記事](https://qiita.com/Yametaro/items/9b2f0ab2037450004816#infer%E3%82%92%E4%BD%BF%E3%81%86)が概要を掴むのには、かなり分かりやすいです。動的に型の値を変形することができるのでこれを使って、条件分岐をすると割と簡単に問題を解くことができます。\n\n\n## If\n\n```ts\ntype If\u003CC extends boolean, T, F> = C extends true ? T : F\n```\n\nこれはextendsを理解できていればすぐに解ける問題です。\n\n## Concat\n\n```ts\ntype Concat\u003CT extends unknown[], U extends unknown[]> = [...T, ...U]\n```\n\n特に説明は不要ですが、スプレッド構文を使ってUをTと同様に配列に制限すれば解けます。\n\n## Includes\n\n```ts\ntype Includes\u003CT extends readonly any[], U> = T extends [infer F,...infer Rest]\n  ? Equal\u003CF,U> extends true\n  ? true : Includes\u003CRest,U> : false;\n\n```\n初級の中でも最難関でした。自力では解けずに解答を見ました。最初は、以下のようにすれば簡単じゃんと思っていたら全然駄目でした。\n```ts\ntype Includes\u003CT extends readonly unknown[], U> = U extends T[number] ? true : false;\n```\n\nテストケースで使われているEqual型をまず理解することが必要です。さらにinferと、再帰を上手く理解して解くことになっています。再帰的に配列の要素とUが一致するかどうかを確認して、一致したらtrueを一致しなければ、順番に配列の要素を探していtrueになるまで再帰するという流れです。これはテストケースでboolean型が入ってきた時に```boolean extends false ```が成り立つためにこのような記述になっています。\n\n## Push\n\n\n```ts\ntype Push\u003CT extends unknown[], U> = [...T, U]\n```\n\nこれは説明不要ですね。\n\n\n## Unshift\n\n```ts\ntype Unshift\u003CT extends unknown[], U> = [U, ...T]\n```\n\nこれも説明不要でPushの逆のことをすれば良いです。\n\n## Parameters\n\n```ts\ntype MyParameters\u003CT extends (...args: any[]) => any> =T extends (...args:infer U) => unknown ? U: []\n```\n\n組み込みのParametersは、関数Tの引数をタプルとして抽出してくれます。Parameters`\u003CT>`自体は、使ったことがあったのですが、いざ型を作るとなると一瞬難しいと感じましたが、```infer U```とすることができれば跡は仕様通りに作れます。\n\n## まとめ\n初級の内容が正しく実装できて説明できていると、普段の業務では問題なくTypeScriptが使用できるレベルなのかなと感じました。次は中級をチャレンジしてみますが、初級で結構詰まった箇所もあったので、多分挫折するんだろうな... ただTypeScriptに関する記事はドキュメント含めて理解しやすく良質な記事も沢山あるので（特にサバイバルTypeScript）時間を掛けて調べながらゆっくりやっていこうと思います。","src/content/blog/2022/1017.mdx","15c5a7740998eacb","2022/1017.mdx","2022/1204",{"id":2647,"data":2649,"body":2652,"filePath":2653,"digest":2654,"legacyId":2655,"deferredRender":2196},{"title":2650,"publishDate":2651},"Trusted Testerに取り組んだ話","2022-12-04","import LinkCard from '../../../components/LinkCard.astro';\n\nこの記事は [アクセシビリティ Advent Calendar 2022](https://adventar.org/calendars/7377) の4日目の記事です。\n\n> ※本当は、この記事を公開するまでに認定試験に合格したかったのですが、時間が間に合わずまだ最後の試験を残したままです！合格して認定証が発行されたら改めてご報告したいと思います。\n\n最近ウェブアクセシビリティを学び始めたアラサーマークアップエンジニアです。\n\nアクセシビリティを学ぼうと思った時に、アクセシビリティ専門の資格のようなものはないのかなと思い色々調べてみました。（資格が欲しいわけではなく、体系的に学びたいという気持ち）\n\n日本だと[アクセシビリティ検査技術者検定](https://icc.infocreate.co.jp/icc/itiran/kentei.html)と[ICTアクセシビリティアドバイザー認定資格](https://aaict.jp/)という2つがあるのを知りました。\n\nどちらも内容的に、ウェブアクセシビリティを学べそうでこれでもいいかなと思ったのですが、ミツエーリンクスさんの以下の記事を拝見して[Trusted Tester](https://training.section508testing.net/)を知りました。\n\n\u003CLinkCard url=\"https://www.mitsue.co.jp/knowledge/blog/a11y/202012/13_0900.html\" />\n\n無料かつ体系的に学べそう！と感じたので、Trusted Testerにチャレンジすることを決めて取り組んでみました。\n\n※ミツエーリンクスさんの記事に、Trusted Testerの詳細な説明がありますので本記事ではそこまで詳しく書いていません。体験記としてお読みください。\n\n## Trusted Testerとは\n\n[米国リハビリテーション508条](https://www.access-board.gov/ict/)（Section 508）のウェブアクセシビリティ要件に適合しているかを評価するためのプロセスです。WCAGとは異なる評価方法になっています。\n\n## Trusted Testerの進め方\n\n内容としては、以下のような順番で進めていく構成になっています。\n\n- Section 508がなぜ重要なのか\n  - 2時間もあればで完了できる内容で、Section 508の基本的なことを学びます。\n- Section 508のWeb基準を学ぶ\n  - 3-4時間ほどで完了できる内容で、Section 508規格がWebコンテンツや電子機器にどのように適用されるのかを学びます。\n- Trusted Testerで使用するツールの説明\n  - テストで使う支援ツールの使い方を学びます。（使用方法だけなので30分もあれば終わります。）\n- Trusted Testerのトレーニング\n  - 後述します。\n- 模擬試験\n  - 認証試験前の模擬試験になっていて、30日以内に3回受けることができ、90%以上の正解率だと認証試験を受けることができます。\n- 認証試験\n  - 3日以内に3回受けることができ、90%以上の正解率だと認定証が発行されます。\n\n模擬試験と認証試験以外は、章ごとに簡単な理解度テストがあります。\n\n## Trusted Testerのトレーニング\n\nTrusted Testerのテスト項目の達成基準をそれぞれ理解し、実際にページを見ながらテスト項目に適合しているかどうかを確認する演習を行います。Trusted Testerでは、予め決められた20個の項目があります。1項目の中には複数のテストプロセスが存在するものもあれば、1つだけのものもあります。特に「5: Forms」の項目は、フォーム周りのテストということもあり考慮する点が多いことから、テストする項目も多めです。\n\nちなみにこのトレーニングを全部受講完了できる目安の時間は60〜80時間です。自分も正確には図っていないですが、80時間近く掛かっていると思います。\n\nテスト基準を確認するために使われるツールとして[ANDI](https://www.ssa.gov/accessibility/andi/help/install.html)があります。ANDIを使うことでHTML、CSSなどのソースコードを、直接確認することなくテストを行うことができます。\n\n例えば、「13: Sensory Characteristics and Contrast」という項目ではコントラスト比のチェックを行うのですが、ANDIを使って自分のサイトで試すと以下のような表示になります。（このテストは、WCAGで言うと[WCAG SC 1.4.3 Contrast (minimum) ](https://waic.jp/docs/WCAG21/Understanding/contrast-minimum.html)に該当します。）\n\n![ANDIの使い方](/images/20221204.png)\n\nこの項目のテスト基準は、以下のようになっています。\n\n> If any of the following is TRUE, then the Test Condition is TRUE and the content PASSES:\n>   1. The contrast between the text and its background is equal to or greater than the minimum required contrast ratio identified in the ANDI Contrast Ratio output, OR\n>   2. If the text is an image of text, the contrast between the image of text and its background is equal to or greater than 4.5:1 as identified using the Colour Contrast Analyser.\n\n上記の通り、テスト基準をチェックしていきます。今回の場合は、1でANDIに表示されている「Contrast Ratio」が「PASS」となっており、コンストラクト比の基準を満たしているため「***PASS***（合格）」です。\n\nこのようにテスト結果に問題なければ、「***PASS***（合格）」となります。問題がある場合は、「***FAIL***（不合格）」としてチェックします。テストが基準対象外だったものに関しては、「***DNA***」としてチェックします。例えば「5: Forms」というフォーム要素に関するテスト基準がありますが、テストするページ内にフォーム要素がない場合などは、このテスト基準は「DNA」としてチェックします。\n\n## 模擬試験\n予め用意された3つのページをTrusted Testerの20項目に適合しているかをチェックしていくテストです。項目数が単純に3ページ×20項目で60と更に複数のテストプロセスがある項目もあるので、相当な数のテストをすることになります。一応途中でSAVEはできるので再開はできますが、予め時間に余裕を持って挑まないと終わりません。（自分は1回目のテストで6時間ほど掛かりました...）\n\n一度採点して90%を超えていない場合は、再試験になるのですが、正解した箇所については、再度テストすることはなく間違った箇所のみ再試験する形になります。3回まで採点が可能で、3回目で90%まで達成していないとリセットされ、最初からやり直しになってしまいます。テストの難易度はそこまで高くなく、英語の理解力さえあれば、一つ一つ確実にテストしていけば問題なく合格できます。自分は、2回目で90%を超えて合格になりましたが英語の読み間違いなどでミスをしている箇所が多く翻訳に頼っていたのですが、苦労しました。\n\n\n\n## やってみてどうだったか\n\n認定試験をまだ残していますが、取り組んだ前と後でアクセシビリティについて少し自信がついたなと感じました。先程も紹介した実際のページを開いてテストしていくプロセスが、自分の中でとてもいい経験になりました。プログラミングと一緒で手を動かしながら理解していくのが、一番理解が深まることを改めて感じました。（QAエンジニアのスキルも挙がった気がします。）\n\nTrusted Testerは英語ですが、DeepL様の力を借りることで理解はできると思います。本来であれば、原文で取り組んだ方が良いとは思うのですが、自分は英語が圧倒的にできませんので翻訳に頼りました。\n\n無料のコンテンツですが、他にも[MDNのアクセシビリティ](https://developer.mozilla.org/ja/docs/Learn/Accessibility)や、最近では、Googleからも[Learn Accessibility](https://web.dev/learn/accessibility/)が登場したりとコンテンツが充実してきている印象なので、このあたりも時間があれば取り組みたいと思います。\n\n少し自信が付いたことで、普段の業務でも生かせる所は生かしていきたいと思いました。普段デザインを確認すると「自分だったらこうマークアップする」というのがありますが、ここにアクセシビリティの観点を加えていきたいです。WCAG2.1の仕様を、以前社内で開催された輪読会を通して「A、AA」までは読んだのですが、ほとんど忘れているのでこれを機にまた改めて復習しつつ、WAI-ARIAの正しい設定ができるように普段のコーディングから意識していきたいと思います。","src/content/blog/2022/1204.mdx","7b4040ee7dcbda55","2022/1204.mdx","2024/1215",{"id":2656,"data":2658,"body":2661,"filePath":2662,"digest":2663,"legacyId":2664,"deferredRender":2196},{"title":2659,"publishDate":2660},"放送大学3年目を振り返る","2024-12-15","import LinkCard from '../../../components/LinkCard.astro';\n\nこの記事は [社会人学生 Advent Calendar 2024](https://adventar.org/calendars/10520) 15日目の記事です。\n\n2年前のアドベントカレンダーで放送大学に入学した感想記事を書きました。\n\n\u003CLinkCard url=\"https://ryokatsu.dev/blog/2022/1219/\" />\n\n今回は3年目になって今なにを勉強して、どのようなキャンパスライフを送っているのか（オンラインだけど）について書こうと思ったのですが、放送大学のことについては色々な方が記事を書いているので、この記事では自分が放送大学に入ったことで入る前とは、想像もしていなかったことを今勉強しているのでそのことについて書こうと思います。\n\n\n## 今まで履修した科目\n\n今のところ以下の20科目ほど履修しており41単位取れています。\n\n> - Ｃ言語基礎演習（’２０）\n> - デジタル情報の処理と認識（’２２）\n> - 情報ネットワークセキュリティ（’１９）\n> - Ｗｅｂのしくみと応用（’１９）\n> - 計算の科学と手引き（’１９）\n> - コンピュータとソフトウェア（’１８）\n> - 記号論理学（’１４）\n> - 情報学へのとびら（’２２）\n> - コンピュータの動作と管理（’１７）\n> - アルゴリズムとプログラミング（’２０）\n> - データベース（’１７）\n> - 自然言語処理（’１９）\n> - データ構造とプログラミング（’１８）\n> - 身近なネットワークサービス（’２０）\n> - 初歩からの数学（’１８）\n> - ヒューマンインタフェース（’２３）\n> - 哲学・思想を今考える（’２３）\n> - 西洋哲学の根源（’２２）\n> - 現代に生きる現象学（’２３)\n> - 入門微分積分（’２２）\n\n最初の方に一気にコンピュータサイエンスの基礎的なものをいくつか習得しました。ただ最初に取りすぎたことで仕事が終わったら勉強して、土日も勉強するという生活を送っており、生活が崩壊しそうでした。2年目からは、多くて3科目にすることで生活リズムを戻しました。\n\n## 気持ちの変化（コンピュータサイエンスから数学へ）\n\n最初のモチベーションとしては、CSの基礎を学んでおこうぐらいの気持ちで始めました。しかし情報系の授業を受講していると度々数学の計算や知識が必要になる場面が多くなりました。\n\nそこで「コンピュータサイエンスの前に数学が出来ないとアカン！」という気持ちになり、大学の授業を一度やめて中学数学から学び直しました。\n\n半年ぐらいで数I、数Aぐらいまではできるようになり楽しくなってきたので、「[初歩からの数学](https://bangumi.ouj.ac.jp/v4/bslife/detail/116002810.html)」という授業を受けてみました。そこでは関数や写像などが出てきて普段プログラミングしている自分としては身近に感じる内容でした。\n\n学生時代赤点だった数学が、ここまでできるようになりしかも楽しいと感じるようになるなんて、思っても見なかったです。\n\n## 気持ちの変化（数学から哲学、言語学へ）\n\n数学を学ぶ中で証明や命題を解くことが多くなってきたのですが、このあたりで結構躓くようになりました。このとき「[記号論理学](https://bangumi.ouj.ac.jp/v4/bslife/detail/157006410.html)」を学んで世界を記号で表すことができるということを知りました。\n\n記号論理学を学んでいる過程で、昔学生時代に理解もできずに、通ぶって読んでいた哲学の本にも、記号で世界を表すようなことを言っていたのを思い出し、「もしかして今哲学を学んだら理解もできて面白いかも？」と思うようになりました。\n\n放送大学には哲学を学ぶ講義がいくつかあったので、まずは「[哲学・思想を今考える](https://bangumi.ouj.ac.jp/v4/bslife/detail/17402028.html)」を受講しました。この講義が個人的にはすごく良くて、その時代の中で流行った哲学の歴史を学ぶことができ、哲学という全体地図のようなものが自分の頭の中にいれることができました。この講義で、気になった哲学者の書籍や、その時代のことなどを学ぶきっかけになりました。\n\nまず初心者本をつまみ食いしてざっくり理解して関連本を読み漁ることが楽しくて、今年に入ってから読書がほぼ哲学書ばかりなのに気づきました。哲学には哲学用語なるものが多くあるのですが、最近は難しい用語などもChatGPTと会話すれば、わかりやすく答えてくれて理解を深めることができているので、とても重宝しています。\n\nそんな感じで哲学を学ぶ中で、哲学者のウィトゲンシュタインに出会い、言語学の分野に興味を持ち始めました。元々[ゆる言語学ラジオ](https://www.youtube.com/@yurugengo)のファンだったこともあり、本格的に勉強してみようという気持ちになり、今では意味論や統語論などの基礎を勉強しています。\n\n\n## で結局大学生活は？\n\n正直哲学を更に深く学べる講義は、放送大学にありません。なので別の大学に編入するか色々調べている所ですが、決心がついていないのと仕事も当然あるので、ひとまず様子見をしています。元々学ぼうと思っていたコンピュータサイエンスについては、割と基礎的なものは学べた感じはあるので、一旦は自分の業務に還元できるようにしていきたいなと思っています。（そして技術書もそろそろちゃんと読まないと。。）\n\n今期は上記の事情もあり、何も科目を受講していません。学生生活は続けたいと思っていますが、何を学びたいかを見極める時期に来たのかなと感じています。\n\n\n## 終わりに\n\n放送大学に通いだしたことで当初学びたかったコンピュータサイエンスから哲学や数学、言語学を学ぶようになったことについて紹介しました。今は紹介したように授業は抑え気味ですが、放送大学自体は、自分の幅を広げることきっかけになる場所ではあるのでおすすめです！","src/content/blog/2024/1215.mdx","be4882cf9d3d6377","2024/1215.mdx","2022/1222",{"id":2665,"data":2667,"body":2670,"filePath":2671,"digest":2672,"legacyId":2673,"deferredRender":2196},{"title":2668,"publishDate":2669},"2022年に聴いて良かった5曲","2022-12-22","import LinkCard from '../../../components/LinkCard.astro';\n\nこの記事は [Your Favorite Music in 2022 Advent Calendar 2022](https://adventar.org/calendars/7910) の22日目の記事です。\n\n5曲を選ぶの難しかったですが、選びました。\n\n## FKA Twigs/meta angel\n\n\u003CLinkCard url=\"https://open.spotify.com/embed/track/6EeuY84I1Q3UJvpPN6iSzw?utm_source=generator\" />\n\nFKA Twigsの2年ぶりの新作「Caprisongs」から選曲。このアルバムは位置づけとしてはアルバムではなく「ミックステープ」らしいんだけど、ダークな部分はアルバム全体で残していて個人的に全部良いんだけど特にこの曲が好き。歌唱力が一番際立っている気がして、その歌唱力を消さずに後ろで流れるダウンテンポな音もまたいい。\n\nFKA Twigsは1stを聴いた時からファンで、最初聴いた時に「ヤバいの来たな」と思ったのを今でも覚えている。ポーティスヘッドが大好きなので経路としては近いと思っているだけど、とにかく歌唱力が凄くて引き込まれる。\n\n## 坂本慎太郎/物語のように\n\n\u003CLinkCard url=\"https://open.spotify.com/embed/track/2vlXbeNehxZQ4b3kiX82df?utm_source=generator\" />\n\n6年ぶり4thアルバムからアルバム名にもなっている「物語のように」を選曲。リズムボックス感がいいね。スティールギターも最高で、久しぶりに坂本ワールドを堪能できた。spotifyの今年もっとも聴いたアーティストが、坂本慎太郎だったし振り返るとこの曲口ずさむ時が多かった。\n\n## Kasabian/SCRIPTVRE\n\n\u003CLinkCard url=\"https://open.spotify.com/embed/track/5b0YzNbDeLToBcYHhbA7wz?utm_source=generator\" />\n\nカサビアン好きなのがバレるのちょっと恥ずかしい感じもしつつ選曲。ボーカルの脱退でどうなるかと思ってたが新体制で今年出したアルバム「The Alchemist's Euphoria」が全曲めちゃくちゃカッコいいんだよな。The Musicのロバート・ハーヴェイがツアーにサポートメンバーに参加したりもしている。選曲した曲は、ドラマティックなサウンドをちょっとヒップホップも入った変態サウンドではあるけど聴いていると気分がノッてくる。\n\n\u003CLinkCard url=\"https://www.youtube.com/embed/R2BmQZPrTgk\" />\n\n## 七尾旅人/ソウルフードを君と\n\n\u003CLinkCard url=\"https://open.spotify.com/embed/track/0drNjI13IIUkTPE60RwKt0?utm_source=generator\" />\n\n今年出した2枚組の「Long Voyage」から選曲。この曲ライブでやったら盛り上がるだろうなー。とにかく歌詞が凄くてこんな歌う人絶対いないやろって感じ。最後の方でゆっくりしたメロディの後ろで流れるひしゃげたギターも最高にいい。\n\nLong Voyageが出たタイミングで、七尾旅人の昔のアルバムが全て配信された出来事があり、嬉しかった。七尾旅人は、多分日本で一番好きなシンガーソングライターなのは間違いない。\n\n## ELDEN RING オリジナル・サウンドトラック/Mohg, Lord of Blood\n\n\u003CLinkCard url=\"https://open.spotify.com/embed/track/1GAWI21bYhRPtqwXZvEVvq?utm_source=generator\" />\n\n今年一番やったゲームから選曲。他にも好きなBGMは山程あるんだけど、特にこのモーグ戦は、全てのボスの中で一番大苦戦して倒した思い入れのあるボスで、何度も繰り返し聴かされることになったこともあり今でも耳に残っている。","src/content/blog/2022/1222.mdx","218cabf153eff0c0","2022/1222.mdx","2022/1219",{"id":2674,"data":2676,"body":2679,"filePath":2680,"digest":2681,"legacyId":2682,"deferredRender":2196},{"title":2677,"publishDate":2678},"文系エンジニアが放送大学に通い始めたことについて","2022-12-19","import LinkCard from '../../../components/LinkCard.astro';\n\nこの記事は [社会人学生 Advent Calendar 2022](https://adventar.org/calendars/7910) の19日目の記事です。\n\n今年の4月から放送大学で情報学を学んでいるアラサーマークアップエンジニアです。この記事では、放送大学についてと今まで学んだ8ヶ月を振り返りたいと思います。\n\n放送大学に入った理由などは、以下のブログ記事に記載していますので今回は省きます。\n\n\u003CLinkCard url=\"https://ryokatsu.dev/blog/2021/1203\" />\n\n\n## 授業の受け方\n放送大学では、通常の大学と同じように前期/後期があります。それぞれの学期の途中に提出する課題と学期末にある単位認定試験に合格すると単位が取れます。課題と認定試験についてはWEBから行うことができます。\n\n授業形態としては、大きく2つの授業形態があります。1つは、15回×45分によるオンライン or テレビでの授業、もう1つはWEB配信のみによるeラーニング形式の授業です。テレビでの受講は、一度もやったことはありませんが、番組表を確認して指定の時間に受講するものです。基本的にテレビ以外は自分の好きなタイミングで授業を受講することができます。\n\n授業にはテキスト（教科書）が必ずありますが、テキストなしで受講することも可能です。ただ、テキストがないと厳しい場面が多い（特に試験）ので必須かなと思います。放送大学のオンラインサイト、Amazonや書店でも購入することができるので後で購入することも可能です。放送大学には、各拠点にサテライトスペースがありそこの図書館に教科書があるので貸し出しも可能です。\n\n\n## 学生生活(仕事、育児、家事との両立)\n\n前述した通りで、好きなタイミングで受講することが可能なので、仕事が終わった後や、休日にまとめて受講していました。\n\n前期は、子供の寝かしつけを終えて22:00から2-3時間ほどと、休日の午後（土日どちらか）の4-5時間を放送大学の時間に充てていました。これで毎週6,7回の授業を受講できました。ただ仕事が忙しかったり息子がグズったり、休日に外出したりすると時間は減るので、ほとんど受講できない時もありました。試験前などは、家族にごめんなさいして休日フルで大学の授業を受けたりすることもありました。\n\n自分の自由時間は大学に通い始めてから、急激に減りました。一時期それがストレスに感じることもありましたが、「必ず最低1時間は趣味のゲームをする！」などを決めてなんとか捻出していました。\n\n家族には負担を掛けてしまったこともあり後期の始まるタイミングで2ヶ月の休暇を取って、後期は割と授業を順調に進めることができました。会社には感謝しかないです。\n\n週5から週4勤務にすることで、負担を減らせそうなので来年以降はこのあたりにも視野に入れたいなと思います。\n\n\n## 授業を受けて\n\n### 数学とお友達になれた\n\n受講している科目が多いので省略しますが、まず一番最初に数学の壁にぶち当たりました。自分は文系ということと、数学も赤点に近いレベルということもあり、予想はしていたのですが、数式が全く理解できず「これ無理かも...」と感じました。「log（対数）ってなに？」みたいな感じで初歩的な数学が全くわかりませんでした。これはアカン！と思ったので、まずは中学校の数学を学びなおしました。\n\n\u003CLinkCard url=\"https://ryokatsu.dev/blog/2022/0613\" />\n\nこの本で数学とお友達になりググりながらも数式を理解していけるようになりました。そもそも分数の計算もろくにできなかったので大きな成長をしたと感じます。\n\n### 今まで読めなかった本が読めるようになった\n\n前期はコンピューターの仕組みや、アルゴリズムの授業を、後期はデータベースだったり論理学、高校数学の授業を多く受けました。実は、大学に入る前にCSを独学しようと挫折した書籍が多くあったのですが、大学の授業を受けた後に読むと内容を理解することができるという効果がありました。\n\n\u003CLinkCard url=\"https://ryokatsu.dev/blog/2022/0922\" />\n\n今は、[データ指向アプリケーションデザイン](https://www.oreilly.co.jp/books/9784873118703/)を少しずつ読んでいます。放送大学のデータベースの授業は「データベース（’１７）」となっており2017年に開講した授業からアップデートがない状況です。この業界にいると技術の進歩が常にあるのでトレンドも変わるのは承知の上なので、授業の中では、データベースに限らず少々古い内容があったりします。そのあたりは書籍だったり、その他で補完していく必要はあります。\n\n### 計算量を意識するようになった。\n\nアルゴリズムの知識はスタック、キューのようなデータ構造やハッシュぐらいしか知りませんでしたが、授業を受けてソートの仕方によって計算量が変わることを数式と具体的なコード（Java）で確認することができました。今まで何となく配列は遅いとかパフォーマンスを効率化するためのTipsみたいな薄い知識しかありませんでした。アルゴリズムを理解することで普段コードを書く時に意識できるようになりました。\n\n### ネットワークやセキュリティの知識を学べた\n\nここが一番タメになった箇所です。セキュリティに関しては、基本的なことしか知らなかったので公開鍵暗号や共通鍵暗号がどういうアルゴリズムによって鍵交換しているかなどの基本的な知識を知ることができて学びの多い授業でした。\n\n\n## まとめ\n\nコンピュータ・サイエンスを学ぶことは、僕に取って数学を学ぶことにほぼ等しいという感想です。数学は苦手だった自分が今では楽しく学ぶことができているのがちょっと信じられない感じです。ただ理解するのに理系の人と比べると圧倒的に時間が掛かるのでこの理解度、解像度を上げていきたいです。\n\n放送大学は、学費が物凄く安いです。（今の所20万も掛かっていないんじゃないかな）経済的に余裕がない方でも取り組みやすいのが特徴です。自分は、最初単位は取れなくてもCSを学べれば良いと思っていました。しかし、授業をこなしていくことで単位を取ってちゃんと結果を出したい！という気持ちも芽生えました。最初は「勉強したい」ぐらいの気持ちで入学するのも、個人的にはおすすめかなと思っています。","src/content/blog/2022/1219.mdx","ab2e49ab1e421701","2022/1219.mdx","2025/0206",{"id":2683,"data":2685,"body":2688,"filePath":2689,"digest":2690,"legacyId":2691,"deferredRender":2196},{"title":2686,"publishDate":2687},"言語はこうして生まれるを読んだ","2025-02-06","import LinkCard from '../../../components/LinkCard.astro';\n\n\u003CLinkCard url=\"https://www.shinchosha.co.jp/book/507311/\" />\n\nとても良い本だったので久しぶりに本の感想文を書きました。\n\n## ジェスチャーゲーム\n\n> 言語はその場その場の即興的なやりとりで形成される\n\nこの本に度々でてくる「ジェスチャーゲーム」という言葉はウィトゲンシュタインの「言語ゲーム」からきている。発話そのものをいくら分析しても本質を明らかにできないことで、例えば「水！」という言葉が何を意味するのかなんて理解、解釈が異なる。水を取ってほしいなのか、水を飲みたいのか、水の流れをみてほしいなのかなど様々である。なのでコミュニケーションというのは、即興で話される言葉が飛び交うゲームに参加しているだけだという主張だ。\n\nこれは非常によく分かる。今こんなことを書くとすごいアンチが何か言ってきそうだが、自分は松本人志の「ビジュアルバム」という作品が大好きだ。その中に「寿司」というコントがあるのだが、この作品見たときに「コミュニケーションって意思疎通ではないんだな」と思った。\n\nこの寿司というネタは、とある大将と女将さんが切盛りする寿司屋で、お客さんと社会の不満などを会話しながら話が進んでいくコントだが、寿司を握った大将がお客さんの前に寿司を置くと女将扮した松本一人が、毎回何も言わずに寿司をこれでもかというぐらいに握りつぶしてぐちゃぐちゃにしてしまう。お客さんは、不満な顔をしながらそれを食べるシーンがあるのだが、まさにこれも「言語ゲーム」「ジェスチャーゲーム」だ。\n\nこの本の中にも、エンデバー号の乗組員とハウシュ族との交流が紹介されており、お互い言語が分からないまま5日間ほど滞在してジェスチャーなどを通じてコミュニケーションを取っていたという。しかし最低限のことはできても雑談は楽しめかったと後で振り返りをしている。\n\nさらにたった5日間ではなくこれが10年、20年と長期に渡ると語弊も文法も貧弱な言語体系ができてくる。その例で、[ピジン言語](https://ja.wikipedia.org/wiki/%E3%83%94%E3%82%B8%E3%83%B3%E8%A8%80%E8%AA%9E)や、[ニカラグア手話](https://ja.wikipedia.org/wiki/%E3%83%8B%E3%82%AB%E3%83%A9%E3%82%B0%E3%82%A2%E6%89%8B%E8%A9%B1)の話が出てくる。確かに手話の進化もジェスチャーゲームなのかもしれない\n\n## 言語ってなんやねん\n\n本の中では、シャノンのメッセージ・イン・ア・ボトルや、チョムスキーの生成文法などの言語学そのもののアプローチ以外にも、生物学的だったり数学的だったりと様々な角度から言語そのものを紹介していく。詳細に書くと長くなるので、簡潔に書くと言語は不完全なものだということだ。\n\nことばのチャンク化（Chunking）についても紹介されている。人間は単語やフレーズを意味のあるまとまりとして認識して処理している。プログラミングにもチャンク化は、Code Splittingとしてよく見かける。コードを分割し、必要なときに読み込むことがチャンク化なら、言語も必要なときに意味を理解して話すというのはそうなんだろうと思った。\n\n個人的には、生物学的な側面でFOXP2やDCDC2という遺伝子が言語に関するものというのは初めて知り勉強になった。特にDCDC2遺伝子の変異でディスレクシアになる可能性があるというのも勉強になった。\n\nピダハン族の例も紹介されていた。ピダハンには数と時間に関する単語がなく普遍文法にある再帰もないらしい。そんな言語の世界で自分だったらどうやって生きていくのか考えたけど検討もつかなかった。ただ結局ジェスチャーゲームをしているだけと考えれば少しは気が楽になった。手話を学ぼうとも思った。\n\n## 人間はマウントを取る生き物\n\n最終章では、AIについても触れていた。とんでもない進化を遂げていて自分もお世話になっているが、この本が書かれたときはまだChatGPTのo-1などはなく3について書かれている。いつかAIも人間と言語を通じて同等レベルまで、意味を解釈して話せるようになるかについて、この著者は最後に「AIはすごいが、人間の知能のコアにある言語的即興には到底手が届かない」的なことを言っている。自分はこれを読んで、違う感想を持った。というのも「人間ってやっぱり自分より下のものを見下す。マウントを取る生き物なんだ」と感じた。最後の最後で何故か悲しくなってしまった。\n\n## カオスを楽しめるか\n\n自分は普段プログラミングをしているが、プログラミング言語に即興なんてものはあるのかなと考えた。基本決められたルールに従い、構文解析してパースして出てきた出力結果が言語というかコミュニケーションになる。自然言語にはルールや構文解析もあるし、形式意味論ではeタイプやtタイプみたいな型理論みたいな概念もあるけど基本カオスだ。なので想像もしないことが起こり、刺激が強いし。面白いとは思う。カオスを楽しむことができる。\n\nこれを読んで何かを始めようとは思わなかったが読み物としてとても面白かった。","src/content/blog/2025/0206.mdx","6ad2488ee24e7436","2025/0206.mdx","2023/0105",{"id":2692,"data":2694,"body":2697,"filePath":2698,"digest":2699,"rendered":2700,"legacyId":2715},{"title":2695,"publishDate":2696},"ヤバい！最近小説を全然読んでいない","2023-01-05","ふと去年読んだ本を確認していたらあることに気づいた。\n\n***全然小説を読んでいない！！！***\n\n去年読んだ小説は、「プロジェクト・ヘイル・メアリー」の一冊だけ。業務で必要そうな本だったり、技術書はそれなりに読んだ。ただこれは危険だなと思ったのでポエムを書くことにした。\n\n\n## 小説との出会い\n\n元々小中高と本なんてほぼ読まなかった。大学生になると友達がほとんどできず図書館に籠もるようになり暇なので、夏目漱石の「吾輩は猫である」を読んだ。あまりにも面白くて夏目漱石の他の作品を片っ端に読み、明治時代のいわゆる近代文学を読み漁った。大学は4年生だったため本を読む時間は無限にあったので、そこから古典から現代小説まで気になるものをひたすら読んだ。\n\nこういうと大袈裟だけど自分のアイデンティティは、ほとんどこの時期に読んだ本や映画で確立した気がする。特にカフカ、ドストエフスキー、内田百閒、エドガー・アラン・ポーが大好きでほとんどの作品を読んだ。\n\n## ドン・キホーテ\n\nディスカウントストアではない方のドン・キホーテ（古典）は、僕にとってバイブルのような作品で、「人間ってのは全員いい意味で狂っている」ことを知れたいい作品だった。人生なんておかしいし、だから面白い、つまり自分が面白いと思ったことやればいいんだと生きることについて教えてくれたお笑い小説でまた読み直したいと思っている。\n\n## 技術書ばっかり読んでいていいのか？\n\nそもそも去年に限らず、エンジニアになってから技術書を読むようになったことで、小説を読むことが減っている。\n\n技術書を読むのはとても学びになるし読むべきなのは確か。しかし技術書ばかり読んで、小説を読まないのはマズイ。小説は、自分を写す鏡でもあるので、自分を振り返る意味でも読むべき。ということで「技術書を捨てよ！小説を読め！」という精神で今年は小説を沢山読もう。","src/content/blog/2023/0105.md","0b3077780920728c",{"html":2701,"metadata":2702},"\u003Cp>ふと去年読んだ本を確認していたらあることに気づいた。\u003C/p>\n\u003Cp>\u003Cem>\u003Cstrong>全然小説を読んでいない！！！\u003C/strong>\u003C/em>\u003C/p>\n\u003Cp>去年読んだ小説は、「プロジェクト・ヘイル・メアリー」の一冊だけ。業務で必要そうな本だったり、技術書はそれなりに読んだ。ただこれは危険だなと思ったのでポエムを書くことにした。\u003C/p>\n\u003Ch2 id=\"小説との出会い\">小説との出会い\u003C/h2>\n\u003Cp>元々小中高と本なんてほぼ読まなかった。大学生になると友達がほとんどできず図書館に籠もるようになり暇なので、夏目漱石の「吾輩は猫である」を読んだ。あまりにも面白くて夏目漱石の他の作品を片っ端に読み、明治時代のいわゆる近代文学を読み漁った。大学は4年生だったため本を読む時間は無限にあったので、そこから古典から現代小説まで気になるものをひたすら読んだ。\u003C/p>\n\u003Cp>こういうと大袈裟だけど自分のアイデンティティは、ほとんどこの時期に読んだ本や映画で確立した気がする。特にカフカ、ドストエフスキー、内田百閒、エドガー・アラン・ポーが大好きでほとんどの作品を読んだ。\u003C/p>\n\u003Ch2 id=\"ドンキホーテ\">ドン・キホーテ\u003C/h2>\n\u003Cp>ディスカウントストアではない方のドン・キホーテ（古典）は、僕にとってバイブルのような作品で、「人間ってのは全員いい意味で狂っている」ことを知れたいい作品だった。人生なんておかしいし、だから面白い、つまり自分が面白いと思ったことやればいいんだと生きることについて教えてくれたお笑い小説でまた読み直したいと思っている。\u003C/p>\n\u003Ch2 id=\"技術書ばっかり読んでいていいのか\">技術書ばっかり読んでいていいのか？\u003C/h2>\n\u003Cp>そもそも去年に限らず、エンジニアになってから技術書を読むようになったことで、小説を読むことが減っている。\u003C/p>\n\u003Cp>技術書を読むのはとても学びになるし読むべきなのは確か。しかし技術書ばかり読んで、小説を読まないのはマズイ。小説は、自分を写す鏡でもあるので、自分を振り返る意味でも読むべき。ということで「技術書を捨てよ！小説を読め！」という精神で今年は小説を沢山読もう。\u003C/p>",{"headings":2703,"localImagePaths":2712,"remoteImagePaths":2713,"frontmatter":2694,"imagePaths":2714},[2704,2706,2709],{"depth":22,"slug":2705,"text":2705},"小説との出会い",{"depth":22,"slug":2707,"text":2708},"ドンキホーテ","ドン・キホーテ",{"depth":22,"slug":2710,"text":2711},"技術書ばっかり読んでいていいのか","技術書ばっかり読んでいていいのか？",[],[],[],"2023/0105.md","2025/0324",{"id":2716,"data":2718,"body":2721,"filePath":2722,"digest":2723,"legacyId":2724,"deferredRender":2196},{"title":2719,"publishDate":2720},"ベーシック生成文法を読んだ","2025-03-24","import LinkCard from '../../../components/LinkCard.astro';\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/%E3%83%99%E3%83%BC%E3%82%B7%E3%83%83%E3%82%AF%E7%94%9F%E6%88%90%E6%96%87%E6%B3%95-%E5%B2%B8%E6%9C%AC-%E7%A7%80%E6%A8%B9/dp/4894764261\" />\n\n最近チョムスキー関連の本を読み漁っているが、生成文法の基礎が分からなかったので読んだ。\n\n\n## 生成文法って何？\n[生成文法（Generative Grammar）](https://ja.wikipedia.org/wiki/%E7%94%9F%E6%88%90%E6%96%87%E6%B3%95)とは、1950年代にノーム・チョムスキーによって提唱された言語理論で、子どもが、言語を習得する際に、何も教えなくても話せるようになるのは[普遍文法(universal grammar、UG)](https://ja.wikipedia.org/wiki/%E6%99%AE%E9%81%8D%E6%96%87%E6%B3%95)を生得的に備えているから喋れるようになるというものだ。何言っているだという感じだが、普遍文法はコンピューターでいうとCPUのような機械的な装置と考え、この原理と、変動するパラメータによって文を話せる、文を作れるようになるという考え方だ。つまり生成文法の核心は、言語には有限の規則があり、その規則を組み合わせることで無限の文を生成できるという考え方だ\n\n例えば文を考えるとき、英語だとSVO日本語だとSOVになる。日本語の基本的な文構造「主語＋目的語＋動詞」という規則を知っていれば、様々な主語と目的語と動詞を入れ替えて、無数の文を作り出すことができるというわけだ。\n\n## 文は樹形図で表現できる\n\n例文として「彼女が本を読む」を考えたときに以下のような樹形図を書く。\n\n```\n   S (文：Sentence)\n     / \\\n    NP  VP (名詞句：Noun Phrase、動詞句：Verb Phrase)\n   / \\   / \\\n  N  P  NP  V (名詞：Noun、助詞：Particle、動詞：Verb)\n  |  |  / \\  |\n 彼女 が N  P 読む\n        |  |\n       本  を\n```\n\n生成文法では二股分岐（binary branching）で基本表せる。これは最初知ったとき非常に驚いた。文ってめちゃくちゃ長いのに、最終的に分解していったら必ず二股に分かれていくというのだから。。。\n\nこれは日本語でも英語でも他のあらゆる言語でも適用できるルールである。これを知ってなんかプログラミングみたいだなと感じた。命令型ならこう書くけど関数型ならこう書くみたいなパラダイムの違いも、SVOやSOVなど書き方に違いがあるが結果は同じみたいな話に近いと感じた（当たり前なんだけどね。）\n\n\n## 移動\n\n生成文法では***移動***という概念が非常に重要になってくる。まだ完全に理解できていないので、ざっくり説明だが受動文と能動文みたいな感じで目的語が主語に入れ替わるみたいな現象のことだ。（他にも様々な移動の規則がある）\n\n本書ではこの様々な移動の仕方についてかなり基礎的なことが書かれている。まだ理解しきれていない部分も多いので、復習はしたいが移動についてもプログラミングでも近いのあるのなーと思ったりした。\n\nReactには[lifting state up](https://react.dev/learn/sharing-state-between-components#lifting-state-up-by-example)というのがあるが、生成文法で、樹形図の要素が下位の位置から上位の位置へ移動する営みが、子コンポーネントから親コンポーネントへ状態が持ち上げられるのと似ているなと感じた。\n\n痕跡（Trace）という考え方が生成文法にはあり移動した要素は元の位置に痕跡を残し、その痕跡と移動先の要素は関連付けられる。これはpropsを通じて子コンポーネントはその状態を参照できると似ている。\n\n違う点としては生成文法の方は、普遍的な規則に基づく操作であり、lifting state upは設計パターンの一つで、開発者が意図的に選択することだろう。\n\n\n## 感想\n\n難しい！非常に難しい！でも理解できると感動があって面白いので、趣味レベルで学んでいくつもり。ちなみに副産物として、ゆる言語学ラジオの生成文法を取り扱った回があるので視聴したが、先にこっちを視聴しておくと本書の前半は、かなり理解度が高い状態で読み進められるので良かった。\n\n### 参照\n- [すべての言語の共通点とは？【生成文法1】#167](https://youtu.be/E49cMz_QwO8?si=ET_EzY2X1bwrtO4X)\n- [【ガチ】統語論の営みを概観する4時間半【樹形図まみれ】#304](https://youtu.be/UkI4XeiNsAU?si=cA9dS_nJquKCC9Zs)","src/content/blog/2025/0324.mdx","56740eb2cd3d2080","2025/0324.mdx","2024/0101",{"id":2725,"data":2727,"body":2730,"filePath":2731,"digest":2732,"legacyId":2733,"deferredRender":2196},{"title":2728,"publishDate":2729},"ネットワークはなぜつながるのかを読んだ","2024-02-13","import LinkCard from '../../../components/LinkCard.astro';\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AF%E3%81%AA%E3%81%9C%E3%81%A4%E3%81%AA%E3%81%8C%E3%82%8B%E3%81%AE%E3%81%8B-%E7%AC%AC2%E7%89%88-%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84TCP-IP%E3%80%81LAN%E3%80%81%E5%85%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%90%E3%81%AE%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98-%E6%88%B8%E6%A0%B9/dp/4822283119\" />\n\nネットワークスペシャリストの試験を受けるためのおすすめ書籍として紹介されていたので読んだ。エンジニアを10年以上やっていて今まで読まなかったことを恥じるぐらいには良書だった。\n\nブラウザの検索窓に検索ワードを入力して検索結果が出るまで（ページが表示されるまで）の間に一体何が行われているのかをツアー形式で紐解いていく構成になっている。\n\n自分の知識レベルとしては以下である。\n\n- OSI参照モデルにそれぞれ何をしているのかを把握している\n- HTTPについてはある程度理解しているつもり\n- TCP/IPとUDPがざっくり何か知っている\n- ざっくりとLANからハブを経由してサーバーまでパケットを送る\n\n### ARPの存在とMACアドレス\nパケットを送る際にレイヤーごとに様々なヘッダーがあり、パケットの中身をチェックしている所までは大学の講義などで理解していたが、実際にMACアドレスがどう使われ、ARPによってIPアドレスとMACアドレスを紐づけしたりしているなどはほとんど理解がなくそのあたりの知見がかなり広がった。\n\nまたDNSサーバーとやり取りするのはいつなのか、実際にLANケーブルで電気信号になるまでなどの経緯も知ることができた。普段フロントエンド開発していると、ページ描画するのにとにかくファストに！みたいな感じのことを考えるが、そもそもその前段でページを表示するまでの一瞬の間に、こんなにも複雑なことをしているんだなと改めて感じた。経路表など全然知らなかったので目からウロコだった。\n\n\n### ルーティング、ハブ\nなんとなくこのあたりは苦手意識があったというか引っ越しとかした後のプロバイダ契約だったり、ルーターを設置して、ケーブルを指してWi-Fiセットしてみたいな作業がとにかく好きではなかったが、スイッチングハブやルーティングの技術によってどのようにデータを制御しているのかも理解することができネットワーク環境を見直してみようという気持ちに5ミリぐらいなったのでそういう面でも良かった。\n\n### LANケーブル\nツイストペアケーブルなどの言葉は知っていたが、実際にレイヤー1の物理層でデータがどのようにネットワークの外に出ていくのかを知ることができたのはとても良かった。光ファイバのアクセス回線の仕組みなども全然知見がなく勉強になった。ネットワークの外に出たあとのサーバーに到達するまでの流れ（ファイヤーウォールやキャッシュサーバなど）は業務でも良く意識することなので復習にもなった。\n\n### 総評\n少し古い本ではあるのとIPv4を前提とした話なのでIPv6だとそもそもARPではないなどのキャッチアップは別の書籍などで勉強が必要だと感じた。しかし使用する技術が違うだけで考え方などは近い部分もあると思うので、決して無駄ではないと思う。あとネットワークについては図が重要だと感じたので、2周目は、図を手書きしてみて更に理解を深めようと思う。\n\n![ネットワークはなぜつながるのかの書籍のスクリーンショット](/images/20240213.jpg)","src/content/blog/2024/0101.mdx","256447346dbe7738","2024/0101.mdx","2023/0101",{"id":2734,"data":2736,"body":2739,"filePath":2740,"digest":2741,"legacyId":2742,"deferredRender":2196},{"title":2737,"publishDate":2738},"2022年 12月の振り返り","2023-01-01","import LinkCard from '../../../components/LinkCard.astro';\n\nあけましておめでとうございます！今年1発目のブログはなんと去年の12月の振り返り記事です。\n\n## 仕事\n休職明けということもあり、リハビリ的に1ヶ月過ごしました。プロジェクトも変わりまだ本格的にコードを書き始めることもなく、緩やかでした。休職前まではReact/Nextでしたが久しぶりにVue/Nuxtに変わりました。Vue3の学び直しやVuetifyなんかも使っていく感じです。\n\n同じチームメンバーがそれぞれ拠点が違う（関東、関西、九州、韓国）ということもあり3ヶ月前からやろうと言ってたオフラインのLT会を行いました。久しぶりに大阪に行って[スパワールド](https://www.spaworld.co.jp/)で豪遊しながら、オフラインで交流しました。\n\n\n![スパワールド](/images/supa-world.jpg)\n\n普段オンラインではMTGなどで雑談したりしていますが、オフラインではほぼ初めて会ってそのままLT会をするという貴重な体験ができました。\n\nプロジェクトが一区切りしていたこともあり[給与自己決定制度](https://notion.yumemi.co.jp/815649ec12304cd7a58ecd5eaee15789)によって給与を上げました。普通の会社であれば昇給するタイミングがありますが、気づいたら1年以上更新していなかったので、このタイミングでアップできたのは良かったです。ただ在籍期間も来年の5月で3年にはなるので、もう少しこの会社にいる意味を見つめ直して、転職も全然視野に入れながら日々精進したいです。\n\n## プライベート\n大学の授業は、休職中に2/3終わっていたこともあり余裕がありました。復習をちょっとやっただけであまり時間を使いませんでした。その浮いた時間で読書をしたり、久しぶりに何もしない時間を作りのんびりしていました。そのおかげで睡眠時間も増えて良かったです。\n\nその他では、急な出費が多くお金を結構使ってしまったことが反省点で、数ヶ月の間は節約していきたいと思います。\n\nアドベントカレンダーに3本記事を書きました。\n\n- [Trusted Testerに取り組んだ話](https://www.ryokatsu.dev/blog/2022/1204-a11y-advent)\n- [文系エンジニアが放送大学に通い始めたことについて](https://www.ryokatsu.dev/blog/2022/1219-adult-student-advent)\n- [2022年に聴いて良かった5曲](https://www.ryokatsu.dev/blog/2022/1222-top5-music-advent)\n\nまた、Zennのスクラップで1人アドベントカレンダーをライトに行いました。\n\n\u003CLinkCard url=\"https://zenn.dev/ryokatsu/scraps/69e00c777f6b73\" />\n\nまだ完成していないので、気が向いたら残りを埋めていきますが、その日に何か決める方式だとネタ切れを起こす（当たり前）ことが分かったので来年は、予めネタを溜めておいてから望みたいと思います。\n\n\n## 2022年の振り返り\n\n本来なら年の瀬なので、年度振り返りをしてもいいかなと思ったのですが、今年は月ごとの振り返りを毎月ブログにしていたので詳細には振り返りせず箇条書きで書いていきます。\n\n- 前半は、大学の授業と仕事の両立で一時期しんどい時期があった。\n- 今まで遠ざけていたCSの授業を学べて知見を得ることができて良かった\n- 後半、休職ができて人生を見つめ直すことができて良かった。\n\n## 来年の抱負\n\n大学の授業でインプットばかりだったので、2023年はアウトプットをしていきたいです。プログラミングと数学の時間を増やしてモノにしていければと思います。\n\n今年で35歳になるので、そろそろエンジニア人生も分岐点な気がしています。ただ自分は、あまりキャリアを大きく見れるタイプではないので目の前のことをしっかり遂行していき家族と幸せに暮らせればそれで良いかなと思っています。息子も5歳になるので一緒に遊べることも増えてくるので楽しみながら過ごしたいです。\n\n去年は、ゲームする時間も大幅に減ってしまった（しっかりプレイしたのELDEN RINGだけかも）のと今年発売のゲームでやりたいのが盛りだくさんなのでゲームの時間を増やしていきたいです。","src/content/blog/2023/0101.mdx","377dce6b0ac6c8d4","2023/0101.mdx","2023/020820",{"id":2743,"data":2745,"body":2748,"filePath":2749,"digest":2750,"rendered":2751,"legacyId":2758},{"title":2746,"publishDate":2747},"CSS力が低下している","2023-08-20","仕事の案件的に、toBのアプリケーションサービスに携わることが多い、CSSフレームワークを使う案件が多い（Vuetifyとか）のでマークアップ中心からフロントエンドエンジニアになってから、CSS力が落ちたなと感じる。\n\nレイアウトを組み立てることがほとんどで使うCSSがほぼflexだったり、gridだったりする。その他は、コンポーネントの決められたデザインシステムを使う。コンポーネントを新規で作ることもあって、Storybookで実装していくのは、楽しいんだけどページ全体のマークアップとかはほとんどやれていない。\n\n昔のように、LPページでアニメーションゴリゴリのコーディングを久しぶりにやりたいな。。ということでどなたかお仕事をください！","src/content/blog/2023/020820.md","7b03dbf3b8193fe5",{"html":2752,"metadata":2753},"\u003Cp>仕事の案件的に、toBのアプリケーションサービスに携わることが多い、CSSフレームワークを使う案件が多い（Vuetifyとか）のでマークアップ中心からフロントエンドエンジニアになってから、CSS力が落ちたなと感じる。\u003C/p>\n\u003Cp>レイアウトを組み立てることがほとんどで使うCSSがほぼflexだったり、gridだったりする。その他は、コンポーネントの決められたデザインシステムを使う。コンポーネントを新規で作ることもあって、Storybookで実装していくのは、楽しいんだけどページ全体のマークアップとかはほとんどやれていない。\u003C/p>\n\u003Cp>昔のように、LPページでアニメーションゴリゴリのコーディングを久しぶりにやりたいな。。ということでどなたかお仕事をください！\u003C/p>",{"headings":2754,"localImagePaths":2755,"remoteImagePaths":2756,"frontmatter":2745,"imagePaths":2757},[],[],[],[],"2023/020820.md","2023/0223",{"id":2759,"data":2761,"body":2764,"filePath":2765,"digest":2766,"legacyId":2767,"deferredRender":2196},{"title":2762,"publishDate":2763},"解像度を上げるを読んだ","2023-02-23","import LinkCard from '../../../components/LinkCard.astro';\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/-/en/%E9%A6%AC%E7%94%B0%E9%9A%86%E6%98%8E/dp/4862763189\" />\n\nTwitterのタイムラインで話題になっていたので、読んでみました。普段何気なく使う「解像度が高い」「解像度が低い」という言葉ですが、解像度が高い状態というのはどういう状態か、解像度を高くすると何がいいのか、解像度を上げるにはどうすれば良いかが丁寧にまとまっている本でした。ビジネス本ですが、エンジニアが読んでもとてもためになる本でした。\n\n## 解像度をあげる4つの観点\n\n書籍の中では、「深さ」「広さ」「構造」「時間」の4つに分解しています。特に「深さ」に関しては他の観点より特に需要で、解像度が低いと感じたらまずは「深さ」からはじめるのが良いとされています。\n\n解像度が低い状態は、例えばお客さんと話している時に顧客像がぼんやりしていたり、話がふわっとしていたりという状況のことで解像度が高い状態だと「顧客像がはっきりしている」「話が具体的」などになります。「ReactのuseEffectの挙動を理解して人の説明できる」「JavaScriptの配列を操作するmapメソッドのアルゴリズムを理解して人の説明できる」なども解像度が高い状態だと思います。\n\n## 深さ\n\n原因や要因などをより深くまで調査して、掘り下げ把握することができていると解像度が高い状態と言えます。普段コーディングする時も、まずはコードを読んだり、書籍で調べたり、ドキュメントを読んだり、技術記事を読んだりする思います。これがレベル1。次に実際に書いてみる（写経も含めて）これでレベル2。そのあと不明点を人に聴いたり、レビューに出してレビューを受けたりして、知見を得たりするのがレベル3というように階層が深くなるにつれ解像度が上がっていきます。書籍の中でも「情報量を増やす」「サーベイをする」「インタビューをする」のように深さのレベルをあげていくことが書かれています。\n\n## 広さ\n\n先程の深さを深くしていく中で、別の観点を見つけることがあります。これが広さです。言葉そのままで、「視野を広げる」ということでしょうか。エンジニア的に言うと、技術選定時に「どのフレームワークを使うべきか」「ライブラリの比較」「色々なコードの書き方がある」などですかね。広さを知ると様々な選択肢ができ最適な判断ができます。少し深さに関わっている部分もありますが、広さの解像度が低いと適切な判断ができなかったり、競合に負けたりすることが起きそうです。\n\n## 構造\n\n深さ、広さの観点でみえてきたものをグルーピングしたり構造化することです。関数をまとめたり、ディレクトリ構成を見直したりみたいな作業もここに入りそうです。書籍でもディレクトリ構成の話は出てきます。MICEを使った分け方なども紹介されています。（久しぶりに聴いた）また、構造化の中で図を書くことも解像度を上げるのに良いと書かれていました。確かに技術記事の中で分かりやすい図を見かけてると解像度が高い記事を書けているなと感じます。\n\nちなみに最近こんなツイートがバズっていましたが、これも構造の解像度が高いなと感じます。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">よくReactでこういう「種類別」になってるプロジェクト見かけるけど、必ず辛みがますので全て「機能別」のプロジェクトになってほしい。 \u003Ca href=\"https://t.co/pWiPntn49Y\">pic.twitter.com/pWiPntn49Y\u003C/a>\u003C/p>&mdash; しゅう (@adelie_pf) \u003Ca href=\"https://twitter.com/adelie_pf/status/1627265417428504577?ref_src=twsrc%5Etfw\">February 19, 2023\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n## 時間\n\n最後に時間です。これは、時間に経過によって変化する物事を適切に捉えることです。フロントエンドの文脈だと、よく言われるのが「変化が激しい」です。日々変化をチェックして解像度を高くすることが重要そうです。身近な所だとコードも時間が経てば負債になっていきます。その時にどのような意図で変更があったのかなどを適切に捉える能力が高いと解像度が高いと言えます。\n\n## 感想\n\n普段何気なく行っていることもありましたが、改めて解像度について理解できる一冊でした。たまにはビジネス書もいいね。","src/content/blog/2023/0223.mdx","627fc8623e1d80b2","2023/0223.mdx","2023/0311",{"id":2768,"data":2770,"body":2773,"filePath":2774,"digest":2775,"legacyId":2776,"deferredRender":2196},{"title":2771,"publishDate":2772},"プログラマー脳を読んだ","2023-03-11","import LinkCard from '../../../components/LinkCard.astro';\n\n\u003CLinkCard url=\"http://www.shuwasystem.co.jp/book/9784798068534.html\" />\n\n\nタイトルに惹かれて買いました。ジャンルでいうと「達人プログラマー」的な本ではありそうですが、「コードを書くときにSOLID原則を意識しろ！」みたいな感じではなく「コードを読むとき、書く時に具体的に人間の脳で何が起こっていて、どういう処理をしているのか」に着目している本でした。全章通して学びが多かったのですが、その中でもいくつか気になった箇所について読書感想文として紹介します。\n\n\n## どうやって記憶が管理されているか（プログラミングって難しい）\n\n本書の一番最初の部分です。ここだけでも本書を読んだ価値が十分にあると感じました。そしてプログラミングというのは非常に複雑でクリエイティブな作業だと感じます。\n\n### 長期記憶\nコードを読む際に、例えばTypeScriptで\n\n```ts\nfunction test\u003CT>(arg: T): T {\n  return arg;\n}\n```\nとあった場合に`T`が、何をしているのかが分からない場合は「知識不足」で長期記憶に関する情報が少ないとされています。\n\n\n### 短期記憶\nコードリーディング中にとあるメソッドを発見したけど、このメソッドが具体的に何をしているのかがすぐに分からない場合は「情報不足」で短期記憶に関する問題とされています。短期記憶は一時的に保持される場所では、ありますがたくさんの異なる事柄を探索している際に、以前に保存していた情報を忘れてしまう場合もあります。\n\n### ワーキングメモリ\nコードリーディング中に出てくる定数や変数、処理の内容が複雑だと、混乱することがあります。「処理能力の不足」でワーキングメモリが不足していることが原因です。\n\nこう見ると、プログラミングというのは、とても大変な作業だということがわかります。これらの記憶装置を理解した上で、長期記憶にしっかり定着させるための方法とし、「間隔をあけて思い出す」というのがありました。勉強した学びとか知見などは、まず短期記憶に入りますが、正直すぐに忘れます。\n\nこれは業務でもよくあることで「何だこのコード汚いな。。誰が書いたんだ？ 1ヶ月前のオレやんけ！！」ってことありませんか？自分はあります。ただ完全に忘れているわけでもなくワーキングメモリがうまく覚えているケースもあって、以前覚えた情報をインプットすると短期記憶のフィルタを通して強く記憶に残ることがあり、このとき長期記憶に記憶されます。つまり「長期記憶」「短期記憶」「ワーキングメモリ」はそれぞれ補完し合っていることがわかります。\n\nここで以下のような言葉がありました。\n> **人はただ言葉や事実だけを記憶するのではなく、自分の記憶や信念に合うように記憶を修正している**\n\n正しく事実を記憶しているつもりが自分が良いように解釈して、記憶することで誤った記憶になるケースもあります。これは結構危険ですね。。\n\n## フラッシュカード\n\n本書は、優れたプログラマーになるためにコードの読み方と書き方について認知科学に基づいて書かれていますが、度々「フラッシュカード」という言葉が出ます。言ってしまえばこれが優れたプログラマーに、なるための解決策だと僕は本書を読んで感じました。\n\nフラッシュカードは、いわゆる英単語を暗記するための「単語帳」のようなものです。フラッシュカードにシンタックスや、デザインパターン、Tipsとかを書いていきます。そしてそのフラッシュカードを使って先程の長期記憶に保存するために、定期的に繰り返し練習することで長期記憶からすぐに取り出してプログラミングに取り組むことができます。\n\nなんかこう書いてしまうと、「中学とか高校でやってたやつじゃん。。なんでやっていないんだろ」という気持ちになりました。本書でも基礎的な練習は必要と論文の紹介を交えて書かれていました。\n\n### 反復練習\nランニングだったり、音楽で運指を訓練するみたいなことがありますが、プログラミング界隈ではあまりないということも書かれていました。（100回forループを書いて身につけるといった文化圏ではない）ここで重要な様々なスタイル（デザインパターン）での書き方を訓練するのが大事ということでした。for文でも、正順、逆順、ステップ数の異なるステッパー変数を使う書き方などを訓練すると良いとのことでした。これは確かにそうで、自分も様々なコードのスタイルを見て書いてみて覚えてきた経験があります。\n\nまたキーボードショートカットとかを自動化していくのも優れたプログラマーになるためには重要とありました。余計な脳のメモリを使わないためにも必須ですね。\n\n\n## メンタルモデル\n実際に手を動かさなくてもできる作業のこととして紹介されていました。ある事柄だったり部分的なことについてを抽象的な形として捉えることですかね。プログラマー的にいうとクラスとかでしょうか。一度メンタルモデルにしてしまうと、人間が扱いやすい形になっているので、ワーキングメモリへの負荷が減らせます。\n\nしかしここで「古い記憶は長期記憶から消えることがない」ということが書かれており、例えばなんでしょう、あるメンタルモデルの内容を更新して長期記憶に入れたはずなのに、認知負荷が高い状態だとアップデートしたメンタルモデルを参照せず、古いメンタルモデルを参照することがあり。この時読み間違えが起こってしまいます。具体的なコードレベルでたくさんクラスを作ってあることがいい状態かというと微妙そうですが、コードを読むための助けにはなってくれそうです。\n\n## 2つ目のプログラミング言語の学び方\n一度学んだ知識が他でも生かされることを、「知識の転移」と紹介されていました。人は、新しい情報に遭遇すると感覚記憶から短期記憶に移行してワーキングメモリに入力され、ワーキングメモリが活性化されて長期記憶も活性化されて検索を始めます。その検索でヒットして見つかることがあります。Haskellでmap()やfilter()とかを覚えていたらJavaScriptのmap,filterに関しては、そこまで苦労せずにというかほぼ苦労せずに覚えることができると思います。\n\nしかし、この「知識の転移」実は、難しいことだと本書で紹介されていました。その例としてチェスの実験があったのですが、チェス自体は他の論理ゲームなどに転用することができないというのが実験の結果でした。更に一般的な知能、論理的推論力、記憶力が向上すると言ったことはないとのことでした。\n演習としては、類似点、違い、気付きなどをマトリクスにしてそれぞれ考えるのがおすすめのようです。TypeScriptとHaskellで構文、型システムなどの違いをまとめると言った感じでしょうか。\n\n\n## 割り込み\n\nここはエンジニアあるあるだと思いますが、コーディングに集中している最中に声を掛けられたり（今はリモートがほとんどなんであまりないかもですが）、Slackのメンションがきたりすると一気に集中力がなくなります。とある実験によると、割り込みがあってから再度コードを書き始めるにはおよそ15分掛かることがわかったそうです。プログラマーが1分以内に作業を再開できたケースは、わずか10%に過ぎないらしいです。。めっちゃわかるな〜と感じました。自分も割り込みされると、復帰するのに割と時間が掛かるというか、Slackをそのままダラダラ見てしまったりすることもあります。ポモドーロをすれば良いかも知れませんが、それでも割り込み自体はなくならないので、割り込みされる前にコメントを記載しておくなどをしてこまめに記録しておくと再開する時間が早くなるかも知れませんが。中々面倒ですね。。\n\n## オンボーディング\n\n読み方/書き方とは違った箇所で、新人のプログラマーに対してどう接するかが書かれていました。以下に注意して取り組んでいくと良さそうな内容でした。\n\n- 新人さんが新しくジョインしたときに、シニアエンジニアが、一度にたくさんの情報を伝えると新人さんの認知負荷が高くなるのでやめる\n- シニアエンジニア目線で、小さなバグ改修、小さな機能開発だと思ったissueは実は、新人さんからすると簡単なissueではない可能性があるのでちゃんと認識合わせする\n\n\n## まとめ\n全体的にとても読みやすく、最初から順番に読んでいくストーリー仕立てな所もあって面白く読めました。フラッシュカードについては、ちょっとやってみたいなと思いました。拡張させてカードゲームみたいにできたらより面白いかも知れません。\n\n他にも、可読性の話だったり、意味波の話も書こうかなと思ったのですが、以下のzennの感想ブログに詳しく丁寧に書かれていたのでそちらを読んでいただけると良いのかなと思いました。\n\n※[「プログラマー脳」の本の感想と賛辞 〜 意味波と具象と抽象と](https://zenn.dev/339/articles/83caa21b9ad736#%E3%83%A1%E3%83%B3%E3%82%BF%E3%83%AB%E3%83%A2%E3%83%87%E3%83%AB)","src/content/blog/2023/0311.mdx","f1bd562a37e66867","2023/0311.mdx","2023/0403",{"id":2777,"data":2779,"body":2782,"filePath":2783,"digest":2784,"legacyId":2785,"deferredRender":2196},{"title":2780,"publishDate":2781},"Webアプリケーションアクセシビリティを読んだ（特に7,8章についての感想）","2023-04-03","import LinkCard from '../../../components/LinkCard.astro';\n\n![WEBアプリケーションアクセシビリティの書籍](/images/20230402.jpg)\n\n1週間前ぐらいに、全部読み終わりました。各章の簡単な感想はツイートに垂れ流しています。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">Webアプリケーションアクセシビリティ読む\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1634191482629533696?ref_src=twsrc%5Etfw\">March 10, 2023\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n全章通して素晴らしかったのですが、特に7章と8章について個人的にすごい良かったので感想を書きます。\n\n## 7章 アクセシビリティの組織導入\n自分の所属している組織をアクセシビリティ組織にしていくための方法が記載されています。Slackでアクセシビリティに関するチャンネルを作って、情報を共有する所からはじめて仲間を増やしてコミュニティを作るなど、具体的な行動が順番に紹介されています。\n\nこれは個人の話ですが、今所属している会社でも、アクセシビリティ組織にしていきたいと思っているものの、中々行動に移せないで過ごしていました。以前「Google流 ダイバーシティ＆インクルージョン」の本を読んで[ブログも書きました](/blog/2022/0619)が、しっかり取り組まないと「中途半端なアクセシビリティ対応」になってしまいます。改めて今回7章にかかれている内容を読んで、アクセシビリティ組織にしていくのは強い執念と、コミュニティの周りのサポートが絶対不可欠だと感じました。自分もこの7章の内容を参照に取り組んでみたいと思いました。\n\n### 自信の考えを社内で発信する\n\n社内のWikiなどでブログを書いて、ポストするなどして自分の考えをまずは社内の人に読んでもらう、身近の人に対してLTをする、職能を超えたLTをする順番に取り組むステップが良いなと思いました。自分も一度アクセシビリティの内容でLTをしましたが、継続をしていくのが大事だと思いました。\n\n\n### アクセシビリティを必要としている人に会う\n\nここに関しては、今まで本当に接点がなくいつか話を聴いてみたいと思っていました。具体的な会う方法がいくつか紹介されていたので試してみたいと思いました。\n\n### アクセシビリティの社内オーナーになる\n\n自分はまだオーナーになる器ではないですが、「何故アクセシビリティに興味があるのか？何故取り組んでいるのか？」という問いを投げかけられた感じがしました。というのもこのセクションで、著者の方々がそれぞれアクセシビリティに取り組んでいる理由を書かれているからです。自分も改めて言語化するきっかけになってよかったです。\n\n\n\n## 8章 アクセシブルなUI設計の原理を導く\n\nこの章では、アクセシビリティを考慮したUIを設計するためにどういうことを考えたほうが良いかのプラクティス（アンチパターン）がいくつか掲載されています。\n\nまず本書に書かれた言葉で紹介したいのが、以下の言葉です。\n\n> 「そのUIはその形で存在する必要がある」という前提を疑う\n\n例えば、ドラッグ&ドロップやマウスオーバーのようなUIはそもそも特定のデバイスに依存しています。これをアクセシブルにするのは難しいので、別のシンプルな方法で置き換えることが可能なのかを常に意識することが大事だと言うことです。\n\nアコーディオンやタブで情報を隠しておくことも「なんで折りたたんで非表示にしておくんだっけ？」と考えたときに「そもそも情報量が多すぎるから」というだけの可能性もあり、これはアクセシブルな設計とは言えないかもしれません。普段何となく作っているUIも本当にそのUIが適切なのかという意識は、常に持つことが大事だと改めて思うのと同時に、エンジニアだけが意識していても解決できないのでデザイナーや他の関わっている全ての人が対象だと思いました。\n\nモーダルダイアログについてのアンチパターンも紹介されており、すごく共感しました。モーダルダイアログというのは、便利なことを良いことに本来の機能を見失ったUIが多いと僕も感じています。多分SPAでページ遷移せずにUIがインタラクティブに切り替わることも誤解を与えていると思っていて自分も、ページ全体がモーダル（フルモーダルとか呼んだりしています）を何個も実装してきました。やはりページ遷移をしっかり行うことがアクセシブルだと自分は思いますが、トレードオフとして「ステップが多くなる」など色々なことを言われます。そんな時に本書に書かれたことを説明して適切な提案がで出来るようになると感じました。\n\n他にも無限スクロールだったり、様々なアンチパターンが紹介されているので、この章だけで仕事で関わっているチーム内で輪読会すると良いんじゃないかなと思いました。\n\n\n## 他の章について\n\nフォームだったり、ちょっとリッチなUIをアクセシビリティ対応していくための方法が書かれていてとても学びになるのでおすすめです。（自分も復習するような感じで読みました。）特に良かったのは、「カルーセル」「ツールチップ」は実装するな！と書かれていたことです！（言葉の温度感については書籍を呼読んでください）フロントエンドエンジニアが普段辛いなと思っていることを代弁してくれたという気持ちになり何か嬉しかったですww\n\n\n\u003CLinkCard url=\"https://www.amazon.co.jp/-/en/%E4%BC%8A%E5%8E%9F-%E5%8A%9B%E4%B9%9F/dp/4297133660\" />","src/content/blog/2023/0403.mdx","366e10ec53e294c5","2023/0403.mdx","2023/073002",{"id":2786,"data":2788,"body":2791,"filePath":2792,"digest":2793,"rendered":2794,"legacyId":2801},{"title":2789,"publishDate":2790},"仕事辞めたい、転職したいと思う時ってどんな時？","2023-07-30","正直言うと1年ぐらい前から、そんな気持ちがまあまあ高くてカジュアル面談をいっぱいしたり、選考受けたりもした。でも最近は不景気っぽい空気もあり、一旦は辞めたい気持ちが停滞している。\n\n結局転職とかって「えいや」で決めそうな気もしているが、改めて自分がどういう時に仕事を辞めたいとか転職したいと思うのか雑に書いてみる。\n\n- 成長が感じられなくなった時\n  - 一番シンプルなもので、前職や前前職もこの理由で転職している。やっている仕事的にもそうだし、周りの人たちのモチベーション的にも成長を感じられなくなることがある。\n  - 例えばプロジェクトで今までやってきたことを、慣れているからという理由で、同じようなプロジェクトがまたある時にアサインされたりすると、モチベーションが上がらない\n  - この時によく思うのは、フロントエンドから違う職種に行くべきみたいなことを常に考えるんだけど一歩踏み出せない自分がいたりする。\n- 一緒に仕事している人の空気を悪くしてしまったかもと感じる時\n  - ちょっと被害妄想が入っていることもあるけど、チームのためを思って発言したことなのに言い過ぎたなと感じたり、逆にチームメンバーに聴いてみても全然反応がなかった時などは何か空気悪くしているのかなーって思って辛くなる。\n- めちゃくちゃ早口になっている時\n  - 普段から早口っぽいところがあるけど、このスピードがもっと早い時があって、この時自分は、めちゃくちゃ焦っていることが多い。\n- 周りの人が活躍したり、評価されたりするのを見た時\n  - 弊社でいうと「シャドーを感じる」とかって良く言うけど、こういう情報をよく見ると「自分は何しているんだろ。」と思うことがよくある。\n- プライベートに変化が起こったとき\n  - 専業主婦の妻が仕事始めようかなとか相談をもらった時は、子供のためにもう少し金銭的に余裕があった方がいいのかなとか思うことがある。\n- 仕事のスピードが遅いと感じる時\n  - 他の人と比べて、自分の仕事が遅かったりすると「俺いらんくない？」みたいな気持ちになる。\n- 会社の方針と自分の価値観の違いがズレている時\n  - 明らかに何か自分の価値観と違うぞと思った時は結構やる気がなくなることが多い。\n- ずっとやりたくない仕事をしている\n  -  成長が感じられなくなった時と近い部分があるけど、自分があまり興味のない仕事だったりが続くとモチベーションがかなり下がる。\n\n皆さんはどんな時に 仕事辞めたい、転職したいと感じるのか気になります。","src/content/blog/2023/073002.md","af6c6346ff41f5f0",{"html":2795,"metadata":2796},"\u003Cp>正直言うと1年ぐらい前から、そんな気持ちがまあまあ高くてカジュアル面談をいっぱいしたり、選考受けたりもした。でも最近は不景気っぽい空気もあり、一旦は辞めたい気持ちが停滞している。\u003C/p>\n\u003Cp>結局転職とかって「えいや」で決めそうな気もしているが、改めて自分がどういう時に仕事を辞めたいとか転職したいと思うのか雑に書いてみる。\u003C/p>\n\u003Cul>\n\u003Cli>成長が感じられなくなった時\n\u003Cul>\n\u003Cli>一番シンプルなもので、前職や前前職もこの理由で転職している。やっている仕事的にもそうだし、周りの人たちのモチベーション的にも成長を感じられなくなることがある。\u003C/li>\n\u003Cli>例えばプロジェクトで今までやってきたことを、慣れているからという理由で、同じようなプロジェクトがまたある時にアサインされたりすると、モチベーションが上がらない\u003C/li>\n\u003Cli>この時によく思うのは、フロントエンドから違う職種に行くべきみたいなことを常に考えるんだけど一歩踏み出せない自分がいたりする。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>一緒に仕事している人の空気を悪くしてしまったかもと感じる時\n\u003Cul>\n\u003Cli>ちょっと被害妄想が入っていることもあるけど、チームのためを思って発言したことなのに言い過ぎたなと感じたり、逆にチームメンバーに聴いてみても全然反応がなかった時などは何か空気悪くしているのかなーって思って辛くなる。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>めちゃくちゃ早口になっている時\n\u003Cul>\n\u003Cli>普段から早口っぽいところがあるけど、このスピードがもっと早い時があって、この時自分は、めちゃくちゃ焦っていることが多い。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>周りの人が活躍したり、評価されたりするのを見た時\n\u003Cul>\n\u003Cli>弊社でいうと「シャドーを感じる」とかって良く言うけど、こういう情報をよく見ると「自分は何しているんだろ。」と思うことがよくある。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>プライベートに変化が起こったとき\n\u003Cul>\n\u003Cli>専業主婦の妻が仕事始めようかなとか相談をもらった時は、子供のためにもう少し金銭的に余裕があった方がいいのかなとか思うことがある。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>仕事のスピードが遅いと感じる時\n\u003Cul>\n\u003Cli>他の人と比べて、自分の仕事が遅かったりすると「俺いらんくない？」みたいな気持ちになる。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>会社の方針と自分の価値観の違いがズレている時\n\u003Cul>\n\u003Cli>明らかに何か自分の価値観と違うぞと思った時は結構やる気がなくなることが多い。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>ずっとやりたくない仕事をしている\n\u003Cul>\n\u003Cli>成長が感じられなくなった時と近い部分があるけど、自分があまり興味のない仕事だったりが続くとモチベーションがかなり下がる。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>皆さんはどんな時に 仕事辞めたい、転職したいと感じるのか気になります。\u003C/p>",{"headings":2797,"localImagePaths":2798,"remoteImagePaths":2799,"frontmatter":2788,"imagePaths":2800},[],[],[],[],"2023/073002.md","2023/0730",{"id":2802,"data":2804,"body":2806,"filePath":2807,"digest":2808,"legacyId":2809,"deferredRender":2196},{"title":2805,"publishDate":2790},"satoriでOGP生成するようにした with Astro","今まで[cloudinary](https://cloudinary.com/)のストレージに加工した画像をURLで指定してOGPを出すようにしていました。\n\n![解像度を上げるの記事のOGPイメージ](/images/20230730.png)\n\n割りといい感じに調整できるので、良かったのですが、だいぶ前に登場した[satori](https://github.com/vercel/satori)が気になっていたので今回移行しました。\n\nsatoriは、HTMLとCSSで書いたビューを、SVGに変換するライブラリです。JSXをサポートしているので、Reactコンポーネントのように書けます。\n\n手順はこんな感じでした。\n\n- `@astrojs/react`と`@resvg/resvg-js`そして`satori`をインストール\n- OGPで表現したいビューのコンポーネントをReactのコンポーネントで作成\n- OGPのエンドポイントになる[slug].png.tsを作成する\n- OGの設定を変更\n\n\u003CLinkCard url=\"https://github.com/ryokatsuse/ryokatsuse_web/pull/50\" />\n\n\n- [satoriで使えるCSS](https://github.com/vercel/satori#css)は限られているようでした。（React Nativeと同じFlexboxのレイアウトエンジンである[Yoga](https://yogalayout.com/)が使われている）\n - ただ、ほとんど使えるのでogp用途であれば問題ない\n - Tailwindが使えなかったので普通にstyleタグで書きました。（ドキュメント参考）\n\n- 今回Google Fontsを使用してみました。\n  - [IBM Plex Sans JP](https://fonts.google.com/specimen/IBM+Plex+Sans+JP?subset=japanese)を使用しました。\n  - 和文フォントだけど太字がつぶれにくい！\n  - なんとなくこれにしたけど変えるかもしれません。\n\n- エンドポイントで実際に記事のタイトルを呼び出すときにエラーが出た。\n - 渡しているslugが「2023/07/30」のような値のためにslugの正規表現ではじかれてしまう。。\n - 仕方ないので`post.slug.replace(/\\//g, '-') }`で対応した。\n\nローカルホストでOGPの表示確認をするときは、[Localhost Open Graph Debugger](https://chrome.google.com/webstore/detail/localhost-open-graph-debu/kckjjmiilgndeaohcljonedmledlnkij)で行いました。\n\n参照\n- [satoriのgithub](https://github.com/vercel/satori)\n- [satoriを使ったAstroのOGP画像生成メモ](https://blog.lacolaco.net/2023/06/astro-satori-og-image-generation/)","src/content/blog/2023/0730.mdx","2440fde01954cebf","2023/0730.mdx","2023/0815",{"id":2810,"data":2812,"body":2815,"filePath":2816,"digest":2817,"legacyId":2818,"deferredRender":2196},{"title":2813,"publishDate":2814},"RTA in Japan Summer 2023 3日目参加レポ","2023-08-15","import LinkCard from '../../../components/LinkCard.astro';\n\nRiJファン3年目にして初めてオフライン会場に行ってきたので雑に感想を書きます。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">夏フェスにきた \u003Ca href=\"https://t.co/egVEmTlJMM\">pic.twitter.com/egVEmTlJMM\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1690019909181591552?ref_src=twsrc%5Etfw\">August 11, 2023\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n### 会場\n\n- [note place](https://place.lp-note.com/)（WeWork麹町 7F）\n- ほぼ0:00から入場したけど、まあまあ人が既に会場にいて驚いた。\n- 元々イベントスペースを開催するために提供している場所ということもあり、とても広々とした会場だった。\n  - ここでエンジニアのカンファレンスとかやると良さそう。\n- 会場内では常にN95相当のガチマスクを着用する必要があった。最近夏で暑かったこともありマスクをしていないことが多かったので、最初慣れなかった。\n  - 食事は不可だが、水分補給はどこでもできる。\n- ゲーム観戦エリア、ラウンジエリアの大きく2つが用意されている。\n  - ラウンジエリアは休憩することができたり交流ができたりするエリアだが、大きなスクリーンがあるので、ゲーム観戦もできる。（物販もここで売っていた。）\n  - 関係者エリアもあった。会場内では普通に走者の方とすれ違ったり、話せたりできる。\n- 会場内は、結構冷房が効いていて寒い。半袖半ズボンで行くと結構しんどかったので、気軽に着れる長袖と長ズボンが必要\n- ゲーム観戦エリアの椅子は、長時間座っていると腰が壊れる。\n- 再入場はもちろん可なので、ちょっと外に出て散歩だったり、食事に行ける。\n  - ただし、夜中の時間は、四谷近辺で空いているお店はコンビニしかない。松屋や吉野家などもオフィス街仕様で、24時間営業ではなかった。\n- ラウンジエリアでちょっと座りながら仮眠できたけど、夜中限定かも。日中は、人も多いのでしにくい。\n- Red Bullが飲み放題だったが、夜中の時間には1つもなく補充タイミングによっては、常温なのでタイミングが合わないとその場で美味しく飲めない感じだった。\n- 無敵時間さんのブースも、当然夜中の時間は空いてなかった。昼のタイミングでTシャツとうちわを購入しました。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"zxx\" dir=\"ltr\">\u003Ca href=\"https://t.co/g29HWcj0Ce\">pic.twitter.com/g29HWcj0Ce\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1690181561038364672?ref_src=twsrc%5Etfw\">August 12, 2023\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n\n### 観戦した作品\n\n- チョコボの不思議なダンジョン2\n  - 会場に着いたらプレイ中だったため途中から観戦した。\n  - ストーリー展開の解説が良くてプレイしてみたくなった。\n  - ぬすっとのエキスが強い\n\n- 塊魂TRIBUTE\n  - 塊魂が過去シリーズとこのTRIBUTEは、プレイしてたのでかなり懐かしかった。\n  - BGMが神\n  - オブジェクトを巻き込む速度が、早くて爽快感が通常プレイよりもあった。\n\n- ソードオブソダン\n  - 音声、既存トラブルがあったぽく1時間ほど配信が止まっていた。\n  - 会場でも結構緊張感があった。\n  - ゲーム自体はプレイ済みだったが、RTAは初見。\n  - ゆゆキチ先生凄かった。\n  - デスクリムゾン発売までは、これがクソゲーと呼ばれていたが、その名前に恥じない内容だった。\n\n- ドラゴンズレア\n  - ゆゆキチ先生連続プレイ\n  - レーザーディスク版ではなくFC版だったのであっという間に終わる。\n\n- Spark the Electric Jester 3\n  - 全く初見のゲームだったけど、走者兼解説がめちゃくちゃ良くてゲームをプレイしたくなった。\n  - ソニック好きのゲーム作者がUnityをベースにした独自エンジンでゲーム作ったって話も注目ポイント\n\n- ゼルダの伝説 ブレス オブ ザ ワイルド\n  - 今回のRTAの中でも注目のゲーム\n  - Bubziaさんは、スーパマリオ64で目隠ししてプレイしたツワモノ\n  - ほぼ失敗なしでクリアしていて、とにかく凄かったが、特に最後のガノン戦は、見てるこっちもハラハラした。\n\nここで、1回休憩を挟む。3時間ほど外出して食事と休憩をした。新宿が近いので、一度新宿まで行けばネカフェで寝たりとかもできるかも知れないと思った。\n\n- 極魔界村 改\n  - 会場内はかなりゆるふわな雰囲気で楽しかった。\n  - 走者と解説のコンビネーションが良かった。\n\n- メタルギアソリッド3 スネークイーター\n  - 今回見た中で、一番良かった。\n  - 2時間半の映画を見終わったような感動があった。\n  - ケロタンは、自分も挑戦したことがあったけど、難しい、懐かしい思い出が蘇った。\n\n\n\u003Ciframe width=\"100%\" height=\"315\" src=\"https://www.youtube.com/embed/p1qJYLD7O4g\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\u003C/iframe>\n\n\n### 感想\n\nオフラインで味わえない体験があってよかった。（ゲーム開始のカウントダウンや、技を決めたときの拍手など）当選倍率が、どんなものだったのか気になるところだが一度オフラインを体験すると、開催期間の1日ぐらいは会場に行くのは良いなと思った。","src/content/blog/2023/0815.mdx","e418b2ca7d5f955f","2023/0815.mdx","2023/0903",{"id":2819,"data":2821,"body":2824,"filePath":2825,"digest":2826,"legacyId":2827,"deferredRender":2196},{"title":2822,"publishDate":2823},"[ネタバレ]君たちはどう生きるかを見た","2023-09-03","import LinkCard from '../../../components/LinkCard.astro';\n\n大きなネタバレを回避して、息子と一緒にやっと見てきたので感想メモ。\n\n\u003CLinkCard url=\"https://www.ghibli.jp/works/kimitachi/\" />\n\n個人的には、まあまあ良かった。終わった後に「これはシン・エヴァンゲリオン劇場版だな！」と思った。庵野監督は、シン・エヴァンゲリオンでエヴァという作品の呪縛から解き放たれたと思っているんだけど、宮崎駿もジブリ作品という呪縛から解放されたのかなと思った。\n\n作品に出てくる大叔父が多分宮崎駿なんだろうなと思った。次の世代に俺が作った世界を継いでほしい。でも主人公は自分の道を自分で決める的な。\n\n作中で、原作の「君たちはどう生きるか」を読むシーンがあるけどあの後で、主人公は既に自分の道を決めていたんだろうなと思う。僕も、吉野源三郎の原作は、2回ぐらいに学生時代に読んでコペルくんの悩み生きていく姿は知っている。今回の作品って原作の通りにはしないって宮崎駿は言っていたけど、設定とかは結構原作感があった。（戦時中とか主人公の感情）\n\n後半のファンタジー感は、他の作品に比べるとちょっと弱いかなと思った。細かい所まで考えると難しいけど大筋は、難解な感じはなく分かりやすかったと僕は思う。（5歳の息子もなんとなくは分かってた）わらわらが可愛かった。7人の小人ならぬ7人のお婆ちゃんも個人的にはすごい良かった。\n\n\n2回目観に行くはないけど米津玄師の「地球儀」が良すぎるので、それ目的でもう1回行くのはあり。\n\n\u003CLinkCard url=\"https://open.spotify.com/track/6x7SB38tuekpu4xpH9OIPY?utm_source=generator\" />","src/content/blog/2023/0903.mdx","bf54d773ed7e6ff2","2023/0903.mdx","2023/0818",{"id":2828,"data":2830,"body":2833,"filePath":2834,"digest":2835,"legacyId":2836,"deferredRender":2196},{"title":2831,"publishDate":2832},"メモ：Haskellで雑にAPIを実装する","2023-08-18","import LinkCard from '../../../components/LinkCard.astro';\n\nここ最近趣味でHaskellに触れていて、ある程度構文とか、思想は理解できた。しかしプロジェクトを作成する手順や、環境構築などの知見が一切なく、学びたくてChatGPTさんに少し頼りながら雑にAPIを作ってみた。\n\n### 成果物\n\n\u003CLinkCard url=\"https://github.com/ryokatsuse/example-image-effect-app\" />\n\n※フロントエンドはまだ未対応\n\n### Haskellの環境構築\n\n基本的には、mod_poppoさんの以下の記事を最初に読んである程度理解できた。\n\n\u003CLinkCard url=\"https://zenn.dev/mod_poppo/articles/haskell-setup-2023\" />\n\n\n今回は設定が楽ということもあり、[Stack](https://docs.haskellstack.org/en/stable/)を採用した。Stackは、コマンドが分かりやすくとりあえず打てば、いい感じにbuildしてくれたり、開発環境を立ち上げつつ、エラーとかも丁寧に教えてくれる。（Cabalの方も今後試したい）\n\nStackにはpackage.ymlがありここにdependenciesを記述できる。今回APIを作る時に、画像の情報をリクエストしたら、いい感じに圧縮してくれるAPIとかを実装したいなと思って、ChatGPTに聴いてみたら[JuicyPixels](https://hackage.haskell.org/package/JuicyPixels)というライブラリを紹介してくれたので、これを使うことにした。JuicyPixelsは、jpgや、pngなどの画像を読み込んで色々と変更できるライブラリだ。\n\n### そもそもAPIどう実装するか（servantの利用）\n\nググると[servant](https://github.com/haskell-servant)というAPIのフレームワークのようなものを使うと良さそうというのを発見して採用した。このservant本体と、servant-serverをStackのpackage.yml内のdependenciesに記載してインストールした。ちなみにこのservantは、他にも数々のライブラリを出していて、[servant-js](https://github.com/haskell-servant/servant-js)というservantで定義したAPIを、フロントエンドから利用するためのコードとして自動生成してくれるようで型安全だと思うしちょっと気になる。(aspidaみたいなノリ？)あとauth系の認証を扱うサブモジュールっぽいのもあった。\n\nAPI作成の知見もLaravelでしかないため良く分からなかった。ひとまずディレクトリ構成については、ChatGPTに聴いてみた。\n\n```\nhaskell-app/\n│\n├── stack.yaml\n├── haskell-app.cabal\n│\n├── src/\n│   ├── API.hs             -- APIの型定義\n│   ├── Server.hs          -- エンドポイントの実装\n│   ├── Compression.hs     -- 画像圧縮関連の関数 (オプション)\n│   └── ... (その他のモジュール)\n│\n├── app/\n│   └── Main.hs            -- サーバーの起動部分\n│\n└── test/\n    └── Spec.hs            -- テスト関連 (必要に応じて)\n```\n\nこんな構成を教えてもらいつつ公式ドキュメントとか参考のリポジトリなどをいくつかみるとまあ大きく間違っていなさそうなので、この構成で作った。（Spec.tsは作ってない）\n\nひとまずhelloとimageという2つのエンドポイントを定義するのは、以下のようにStack独自の```:\u003C|> ```という構文でつなぐということらしい\n\n```haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE TypeOperators #-}\n\nmodule API where\n\nimport Servant\nimport Data.ByteString (ByteString)\n\n-- なんかわからんがこういう書き方をしないとAPIを複数定義できないらしい :\u003C|> でつなぐ\ntype MyAPI = \"hello\" :> Get '[PlainText] String\n       :\u003C|> \"image\" :> ReqBody '[OctetStream] ByteString\n                    :> Post '[OctetStream] ByteString\n\nmyAPI :: Proxy MyAPI\nmyAPI = Proxy\n\n```\n\n### 圧縮しようと思ったけど\n\nJuicyPixelsのモジュールを見ていくとCodec.Picture的なもので、圧縮できそうだなと思い色々試したが、型が合わないとかエンコードがうまく行かないみたいなエラーが頻繁してちょっと諦めた。代わりにとりあえず画像を送ってそのまま返す実装をした。\n\n\nとりあえず以下のcurlで疎通確認。\n\n```\ncurl -X POST -H \"Content-Type: application/octet-stream\" --data-binary \"@/xxx/xxx/xxx/xxx.jpg\" http://localhost:8080/image > response.jpg\n\n```\n\nとりあえず返すだけなので当然成功する。このあと画像全体をグレースケールに変換してから返すように関数を作った。\n\n\n```haskell\n-- 画像を受け取ってグレースケールに変換して返すAPI\nimageHandler :: ByteString -> Handler ByteString\n\nimageHandler imgData =\n    case decodeImage imgData of\n        Left err -> throwError err500 { errorBody = fromStrict . B.pack $ \"Failed to decode image: \" ++  error }\n        Right dynamicImg -> return . toStrict . encodePng . imageToGrayScale $ dynamicImg\n\n-- 画像をグレースケールに変換する処理\nimageToGrayScale :: DynamicImage -> Image Pixel8\nimageToGrayScale img = pixelMap computeLuma (convertRGB8 img)\n  where\n    computeLuma (PixelRGB8 r g b) = round (fromIntegral r * 0.3 + fromIntegral g * 0.59 + fromIntegral b * 0.11)\n```\n\ncase式でパターンマッチングをして成功と失敗を絞り込んで記述した。case式は本当に便利で、JavaScriptでも書きたい。。（そういえばTC39のどっかのStageにあったような・・・）imageToGrayScale関数は8ビットのグレースケール画像を返すような関数です。RGBの取得の計算だけChatGPTを使いました。こういう時は本当に便利！！！\n\nこれで`stack run`を実行した状態で再度curlを叩くと画像全体がグレースケールされた状態で返ってきた。\n\n\u003Cblockquote class=\"twitter-tweet\">\u003Cp lang=\"ja\" dir=\"ltr\">ChatGPTさんの力を多少借りながら、Haskellのお勉強で画像をグレースケールにするAPIできた。 \u003Ca href=\"https://t.co/3rDMKNq6WN\">pic.twitter.com/3rDMKNq6WN\u003C/a>\u003C/p>&mdash; Ryo Katsuse (@ryo__kts) \u003Ca href=\"https://twitter.com/ryo__kts/status/1692242516626792676?ref_src=twsrc%5Etfw\">August 17, 2023\u003C/a>\u003C/blockquote> \u003Cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\">\u003C/script>\n\n\n### 感想\n\n色々学べて楽しかった！でもまだまだわかんないことだらけだからもう少し弄ってみようと思う。そもそもHaskellの構文は分かるけど、概念的なことでちょっと理解が及ばない箇所が目立つのでそのあたりは何かしらでお勉強したい。","src/content/blog/2023/0818.mdx","b6ca11c4df395782","2023/0818.mdx","2023/0820",{"id":2837,"data":2839,"body":2841,"filePath":2842,"digest":2843,"legacyId":2844,"deferredRender":2196},{"title":2840,"publishDate":2747},"メモ:proposal-pattern-matchingのプロポーザルを読んだ","import LinkCard from '../../../components/LinkCard.astro';\n\nOCmalやHaskellにはあるパターンマッチング構文が、JavaScriptにも提案があったのでプロポーザルを読んだ。あるのは知っていたけどちゃんとプロポーザル読んでなかったので備忘を残す。\n\n\u003CLinkCard url=\"https://github.com/tc39/proposal-pattern-matching\" />\n\n※2023年8月時点でステージ1なのでこれから大きく仕様が変更される可能性がある\n\n\n### 課題とモチベーション\n\nJSには、switchがあるが、フォールスルー（breakを忘れて次のcase文が実行されてしまう）スコープが曖昧などの問題があるので、もう少し人間の読みやすいように機能がほしいということで生まれた提案。switchで提供できない機能を導入したいということらしい。\n\n### サンプルコード\nいきなりコードをみた方が良いと思うので、プロポーザルにあるものをそのまま抜粋\n\n```js\nmatch (res) {\n  when ({ status: 200, body, ...rest }): handleData(body, rest)\n  when ({ status, destination: url }) if (300 \u003C= status && status \u003C 400):\n    handleRedirect(url)\n  when ({ status: 500 }) if (!this.hasRetried): do {\n    retry(req);\n    this.hasRetried = true;\n  }\n  default: throwSomething();\n}\n```\n\nmatch式をブロック全体に囲い```when()```でマッチさせたいものを書く。これはどんな式でもOK。when句では、左辺と右辺の間にコロンがあり左辺のマッチに成功したら右辺が評価されてmatch全体の値となってくれる。default句もある。\n\n### do式とのコンビネーション\n右辺に関しては、任意の式を入れることができるが複数のステートメントを入れることを想定しており、別の提案で[do式](https://github.com/tc39/proposal-do-expressions)がある。これが入ると以下のようなことが実現できる\n\n\n```js\nconst res = await fetch(jsonService)\nmatch (res) {\n  when ({ status: 200, headers: { 'Content-Length': s } }):\n    console.log(`size is ${s}`);\n  when ({ status: 404 }):\n    console.log('JSON not found');\n  when ({ status }) if (status >= 400): do {\n    throw new RequestError(res);\n  }\n};\n```\n\nそもそもこのdo式はめっちゃ欲しい機能の1つでReactのJSXで三項演算子によるコンポーネントの出し分けとか、```{if (props.isXXX) {\u003CisXXX /> else {\u003CXXX />}}}```みたいな書き方をしなくて良くなる。\n\n```jsx\nreturn (\n  \u003Cnav>\n    \u003CHome />\n    {\n      do {\n        if (loggedIn) {\n          \u003CLogoutButton />\n        } else {\n          \u003CLoginButton />\n        }\n      }\n    }\n  \u003C/nav>\n)\n```\n\nそして今回の、pattern-matchingをあわせるとこうなる（プロポーザルから抜粋）\n\n```jsx\n\u003CFetch url={API_URL}>\n  {props => match (props) {\n    when ({ loading }): \u003CLoading />\n    when ({ error }): do {\n      console.err(\"something bad happened\");\n      \u003CError error={error} />\n    }\n    when ({ data }): \u003CPage data={data} />\n  }}\n\u003C/Fetch>\n```\n\nこれはAPIのデータによってそれぞれコンポーネントを出し分けしている例だけど、結構いい感じ。ただAPIのフォールバックの書き方は、ReactだとSuspenseとかあるからそっちに方が、良いのかもしれない。\n\n### 備忘録\n\n- 先行技術として、[ts-pattern](https://github.com/gvergnaud/ts-pattern)がある。これはめちゃくちゃ良くて、おそらく使っている人も多いのではないか。あとDenoからも[optionals](https://github.com/OliverBrotchie/optionals)というやつがあって、Result型とかを簡単にimportできるっぽい。\n\n\n- 配列の長さは、どうやら暗黙的にチェックするらしい（そりゃそうか）配列のマッチ方法は、結構色々ある。詳しくは[ここ](https://github.com/tc39/proposal-pattern-matching#array-pattern)にある。反復可能な場合は、```[Symbol.iterator]```を使える。\n- 正規表現のパターンマッチは、結構使えそうな感じがしている。\n- 面白いものとして```(${})```という[書き方](https://github.com/tc39/proposal-pattern-matching#interpolation-pattern)がある。テンプレート文字列に似ているとうか分かりづらいけど、[カスタムマッチャー](https://github.com/tc39/proposal-pattern-matching#custom-matcher-protocol)```Symbol.matcher```というものがあり、名前付きのメソッドを持ったオブジェクトとして解決される場合は、メソッドを呼び出すことができ、それ以外は、プリミティブな値として解決していてパターンマッチングしてくれるみたい。コードを読むと何となくわかる\n\n```js\nclass MyClass = {\n  static [Symbol.matcher](matchable) {\n    return {\n      matched: matchable === 3,\n      value: { a: 1, b: { c: 2 } },\n    };\n  }\n};\n\nmatch (3) {\n  when (${MyClass}): true; // matches, doesn’t use the result\n  when (${MyClass} with {a, b: {c}}): do {\n    // passes the custom matcher,\n    // then further applies an object pattern to the result’s value\n    assert(a === 1);\n    assert(c === 2);\n  }\n}\n```\n\n- コンビネーターとして```or```と```and```がある。\n    - orは、入れ子になったパターンのどれかにマッチすれば成功\n    - andは、入れ子になったパターンのすべてにマッチすれば成功\n- 構文に優先順位がないため、同じ入れ子の中で```when (\"foo\" or \"bar\" and val)```みたいな書き方をするとエラーになる。\n    - ```when (\"foo\" or (\"bar\" and val))```という感じで書く必要がある\n- 将来的に機能として入れる可能性のあるものの中で、[チェーンガード](https://github.com/tc39/proposal-pattern-matching#chaining-guards)なるものがあった。これは結構欲しいかも\n\n\n### 感想\n- これが入るとJSのパラダイムシフトが起こりそうな機能ではある。書き方が結構変わりそう。\n- でも個人的にはめっちゃ使いたい。\n- 割りとこの機能を実装する側（各ブラウザ）は大変そうなイメージがあるので、いつになることやら。。。\n- ひとまずdoだけでもShipされてほしい","src/content/blog/2023/0820.mdx","47c3a8d214acbfbb","2023/0820.mdx","2023/1107",{"id":2845,"data":2847,"body":2850,"filePath":2851,"digest":2852,"rendered":2853,"legacyId":2860},{"title":2848,"publishDate":2849},"最近の習慣化","2023-11-07","ここ最近習慣化が定着してきたものと、これから定着しそうなものを整理した。\n\n- 数学\n  - 2ヶ月ぐらい続いている。\n  - 1日最低30分。\n  - やらない日もあるが、中3日空けることはない。\n  - 時間が空いている、ノッている時は2-3時間ぐらい。\n  - 基本的に[標準問題精講シリーズ](https://www.obunsha.co.jp/product/series/c001)を少しずつ進めている。やっと整数が終わって最近は確率を勉強している。\n  - 問題と解答見てもわからない場合は、Youtubeとかで分かりやすいものを探して視聴する。\n  - 数学的思考能力が全然ないので別途学んだ方が良さそうだと感じている。\n\n- Haskell\n  - 4ヶ月ぐらい前から始めた。\n  - 週3は継続して書いていそう。\n  - JavaScript以外の言語で、こんなに真面目に取り組んでいるの初めてかもしれない。\n  - きっかけは、数学を学ぶ過程でプログラムを書きたかったから。\n  - 最初は[すごいH本](https://www.ohmsha.co.jp/book/9784274068850/)を読んだりしていたが、途中から[入門Haskellプログラミング](https://www.shoeisha.co.jp/book/detail/9784798161280)に切り替えた。\n  - 今はAtCoderの非常に優しい問題を、Haskellで挑戦している。\n  - 違う言語を趣味で書くと何だかとても気分が良いので続けている。\n  - 多分数学初心者なので、集合とかその辺勉強しないとモノイドとか理解できなそうって感じ。\n\n- ジムで筋トレ\n  - 最近始めたばっかり。\n  - 週3日通っている。\n  - 夜息子の寝かしつけが終わって、1時間半ぐらい。\n  - 健康維持のために始めたが筋肉凄い人とか見ると「いいなー」と感じるので、モチベが上がる。\n  - 家で筋トレしていた時より明らかに負荷を掛けて筋トレできている。\n\n- 油っぽい食事をなるべく控える\n  - 2ヶ月前から。\n  - 筋トレ効果だろうか。。\n  - 普段からジャンクフードが好きだけど明らかに食べる量が減った。\n  - 理由は食べない方が、明らかに体調が良いから\n  - ラーメンとか揚げ物も週に何度も食べていたが、今は週1ぐらい\n  - アルコールの量も減らしていきたい。\n\n- 寝る前にアルバムを1枚通しで聴く\n  - 1ヶ月前から。\n  - 作業中にBGMで聴くことはあるけど、音楽へのリスペクトを忘れていないか？と自問自答した。\n  - ほぼ毎日寝る前に、過去に聴いていたものから新しいものまで通しで最後まで聴くようにした。\n  - 聴いたら適当に感想を音声入力 or 3行テキストで書いて寝るようにしている。\n\n- 午前中はスタンディングで仕事をする\n  - 半年続いている。\n  - 仕事の時はほぼ毎日。\n  - 午後も足がダルくなってきたらスタンディングすることもある。\n  - 姿勢が良くなった気がする。\n\n- 詰将棋\n  - 最近やり始めた。\n  - しかし本当に、時間の空いている時とかに10分とかやる程度なので忘れているとやらないこともある。\n  - 習慣化するには常に詰将棋できるような状態が必要そう。\n\n元々自分は三日坊主だったが、何か生活自体をガラッと変えたいと感じて今まで全然やっていないことをあえて習慣化した。どこまで続くは不明だけど皆さんの習慣化も教えてください。","src/content/blog/2023/1107.md","2b6c3827750d29a1",{"html":2854,"metadata":2855},"\u003Cp>ここ最近習慣化が定着してきたものと、これから定着しそうなものを整理した。\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>数学\u003C/p>\n\u003Cul>\n\u003Cli>2ヶ月ぐらい続いている。\u003C/li>\n\u003Cli>1日最低30分。\u003C/li>\n\u003Cli>やらない日もあるが、中3日空けることはない。\u003C/li>\n\u003Cli>時間が空いている、ノッている時は2-3時間ぐらい。\u003C/li>\n\u003Cli>基本的に\u003Ca href=\"https://www.obunsha.co.jp/product/series/c001\">標準問題精講シリーズ\u003C/a>を少しずつ進めている。やっと整数が終わって最近は確率を勉強している。\u003C/li>\n\u003Cli>問題と解答見てもわからない場合は、Youtubeとかで分かりやすいものを探して視聴する。\u003C/li>\n\u003Cli>数学的思考能力が全然ないので別途学んだ方が良さそうだと感じている。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>Haskell\u003C/p>\n\u003Cul>\n\u003Cli>4ヶ月ぐらい前から始めた。\u003C/li>\n\u003Cli>週3は継続して書いていそう。\u003C/li>\n\u003Cli>JavaScript以外の言語で、こんなに真面目に取り組んでいるの初めてかもしれない。\u003C/li>\n\u003Cli>きっかけは、数学を学ぶ過程でプログラムを書きたかったから。\u003C/li>\n\u003Cli>最初は\u003Ca href=\"https://www.ohmsha.co.jp/book/9784274068850/\">すごいH本\u003C/a>を読んだりしていたが、途中から\u003Ca href=\"https://www.shoeisha.co.jp/book/detail/9784798161280\">入門Haskellプログラミング\u003C/a>に切り替えた。\u003C/li>\n\u003Cli>今はAtCoderの非常に優しい問題を、Haskellで挑戦している。\u003C/li>\n\u003Cli>違う言語を趣味で書くと何だかとても気分が良いので続けている。\u003C/li>\n\u003Cli>多分数学初心者なので、集合とかその辺勉強しないとモノイドとか理解できなそうって感じ。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>ジムで筋トレ\u003C/p>\n\u003Cul>\n\u003Cli>最近始めたばっかり。\u003C/li>\n\u003Cli>週3日通っている。\u003C/li>\n\u003Cli>夜息子の寝かしつけが終わって、1時間半ぐらい。\u003C/li>\n\u003Cli>健康維持のために始めたが筋肉凄い人とか見ると「いいなー」と感じるので、モチベが上がる。\u003C/li>\n\u003Cli>家で筋トレしていた時より明らかに負荷を掛けて筋トレできている。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>油っぽい食事をなるべく控える\u003C/p>\n\u003Cul>\n\u003Cli>2ヶ月前から。\u003C/li>\n\u003Cli>筋トレ効果だろうか。。\u003C/li>\n\u003Cli>普段からジャンクフードが好きだけど明らかに食べる量が減った。\u003C/li>\n\u003Cli>理由は食べない方が、明らかに体調が良いから\u003C/li>\n\u003Cli>ラーメンとか揚げ物も週に何度も食べていたが、今は週1ぐらい\u003C/li>\n\u003Cli>アルコールの量も減らしていきたい。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>寝る前にアルバムを1枚通しで聴く\u003C/p>\n\u003Cul>\n\u003Cli>1ヶ月前から。\u003C/li>\n\u003Cli>作業中にBGMで聴くことはあるけど、音楽へのリスペクトを忘れていないか？と自問自答した。\u003C/li>\n\u003Cli>ほぼ毎日寝る前に、過去に聴いていたものから新しいものまで通しで最後まで聴くようにした。\u003C/li>\n\u003Cli>聴いたら適当に感想を音声入力 or 3行テキストで書いて寝るようにしている。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>午前中はスタンディングで仕事をする\u003C/p>\n\u003Cul>\n\u003Cli>半年続いている。\u003C/li>\n\u003Cli>仕事の時はほぼ毎日。\u003C/li>\n\u003Cli>午後も足がダルくなってきたらスタンディングすることもある。\u003C/li>\n\u003Cli>姿勢が良くなった気がする。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>詰将棋\u003C/p>\n\u003Cul>\n\u003Cli>最近やり始めた。\u003C/li>\n\u003Cli>しかし本当に、時間の空いている時とかに10分とかやる程度なので忘れているとやらないこともある。\u003C/li>\n\u003Cli>習慣化するには常に詰将棋できるような状態が必要そう。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>元々自分は三日坊主だったが、何か生活自体をガラッと変えたいと感じて今まで全然やっていないことをあえて習慣化した。どこまで続くは不明だけど皆さんの習慣化も教えてください。\u003C/p>",{"headings":2856,"localImagePaths":2857,"remoteImagePaths":2858,"frontmatter":2847,"imagePaths":2859},[],[],[],[],"2023/1107.md","2023/0919",{"id":2861,"data":2863,"body":2866,"filePath":2867,"digest":2868,"rendered":2869,"legacyId":2891},{"title":2864,"publishDate":2865},"論文を読む(Exposing and Addressing Security Vulnerabilities in Browser Text Input Fields)","2023-09-19","社会人大学生しているのに、論文とか読んでいないなーと思い手始めに何か読んでみようと思って読んだ。\n\n### 論文の探し方\nまず論文をどうやって探すかということで調べてみると色々なサイトがあったが、今回は[arXiv](https://arxiv.org/)を利用した。コンピュータサイエンス系の論文が多くタイトルだけみても面白い。徐ろに検索バーに「HTML」という単語を入れて検索結果を眺めてたら[Exposing and Addressing Security Vulnerabilities in Browser Text Input Fields](https://arxiv.org/abs/2308.16321)というのに目が止まり今回はこの論文を読むことにした。\n\n### 論文の読み方\n\n自分は英語のスキルがほとんどないので、DeepLさまの力をお借りした。DeepLのアプリでpdfをそのまま翻訳させて日本語になったpdfをiPadで読んだ。（無料版だと文字数制限があるので有料版で）\n※もしかすると翻訳が違っていることもあり解釈が間違っているかもだけど。。\n\n### TL;DR\n- 拡張機能はページのコンテンツを操作できちゃう\n- inputタグはセキュアではない！\n- WeakMapすごい\n\n### 拡張機能の怖さ\nこの論文は、ブラウザの拡張機能で、ページのコンテンツを改ざんできてしまい危険だよというのを提唱している論文だった。実際の計測と提案までが書かれたものになっている。論文は最初に内容を全部読まない人のためのTL;DR的なものが書かれていることが多いようなので、ここだけ読むだけでも良さそうだなとは思った。続きが気になればそのまま読むし、微妙であれば読むのをやめることもできる。\n\n実際に、拡張機能からJavaScriptを実行して社会保険番号やクレジットカード番号、パスワードなどを取得できてしまうというもので、これらの取得は、HTMLのinputタイプに限定して話が進む。\n\n拡張機能の審査についても書かれており、実際に審査を通過した拡張機能は、その後特に監視されることもなくそのまま使われることが多いというのも書かれていた。（まあそれはそうか。。そこまでチェックできないよね）\n\n拡張機能のパーミッション設定などがあることは、恥ずかしながら知らずこのあたりは知見になった。（ホストパーミッションと、APIパーミッションがありそれぞれ設定するもの）しかもこのパーミッション設定は、粒度が粗いらしく、ここで分かることとして***拡張機能とHTML要素の間にセキュリティの境界がない***ことを意味しているとのことだった。\n\n以前まではManifest V2とルールでやっていたが、これは抜け穴が多くeval()の実行などもできてしまったとのことで現状は、Manifest V3になりセキュリティ的に大きな変更点があり（webRequest APIの廃止など）eval()などは実行できなくなった。しかしスクリプトの操作自体の変更はされておらず引き続き***拡張機能とHTML要素の間にセキュリティの境界がない***ことになっている（SafariとFirefoxに関してはまだV2とのこと）\n\nこれも何となく知っていたけど、明確には知らなかったこととして拡張機能がロードされるとDOMツリーに統合され、DOM APIを介してすべてのDOMにアクセスできてしまうとのことだった。（```document.querySelector```などで）これは開発しているとたまに「拡張機能が悪さをして変な挙動になる」ことがあるけどまさにこれのことだった。\n\n実際に悪意のある拡張機能がどのようにコンテンツを抽出するかのサンプルコードが乗っていた\n\n（P23. Exposing and Addressing Security Vulnerabilities in Browser Text Input Fields）\n```js\nfetch('server_url') // Retrieve CSS selector\n  .then(response => response.text()) .then(data => {\n  var els = document.querySelectorAll(data); // Select the target element for (let el of els) {\n  var outerHTML = el.outerHTML\n  var typeA = checkForTypeA(outerHTML); // Determine if Type-A if (typeA){\n  el.addEventListener(text, sourceExtractionScript) }\n    else{\n      el.addEventListener(text, valueExtractionScript)\n      }\n    }\n  }\n);\n```\nこの攻撃で、ユーザーが認証情報などを入力するのを待ってログインボタンなどをクリックしたときにHTMLをキャプチャしてouterHTMLでHTMLのソースをコピーし正規表現などを使用してパスワードタイプの入力フォームだけを更にキャプチャしてサーバーに送信するといった例です。CSSセレクタ（```input['type=password']```など）を特定すれば簡単にJavaScriptで.valueなんかで取得できてしまう。。。\n\n\n\n\n### 計測\n実際の計測は論文中の図を見るのが分かりやすいが、Seleniumとクローラーを使ってinput=passwordに限定していくつかのWEBサイトで一意のユーザー名やパスワードを自動入力させてキャプチャするということをしている。\n\n> 上位10,000ドメインのうち、8,410ウェブサイトのログインページを特定 した。このうち、7,140のウェブサイトでパスワードフィールドを発見した。\n(P.30 Exposing and Addressing Security Vulnerabilities in Browser Text Input Fields)\n\nとのことでこれらのサイトすべてからパスワードを抽出できたとという結果だった。\n\n拡張機能側でも脆弱性のあるものがどれだけあるかを計測して12.5% (17.3K) の拡張機能が、すべてのウェブページの機密情報を抽出するのに必要な許可を持っていることが分かったとのことだった。（これも論文に図があるので参照すると良い）\n\nここから分かることとして、やはり仮説というか現状セキュリティ的に危ないことが分かった。他にも色々書かれているが詳細は省く。\n\n### 対応策・提案\n\n仮説の通り境界がないことが分かったので機密性の高いinputのソリューションを提案している。それはHTMLInputElementに新しい```SecureInput```というものだ。詳しいソースコードは[osf.io](https://osf.io/4tk3u?view_only=c496010851314a3299c9e816804aac52)に公開されていた。\n\nこのコードを読んでまず気になるのは、WeakMapを利用して入力された値をマスクされた文字列として保存している点で、これだけでほとんどの機密情報へのアクセスが失敗することになるということだった。攻撃者が仮に他の入力フォームに切り替えをした場合にユーザーに警告を発することで保護することができるということだった。\n\nWeakMapは、弱い参照という理解しかなく、ほとんどお目にかかることがなかったがこういう使い方があるのかと学びになった。\n\nコード上にもあくまでデモとはなっているのでもちろん本番では使えないが、いいアイデアだなとは思った。\n\n### 最後に\n\nかなり詳細を省いているが、論文自体はもっと詳しく書いているので読んでみると面白い。この論文自体はコードも含めて2時間ぐらいで読んだのでこれぐらいの量であれば、週一とかで読んで見るのはありだなと思った。\nブログを適当に読むのもいいが、こういうのもたまには良いというということでこれからも読みたいと思う。論文探しは意外と大変な気もしているので、その辺はうまく探せる方法を模索していきたい。\n\n今回読んだ論文\nhttps://arxiv.org/abs/2308.16321","src/content/blog/2023/0919.md","66f49836b842b0f0",{"html":2870,"metadata":2871},"\u003Cp>社会人大学生しているのに、論文とか読んでいないなーと思い手始めに何か読んでみようと思って読んだ。\u003C/p>\n\u003Ch3 id=\"論文の探し方\">論文の探し方\u003C/h3>\n\u003Cp>まず論文をどうやって探すかということで調べてみると色々なサイトがあったが、今回は\u003Ca href=\"https://arxiv.org/\">arXiv\u003C/a>を利用した。コンピュータサイエンス系の論文が多くタイトルだけみても面白い。徐ろに検索バーに「HTML」という単語を入れて検索結果を眺めてたら\u003Ca href=\"https://arxiv.org/abs/2308.16321\">Exposing and Addressing Security Vulnerabilities in Browser Text Input Fields\u003C/a>というのに目が止まり今回はこの論文を読むことにした。\u003C/p>\n\u003Ch3 id=\"論文の読み方\">論文の読み方\u003C/h3>\n\u003Cp>自分は英語のスキルがほとんどないので、DeepLさまの力をお借りした。DeepLのアプリでpdfをそのまま翻訳させて日本語になったpdfをiPadで読んだ。（無料版だと文字数制限があるので有料版で）\n※もしかすると翻訳が違っていることもあり解釈が間違っているかもだけど。。\u003C/p>\n\u003Ch3 id=\"tldr\">TL;DR\u003C/h3>\n\u003Cul>\n\u003Cli>拡張機能はページのコンテンツを操作できちゃう\u003C/li>\n\u003Cli>inputタグはセキュアではない！\u003C/li>\n\u003Cli>WeakMapすごい\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"拡張機能の怖さ\">拡張機能の怖さ\u003C/h3>\n\u003Cp>この論文は、ブラウザの拡張機能で、ページのコンテンツを改ざんできてしまい危険だよというのを提唱している論文だった。実際の計測と提案までが書かれたものになっている。論文は最初に内容を全部読まない人のためのTL;DR的なものが書かれていることが多いようなので、ここだけ読むだけでも良さそうだなとは思った。続きが気になればそのまま読むし、微妙であれば読むのをやめることもできる。\u003C/p>\n\u003Cp>実際に、拡張機能からJavaScriptを実行して社会保険番号やクレジットカード番号、パスワードなどを取得できてしまうというもので、これらの取得は、HTMLのinputタイプに限定して話が進む。\u003C/p>\n\u003Cp>拡張機能の審査についても書かれており、実際に審査を通過した拡張機能は、その後特に監視されることもなくそのまま使われることが多いというのも書かれていた。（まあそれはそうか。。そこまでチェックできないよね）\u003C/p>\n\u003Cp>拡張機能のパーミッション設定などがあることは、恥ずかしながら知らずこのあたりは知見になった。（ホストパーミッションと、APIパーミッションがありそれぞれ設定するもの）しかもこのパーミッション設定は、粒度が粗いらしく、ここで分かることとして\u003Cem>\u003Cstrong>拡張機能とHTML要素の間にセキュリティの境界がない\u003C/strong>\u003C/em>ことを意味しているとのことだった。\u003C/p>\n\u003Cp>以前まではManifest V2とルールでやっていたが、これは抜け穴が多くeval()の実行などもできてしまったとのことで現状は、Manifest V3になりセキュリティ的に大きな変更点があり（webRequest APIの廃止など）eval()などは実行できなくなった。しかしスクリプトの操作自体の変更はされておらず引き続き\u003Cem>\u003Cstrong>拡張機能とHTML要素の間にセキュリティの境界がない\u003C/strong>\u003C/em>ことになっている（SafariとFirefoxに関してはまだV2とのこと）\u003C/p>\n\u003Cp>これも何となく知っていたけど、明確には知らなかったこととして拡張機能がロードされるとDOMツリーに統合され、DOM APIを介してすべてのDOMにアクセスできてしまうとのことだった。（\u003Ccode>document.querySelector\u003C/code>などで）これは開発しているとたまに「拡張機能が悪さをして変な挙動になる」ことがあるけどまさにこれのことだった。\u003C/p>\n\u003Cp>実際に悪意のある拡張機能がどのようにコンテンツを抽出するかのサンプルコードが乗っていた\u003C/p>\n\u003Cp>（P23. Exposing and Addressing Security Vulnerabilities in Browser Text Input Fields）\u003C/p>\n\u003Cpre class=\"language-js\" data-language=\"js\">\u003Ccode is:raw=\"\" class=\"language-js\">\u003Cspan class=\"token function\">fetch\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'server_url'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// Retrieve CSS selector\u003C/span>\n  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">then\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">response\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> response\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">text\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">then\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">data\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n  \u003Cspan class=\"token keyword\">var\u003C/span> els \u003Cspan class=\"token operator\">=\u003C/span> document\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">querySelectorAll\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// Select the target element for (let el of els) {\u003C/span>\n  \u003Cspan class=\"token keyword\">var\u003C/span> outerHTML \u003Cspan class=\"token operator\">=\u003C/span> el\u003Cspan class=\"token punctuation\">.\u003C/span>outerHTML\n  \u003Cspan class=\"token keyword\">var\u003C/span> typeA \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">checkForTypeA\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>outerHTML\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// Determine if Type-A if (typeA){\u003C/span>\n  el\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">addEventListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>text\u003Cspan class=\"token punctuation\">,\u003C/span> sourceExtractionScript\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token keyword\">else\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n      el\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">addEventListener\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>text\u003Cspan class=\"token punctuation\">,\u003C/span> valueExtractionScript\u003Cspan class=\"token punctuation\">)\u003C/span>\n      \u003Cspan class=\"token punctuation\">}\u003C/span>\n    \u003Cspan class=\"token punctuation\">}\u003C/span>\n  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/code>\u003C/pre>\n\u003Cp>この攻撃で、ユーザーが認証情報などを入力するのを待ってログインボタンなどをクリックしたときにHTMLをキャプチャしてouterHTMLでHTMLのソースをコピーし正規表現などを使用してパスワードタイプの入力フォームだけを更にキャプチャしてサーバーに送信するといった例です。CSSセレクタ（\u003Ccode>input['type=password']\u003C/code>など）を特定すれば簡単にJavaScriptで.valueなんかで取得できてしまう。。。\u003C/p>\n\u003Ch3 id=\"計測\">計測\u003C/h3>\n\u003Cp>実際の計測は論文中の図を見るのが分かりやすいが、Seleniumとクローラーを使ってinput=passwordに限定していくつかのWEBサイトで一意のユーザー名やパスワードを自動入力させてキャプチャするということをしている。\u003C/p>\n\u003Cblockquote>\n\u003Cp>上位10,000ドメインのうち、8,410ウェブサイトのログインページを特定 した。このうち、7,140のウェブサイトでパスワードフィールドを発見した。\n(P.30 Exposing and Addressing Security Vulnerabilities in Browser Text Input Fields)\u003C/p>\n\u003C/blockquote>\n\u003Cp>とのことでこれらのサイトすべてからパスワードを抽出できたとという結果だった。\u003C/p>\n\u003Cp>拡張機能側でも脆弱性のあるものがどれだけあるかを計測して12.5% (17.3K) の拡張機能が、すべてのウェブページの機密情報を抽出するのに必要な許可を持っていることが分かったとのことだった。（これも論文に図があるので参照すると良い）\u003C/p>\n\u003Cp>ここから分かることとして、やはり仮説というか現状セキュリティ的に危ないことが分かった。他にも色々書かれているが詳細は省く。\u003C/p>\n\u003Ch3 id=\"対応策提案\">対応策・提案\u003C/h3>\n\u003Cp>仮説の通り境界がないことが分かったので機密性の高いinputのソリューションを提案している。それはHTMLInputElementに新しい\u003Ccode>SecureInput\u003C/code>というものだ。詳しいソースコードは\u003Ca href=\"https://osf.io/4tk3u?view_only=c496010851314a3299c9e816804aac52\">osf.io\u003C/a>に公開されていた。\u003C/p>\n\u003Cp>このコードを読んでまず気になるのは、WeakMapを利用して入力された値をマスクされた文字列として保存している点で、これだけでほとんどの機密情報へのアクセスが失敗することになるということだった。攻撃者が仮に他の入力フォームに切り替えをした場合にユーザーに警告を発することで保護することができるということだった。\u003C/p>\n\u003Cp>WeakMapは、弱い参照という理解しかなく、ほとんどお目にかかることがなかったがこういう使い方があるのかと学びになった。\u003C/p>\n\u003Cp>コード上にもあくまでデモとはなっているのでもちろん本番では使えないが、いいアイデアだなとは思った。\u003C/p>\n\u003Ch3 id=\"最後に\">最後に\u003C/h3>\n\u003Cp>かなり詳細を省いているが、論文自体はもっと詳しく書いているので読んでみると面白い。この論文自体はコードも含めて2時間ぐらいで読んだのでこれぐらいの量であれば、週一とかで読んで見るのはありだなと思った。\nブログを適当に読むのもいいが、こういうのもたまには良いというということでこれからも読みたいと思う。論文探しは意外と大変な気もしているので、その辺はうまく探せる方法を模索していきたい。\u003C/p>\n\u003Cp>今回読んだ論文\n\u003Ca href=\"https://arxiv.org/abs/2308.16321\">https://arxiv.org/abs/2308.16321\u003C/a>\u003C/p>",{"headings":2872,"localImagePaths":2888,"remoteImagePaths":2889,"frontmatter":2863,"imagePaths":2890},[2873,2875,2877,2880,2882,2884,2887],{"depth":29,"slug":2874,"text":2874},"論文の探し方",{"depth":29,"slug":2876,"text":2876},"論文の読み方",{"depth":29,"slug":2878,"text":2879},"tldr","TL;DR",{"depth":29,"slug":2881,"text":2881},"拡張機能の怖さ",{"depth":29,"slug":2883,"text":2883},"計測",{"depth":29,"slug":2885,"text":2886},"対応策提案","対応策・提案",{"depth":29,"slug":1220,"text":1220},[],[],[],"2023/0919.md","2023/1113",{"id":2892,"data":2894,"body":2897,"filePath":2898,"digest":2899,"legacyId":2900,"deferredRender":2196},{"title":2895,"publishDate":2896},"より良い世界のためのデザインを読んだ","2023-11-13","import LinkCard from '../../../components/LinkCard.astro';\n\n\u003CLinkCard url=\"https://www.shin-yo-sha.co.jp/book/b634104.html\" />\n\n[誰のためのデザイン？](https://www.shin-yo-sha.co.jp/book/b455574.html)であまりにも有名な著者ノーマン先生の新作が出たということで読んだ。\n\n結論から書くと、個人的にはまずまずの内容だった。抽象的な話が多くメッセージ性はあってそこは良かったけど、中身は割と「そうだよね」って言う内容が多い印象だった。\n\n- 人間中心設計から人間性中心デザインに変えていこう\n- 地球規模でデザインを考えよう\n\nというのがざっくりメッセージではあるのだが、多分日々生活している中で、みんなが薄々気づいているよねという内容が多かった。\n\n例えば企業がサービスを提供する際に、耐用年数の短いものを意図的に製造してすぐに破棄できるようになっている。そうしないと企業が儲からない、ビジネスが回らないという話がある。これは環境に良くないと認識しながら行っている行為で良くないので、自動車だったらカーシェアのようなサービスでデザインの考え方を変えているなどがある。他のサービスも同様に考えないといけないと主張していた。その通りとは思う。\n\nエンジニアに近い話として、生産性の話がありコード量が一行でも多いとアウトプット力が高いとされがちだが、実はそれは生産性が良いということにはならないと書かれていた。これが成り立つと、コードの量が多くなればエラーが増える→デバッガーの仕事が増える→デバッガーの検証量（アウトプット量）が増える→評価されるという構図になってしまう。よく「量より質が大事」と言うがまさしくその通りの内容が書かれていた。そして評価というのは、曖昧なものを数値化して測定するケースが多いとノーマンは言っている。\n\n> 一度数値化してしまうと、文脈を失うことがあり意味を失ってしまうことになる\n\nこの言葉は常に頭に入れておいた方が良いと改めて感じた。GDP（国内総生産）の例も同時に書いてあったが、まさに経済状態をたった一つの良くわからないものを数値化して隠蔽して隠しているのだ。\n\nノーマン先生はダッシュボードで細かい数値を可視化することが重要と言っているが、***人類は楽するあまりにもたくさんな色々な複雑性を変数や数値にして隠蔽しているからちゃんと可視化しろ***いうのを言いたいんじゃないのかなと思った。\n\nデザイナーは様々なコミュニティに支援、手助けする助言者になる必要がありデザインを民主化することが必要があると書かれていた。そのためにはアクセスのしやすさが必要と書かれていてその通りと思いながら設計したり実際に、対応していくとなると色々と考えることが、多くて難しいなとも感じた。エンジニアのアジャイル開発の手法を例に同じような方法をデザイナーもやっていくと良いとも書かれていうのは良かった。書籍では「斬新的モジュラーデザイン」という言葉で書かれていたが、小さくインプットとアウトプットを作っていくことが大事なのはエンジニアと変わらない。\n\n学校教育についても触れていて、もう年齢ごとに学ぶという概念は辞めて、学びたい人が学べる環境を作ることが大事とか個別ではなくチームワークの大事さを学べるようにすべきということも書いてあった。以前からそういう意見は聴いたことはあるが、いよいよ思考を変える時が来たのかもしれないなと思った。","src/content/blog/2023/1113.mdx","d96fe317b11d323d","2023/1113.mdx","2023/1230",{"id":2901,"data":2903,"body":2906,"filePath":2907,"digest":2908,"rendered":2909,"legacyId":2929},{"title":2904,"publishDate":2905},"2023年振り返り","2023-12-30","2023年を雑に振り返る\n\n## 仕事\n\n正直言うと充実したとは言い難い。新しいことに全然チャレンジできていない年だった。内容としてはフロントエンドが中心なのは変わらないのだが、1年通して3つほどプロジェクトを経験し、すべてVue.js（2系）だったこと、Vuetifyのトンデモ仕様に詰まりながらVue3にアップデートしたり、逆にアップデートしないでVuetifyのコンポーネントを改修したりしていた。ReactとかNext.jsのことを忘れてしまった代わりにVue3に詳しくなったけど、Vuetifyもついでに詳しくなってしまった。。。特にVueに関してネガティブな気持ちはないんだけどマンネリ化してきた感はかなりある。\n\nメインの仕事で成長することが出来ないと考え、違うことを空いた時間で取り組むことになっていった。プリセールスだったり、ちょっとPdMのような動きを試したり。来年はガラッと職位を変えることも視野に行動していく。\n\n合わせてフロントエンドの技術を全然キャッチアップしていない年でもあった。興味が薄れたとかではないが、思考が変わったのかもしれない。\n\n## 数学、Haskell\n\n去年から大学で情報系を学んで圧倒的に数学が出来ないことに絶望したので、今年はとにかく数学の苦手意識を克服するために、ほぼ毎日問題を解いた。[標準問題精講シリーズ](https://www.obunsha.co.jp/product/series/c001)を解きつつ、Youtubeだったり、ネットのわかりやすい解説などで補完しながら、苦手意識はなくなったと思う。むしろ今は楽しい気持ちの方が強い。\n\nどうせならプログラミングに活かしたいということで同時にHaskellにも手を出してみたのも今年から。今までJavaScriptしか書いてこなかった人間からするとかなりとっつきにくい感じだったが、今ではようやく実現したいことを考えて書けるようにはなってきている気がする。[入門Haskellプログラミング](https://www.shoeisha.co.jp/book/detail/9784798161280)がかなり良かった。業務に活かせているかというとそこまで活かせていないが、関数の考えや圏論だったり、証明や記号論理学は普段の生活で意識するようになったかも。文章を論理的に読むというか矛盾がないかみたいなことに目を向けるようになったかも。\n\n来年も引き続き数学は取り組んでいきたいし、Haskellで競技プログラミングもしてみたい。\n\n## 大学\n去年よりは科目数を大幅に減らした。数学と哲学の授業を主に取り組んでいる。元々学位とかはいらないので無理なく学べる範囲で引き続きやっていきたい。特に来年は哲学をメインに受講していき数学を引き続きやっていきスタイルで取り組む。\n\n## 健康\n\n年始に腹筋ローラーによる筋トレから始まり、今ではジムに行くようになった。（最近は少しペースが落ちている）今まで散歩しか身体を動かすことをしなかったけど、集中して身体を動かすいうよりかはリフレッシュ目的で歩く感じだったので、しっかり身体を動かすことの良さに気づいてしまい継続している。筋トレをした日は睡眠の質が良いので継続していきたい。\n\n体調面、精神面では大きく崩れたことはなかったが、仕事に対してのエンゲージメントというかモチベーションの乱高下はあったように思う。そうなる前やそうなった時にサウナに行ったり、筋トレしたりしてなんとか回復したこともあった。\n\n## 趣味や家族、普段の生活\n\nゲーム全然していないなーと言いつつゼルダ、FF16、AC6はしっかりクリアまでやっていた。。ただそれ以外はほとんどやっていないかも。趣味の時間を数学の時間に充てていた。ゲーム以外のコンテンツも全然消費していない。\n\n睡眠時間は相変わらず短い傾向にある。そりゃ子供もいれば自分の時間を削って色々やっていくしかないんだけど、あまりネガティブな感情ではない。息子の成長が楽しいし、一緒に遊べることが増えたりして楽しい。ただもう少し家族との時間を増やして余裕がほしいなとは感じるので来年の課題ではある。\n\n## 総括\n\n仕事の充実のなさにかなり引っ張られた2023年だったかも。来年の目標はもう決めてあるのでもう少し自分にわがままになって自分で充実さを勝ち取りにいくように行動したい。","src/content/blog/2023/1230.md","d3138d087a6a7d9a",{"html":2910,"metadata":2911},"\u003Cp>2023年を雑に振り返る\u003C/p>\n\u003Ch2 id=\"仕事\">仕事\u003C/h2>\n\u003Cp>正直言うと充実したとは言い難い。新しいことに全然チャレンジできていない年だった。内容としてはフロントエンドが中心なのは変わらないのだが、1年通して3つほどプロジェクトを経験し、すべてVue.js（2系）だったこと、Vuetifyのトンデモ仕様に詰まりながらVue3にアップデートしたり、逆にアップデートしないでVuetifyのコンポーネントを改修したりしていた。ReactとかNext.jsのことを忘れてしまった代わりにVue3に詳しくなったけど、Vuetifyもついでに詳しくなってしまった。。。特にVueに関してネガティブな気持ちはないんだけどマンネリ化してきた感はかなりある。\u003C/p>\n\u003Cp>メインの仕事で成長することが出来ないと考え、違うことを空いた時間で取り組むことになっていった。プリセールスだったり、ちょっとPdMのような動きを試したり。来年はガラッと職位を変えることも視野に行動していく。\u003C/p>\n\u003Cp>合わせてフロントエンドの技術を全然キャッチアップしていない年でもあった。興味が薄れたとかではないが、思考が変わったのかもしれない。\u003C/p>\n\u003Ch2 id=\"数学haskell\">数学、Haskell\u003C/h2>\n\u003Cp>去年から大学で情報系を学んで圧倒的に数学が出来ないことに絶望したので、今年はとにかく数学の苦手意識を克服するために、ほぼ毎日問題を解いた。\u003Ca href=\"https://www.obunsha.co.jp/product/series/c001\">標準問題精講シリーズ\u003C/a>を解きつつ、Youtubeだったり、ネットのわかりやすい解説などで補完しながら、苦手意識はなくなったと思う。むしろ今は楽しい気持ちの方が強い。\u003C/p>\n\u003Cp>どうせならプログラミングに活かしたいということで同時にHaskellにも手を出してみたのも今年から。今までJavaScriptしか書いてこなかった人間からするとかなりとっつきにくい感じだったが、今ではようやく実現したいことを考えて書けるようにはなってきている気がする。\u003Ca href=\"https://www.shoeisha.co.jp/book/detail/9784798161280\">入門Haskellプログラミング\u003C/a>がかなり良かった。業務に活かせているかというとそこまで活かせていないが、関数の考えや圏論だったり、証明や記号論理学は普段の生活で意識するようになったかも。文章を論理的に読むというか矛盾がないかみたいなことに目を向けるようになったかも。\u003C/p>\n\u003Cp>来年も引き続き数学は取り組んでいきたいし、Haskellで競技プログラミングもしてみたい。\u003C/p>\n\u003Ch2 id=\"大学\">大学\u003C/h2>\n\u003Cp>去年よりは科目数を大幅に減らした。数学と哲学の授業を主に取り組んでいる。元々学位とかはいらないので無理なく学べる範囲で引き続きやっていきたい。特に来年は哲学をメインに受講していき数学を引き続きやっていきスタイルで取り組む。\u003C/p>\n\u003Ch2 id=\"健康\">健康\u003C/h2>\n\u003Cp>年始に腹筋ローラーによる筋トレから始まり、今ではジムに行くようになった。（最近は少しペースが落ちている）今まで散歩しか身体を動かすことをしなかったけど、集中して身体を動かすいうよりかはリフレッシュ目的で歩く感じだったので、しっかり身体を動かすことの良さに気づいてしまい継続している。筋トレをした日は睡眠の質が良いので継続していきたい。\u003C/p>\n\u003Cp>体調面、精神面では大きく崩れたことはなかったが、仕事に対してのエンゲージメントというかモチベーションの乱高下はあったように思う。そうなる前やそうなった時にサウナに行ったり、筋トレしたりしてなんとか回復したこともあった。\u003C/p>\n\u003Ch2 id=\"趣味や家族普段の生活\">趣味や家族、普段の生活\u003C/h2>\n\u003Cp>ゲーム全然していないなーと言いつつゼルダ、FF16、AC6はしっかりクリアまでやっていた。。ただそれ以外はほとんどやっていないかも。趣味の時間を数学の時間に充てていた。ゲーム以外のコンテンツも全然消費していない。\u003C/p>\n\u003Cp>睡眠時間は相変わらず短い傾向にある。そりゃ子供もいれば自分の時間を削って色々やっていくしかないんだけど、あまりネガティブな感情ではない。息子の成長が楽しいし、一緒に遊べることが増えたりして楽しい。ただもう少し家族との時間を増やして余裕がほしいなとは感じるので来年の課題ではある。\u003C/p>\n\u003Ch2 id=\"総括\">総括\u003C/h2>\n\u003Cp>仕事の充実のなさにかなり引っ張られた2023年だったかも。来年の目標はもう決めてあるのでもう少し自分にわがままになって自分で充実さを勝ち取りにいくように行動したい。\u003C/p>",{"headings":2912,"localImagePaths":2926,"remoteImagePaths":2927,"frontmatter":2903,"imagePaths":2928},[2913,2915,2918,2920,2921,2924],{"depth":22,"slug":2914,"text":2914},"仕事",{"depth":22,"slug":2916,"text":2917},"数学haskell","数学、Haskell",{"depth":22,"slug":2919,"text":2919},"大学",{"depth":22,"slug":2080,"text":2080},{"depth":22,"slug":2922,"text":2923},"趣味や家族普段の生活","趣味や家族、普段の生活",{"depth":22,"slug":2925,"text":2925},"総括",[],[],[],"2023/1230.md"]